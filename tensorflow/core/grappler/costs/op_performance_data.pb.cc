// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/grappler/costs/op_performance_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/grappler/costs/op_performance_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class SessionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SessionInfo>
     _instance;
} _SessionInfo_default_instance_;
class OpInfo_AttrEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpInfo::OpInfo_AttrEntry>
     _instance;
} _OpInfo_AttrEntry_default_instance_;
class OpInfo_TensorPropertiesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpInfo_TensorProperties>
     _instance;
} _OpInfo_TensorProperties_default_instance_;
class OpInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpInfo>
     _instance;
} _OpInfo_default_instance_;
class NormalDistributionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NormalDistribution>
     _instance;
} _NormalDistribution_default_instance_;
class LogNormalDistributionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogNormalDistribution>
     _instance;
} _LogNormalDistribution_default_instance_;
class OpPerformance_OpMemoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpPerformance_OpMemory>
     _instance;
} _OpPerformance_OpMemory_default_instance_;
class OpPerformanceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpPerformance>
     _instance;
  const ::tensorflow::NormalDistribution* execution_time_normal_;
  const ::tensorflow::LogNormalDistribution* execution_time_log_normal_;
} _OpPerformance_default_instance_;
class OpPerformanceListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpPerformanceList>
     _instance;
} _OpPerformanceList_default_instance_;

namespace protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, intra_op_parallelism_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, dtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo_TensorProperties, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpInfo, session_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, mu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalDistribution, sigma_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogNormalDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogNormalDistribution, mu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogNormalDistribution, sigma_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, output_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, temp_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, persistent_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, device_temp_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance_OpMemory, device_persistent_memory_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, session_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, temporary_memory_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, compute_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, compute_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, memory_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, compute_efficiency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, memory_efficiency_),
  offsetof(OpPerformanceDefaultTypeInternal, execution_time_normal_),
  offsetof(OpPerformanceDefaultTypeInternal, execution_time_log_normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, op_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformance, execution_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformanceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpPerformanceList, op_performance_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SessionInfo)},
  { 6, -1, sizeof(OpInfo_TensorProperties)},
  { 14, -1, sizeof(OpInfo)},
  { 25, -1, sizeof(NormalDistribution)},
  { 32, -1, sizeof(LogNormalDistribution)},
  { 39, -1, sizeof(OpPerformance_OpMemory)},
  { 49, -1, sizeof(OpPerformance)},
  { 67, -1, sizeof(OpPerformanceList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SessionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpInfo_AttrEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpInfo_TensorProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NormalDistribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogNormalDistribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpPerformance_OpMemory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpPerformance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpPerformanceList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/grappler/costs/op_performance_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[1].reflection = OpInfo::OpInfo_AttrEntry::CreateReflection(file_level_metadata[1].descriptor, _OpInfo_AttrEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto::InitDefaults();
  _SessionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SessionInfo_default_instance_);_OpInfo_AttrEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpInfo_AttrEntry_default_instance_);_OpInfo_TensorProperties_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpInfo_TensorProperties_default_instance_);_OpInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpInfo_default_instance_);_NormalDistribution_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NormalDistribution_default_instance_);_LogNormalDistribution_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogNormalDistribution_default_instance_);_OpPerformance_OpMemory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpPerformance_OpMemory_default_instance_);_OpPerformance_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpPerformance_default_instance_);_OpPerformanceList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpPerformanceList_default_instance_);_OpInfo_AttrEntry_default_instance_._instance.get_mutable()->set_default_instance(_OpInfo_AttrEntry_default_instance_._instance.get_mutable());
  _OpInfo_AttrEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _OpInfo_TensorProperties_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  _OpInfo_TensorProperties_default_instance_._instance.get_mutable()->value_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
  _OpInfo_default_instance_._instance.get_mutable()->device_ = const_cast< ::tensorflow::DeviceProperties*>(
      ::tensorflow::DeviceProperties::internal_default_instance());
  _OpInfo_default_instance_._instance.get_mutable()->session_info_ = const_cast< ::tensorflow::SessionInfo*>(
      ::tensorflow::SessionInfo::internal_default_instance());
  _OpPerformance_default_instance_._instance.get_mutable()->op_ = const_cast< ::tensorflow::OpInfo*>(
      ::tensorflow::OpInfo::internal_default_instance());
  _OpPerformance_default_instance_._instance.get_mutable()->session_info_ = const_cast< ::tensorflow::SessionInfo*>(
      ::tensorflow::SessionInfo::internal_default_instance());
  _OpPerformance_default_instance_.execution_time_normal_ = const_cast< ::tensorflow::NormalDistribution*>(
      ::tensorflow::NormalDistribution::internal_default_instance());
  _OpPerformance_default_instance_.execution_time_log_normal_ = const_cast< ::tensorflow::LogNormalDistribution*>(
      ::tensorflow::LogNormalDistribution::internal_default_instance());
  _OpPerformance_default_instance_._instance.get_mutable()->op_memory_ = const_cast< ::tensorflow::OpPerformance_OpMemory*>(
      ::tensorflow::OpPerformance_OpMemory::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n8tensorflow/core/grappler/costs/op_perf"
      "ormance_data.proto\022\ntensorflow\032&tensorfl"
      "ow/core/framework/tensor.proto\032,tensorfl"
      "ow/core/framework/tensor_shape.proto\032%te"
      "nsorflow/core/framework/types.proto\032*ten"
      "sorflow/core/framework/attr_value.proto\032"
      "0tensorflow/core/protobuf/device_propert"
      "ies.proto\"+\n\013SessionInfo\022\034\n\024intra_op_par"
      "allelism\030\001 \001(\003\"\333\003\n\006OpInfo\022\n\n\002op\030\001 \001(\t\022*\n"
      "\004attr\030\002 \003(\0132\034.tensorflow.OpInfo.AttrEntr"
      "y\0223\n\006inputs\030\003 \003(\0132#.tensorflow.OpInfo.Te"
      "nsorProperties\0224\n\007outputs\030\005 \003(\0132#.tensor"
      "flow.OpInfo.TensorProperties\022,\n\006device\030\004"
      " \001(\0132\034.tensorflow.DeviceProperties\022-\n\014se"
      "ssion_info\030\006 \001(\0132\027.tensorflow.SessionInf"
      "o\032B\n\tAttrEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001"
      "(\0132\025.tensorflow.AttrValue:\0028\001\032\214\001\n\020Tensor"
      "Properties\022#\n\005dtype\030\001 \001(\0162\024.tensorflow.D"
      "ataType\022+\n\005shape\030\002 \001(\0132\034.tensorflow.Tens"
      "orShapeProto\022&\n\005value\030\003 \001(\0132\027.tensorflow"
      ".TensorProto\"/\n\022NormalDistribution\022\n\n\002mu"
      "\030\001 \001(\001\022\r\n\005sigma\030\002 \001(\001\"2\n\025LogNormalDistri"
      "bution\022\n\n\002mu\030\001 \001(\001\022\r\n\005sigma\030\002 \001(\001\"\363\004\n\rOp"
      "Performance\022\036\n\002op\030\001 \001(\0132\022.tensorflow.OpI"
      "nfo\0221\n\014session_info\030\014 \001(\0132\027.tensorflow.S"
      "essionInfoB\002\030\001\022\014\n\004node\030\005 \001(\t\022\035\n\025temporar"
      "y_memory_size\030\002 \001(\003\022\024\n\014compute_cost\030\003 \001("
      "\003\022\024\n\014compute_time\030\006 \001(\003\022\023\n\013memory_time\030\007"
      " \001(\003\022\032\n\022compute_efficiency\030\004 \001(\001\022\031\n\021memo"
      "ry_efficiency\030\010 \001(\001\022\?\n\025execution_time_no"
      "rmal\030\n \001(\0132\036.tensorflow.NormalDistributi"
      "onH\000\022F\n\031execution_time_log_normal\030\013 \001(\0132"
      "!.tensorflow.LogNormalDistributionH\000\0225\n\t"
      "op_memory\030\t \001(\0132\".tensorflow.OpPerforman"
      "ce.OpMemory\032\227\001\n\010OpMemory\022\025\n\routput_memor"
      "y\030\001 \003(\003\022\023\n\013temp_memory\030\002 \001(\003\022\031\n\021persiste"
      "nt_memory\030\004 \001(\003\022\036\n\022device_temp_memory\030\003 "
      "\001(\003B\002\030\001\022$\n\030device_persistent_memory\030\005 \001("
      "\003B\002\030\001B\020\n\016execution_time\"F\n\021OpPerformance"
      "List\0221\n\016op_performance\030\001 \003(\0132\031.tensorflo"
      "w.OpPerformanceB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/grappler/costs/op_performance_data.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionInfo::kIntraOpParallelismFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionInfo::SessionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SessionInfo)
}
SessionInfo::SessionInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SessionInfo)
}
SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intra_op_parallelism_ = from.intra_op_parallelism_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SessionInfo)
}

void SessionInfo::SharedCtor() {
  intra_op_parallelism_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SessionInfo::ArenaDtor(void* object) {
  SessionInfo* _this = reinterpret_cast< SessionInfo* >(object);
  (void)_this;
}
void SessionInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionInfo& SessionInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionInfo* SessionInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SessionInfo>(arena);
}

void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intra_op_parallelism_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 intra_op_parallelism = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intra_op_parallelism_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 intra_op_parallelism = 1;
  if (this->intra_op_parallelism() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->intra_op_parallelism(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SessionInfo)
}

::google::protobuf::uint8* SessionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SessionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 intra_op_parallelism = 1;
  if (this->intra_op_parallelism() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->intra_op_parallelism(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SessionInfo)
  return target;
}

size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SessionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 intra_op_parallelism = 1;
  if (this->intra_op_parallelism() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->intra_op_parallelism());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SessionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SessionInfo)
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.intra_op_parallelism() != 0) {
    set_intra_op_parallelism(from.intra_op_parallelism());
  }
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SessionInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SessionInfo::UnsafeArenaSwap(SessionInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SessionInfo::InternalSwap(SessionInfo* other) {
  using std::swap;
  swap(intra_op_parallelism_, other->intra_op_parallelism_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionInfo

// int64 intra_op_parallelism = 1;
void SessionInfo::clear_intra_op_parallelism() {
  intra_op_parallelism_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SessionInfo::intra_op_parallelism() const {
  // @@protoc_insertion_point(field_get:tensorflow.SessionInfo.intra_op_parallelism)
  return intra_op_parallelism_;
}
void SessionInfo::set_intra_op_parallelism(::google::protobuf::int64 value) {
  
  intra_op_parallelism_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.SessionInfo.intra_op_parallelism)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

OpInfo::OpInfo_AttrEntry::OpInfo_AttrEntry() {}
OpInfo::OpInfo_AttrEntry::OpInfo_AttrEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata OpInfo::OpInfo_AttrEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[1];
}
void OpInfo::OpInfo_AttrEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void OpInfo::OpInfo_AttrEntry::MergeFrom(const OpInfo_AttrEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void OpInfo_TensorProperties::_slow_mutable_shape() {
  shape_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::_slow_release_shape() {
  if (shape_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorShapeProto* temp = new ::tensorflow::TensorShapeProto(*shape_);
    shape_ = NULL;
    return temp;
  }
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.TensorProperties.shape)
  
  ::tensorflow::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
void OpInfo_TensorProperties::_slow_set_allocated_shape(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorShapeProto** shape) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shape) == NULL) {
      message_arena->Own(*shape);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shape)) {
      ::tensorflow::TensorShapeProto* new_shape = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorShapeProto >(
            message_arena);
      new_shape->CopyFrom(**shape);
      *shape = new_shape;
    }
}
void OpInfo_TensorProperties::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.TensorProperties.shape)
}
void OpInfo_TensorProperties::_slow_mutable_value() {
  value_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
      GetArenaNoVirtual());
}
::tensorflow::TensorProto* OpInfo_TensorProperties::_slow_release_value() {
  if (value_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorProto* temp = new ::tensorflow::TensorProto(*value_);
    value_ = NULL;
    return temp;
  }
}
::tensorflow::TensorProto* OpInfo_TensorProperties::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.TensorProperties.value)
  
  ::tensorflow::TensorProto* temp = value_;
  value_ = NULL;
  return temp;
}
void OpInfo_TensorProperties::_slow_set_allocated_value(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorProto** value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*value) == NULL) {
      message_arena->Own(*value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*value)) {
      ::tensorflow::TensorProto* new_value = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorProto >(
            message_arena);
      new_value->CopyFrom(**value);
      *value = new_value;
    }
}
void OpInfo_TensorProperties::unsafe_arena_set_allocated_value(
    ::tensorflow::TensorProto* value) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.TensorProperties.value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpInfo_TensorProperties::kDtypeFieldNumber;
const int OpInfo_TensorProperties::kShapeFieldNumber;
const int OpInfo_TensorProperties::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpInfo_TensorProperties::OpInfo_TensorProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpInfo.TensorProperties)
}
OpInfo_TensorProperties::OpInfo_TensorProperties(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpInfo.TensorProperties)
}
OpInfo_TensorProperties::OpInfo_TensorProperties(const OpInfo_TensorProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::tensorflow::TensorProto(*from.value_);
  } else {
    value_ = NULL;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpInfo.TensorProperties)
}

void OpInfo_TensorProperties::SharedCtor() {
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
  _cached_size_ = 0;
}

OpInfo_TensorProperties::~OpInfo_TensorProperties() {
  // @@protoc_insertion_point(destructor:tensorflow.OpInfo.TensorProperties)
  SharedDtor();
}

void OpInfo_TensorProperties::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete value_;
}

void OpInfo_TensorProperties::ArenaDtor(void* object) {
  OpInfo_TensorProperties* _this = reinterpret_cast< OpInfo_TensorProperties* >(object);
  (void)_this;
}
void OpInfo_TensorProperties::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpInfo_TensorProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpInfo_TensorProperties::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpInfo_TensorProperties& OpInfo_TensorProperties::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpInfo_TensorProperties* OpInfo_TensorProperties::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpInfo_TensorProperties>(arena);
}

void OpInfo_TensorProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpInfo.TensorProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

bool OpInfo_TensorProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpInfo.TensorProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.DataType dtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorProto value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpInfo.TensorProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpInfo.TensorProperties)
  return false;
#undef DO_
}

void OpInfo_TensorProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpInfo.TensorProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->shape_, output);
  }

  // .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.OpInfo.TensorProperties)
}

::google::protobuf::uint8* OpInfo_TensorProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpInfo.TensorProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->shape_, deterministic, target);
  }

  // .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpInfo.TensorProperties)
  return target;
}

size_t OpInfo_TensorProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpInfo.TensorProperties)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shape_);
  }

  // .tensorflow.TensorProto value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpInfo_TensorProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpInfo.TensorProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInfo_TensorProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpInfo_TensorProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpInfo.TensorProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpInfo.TensorProperties)
    MergeFrom(*source);
  }
}

void OpInfo_TensorProperties::MergeFrom(const OpInfo_TensorProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpInfo.TensorProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.has_value()) {
    mutable_value()->::tensorflow::TensorProto::MergeFrom(from.value());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void OpInfo_TensorProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpInfo.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo_TensorProperties::CopyFrom(const OpInfo_TensorProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpInfo.TensorProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInfo_TensorProperties::IsInitialized() const {
  return true;
}

void OpInfo_TensorProperties::Swap(OpInfo_TensorProperties* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpInfo_TensorProperties* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpInfo_TensorProperties::UnsafeArenaSwap(OpInfo_TensorProperties* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpInfo_TensorProperties::InternalSwap(OpInfo_TensorProperties* other) {
  using std::swap;
  swap(shape_, other->shape_);
  swap(value_, other->value_);
  swap(dtype_, other->dtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpInfo_TensorProperties::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpInfo_TensorProperties

// .tensorflow.DataType dtype = 1;
void OpInfo_TensorProperties::clear_dtype() {
  dtype_ = 0;
}
::tensorflow::DataType OpInfo_TensorProperties::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.TensorProperties.dtype)
  return static_cast< ::tensorflow::DataType >(dtype_);
}
void OpInfo_TensorProperties::set_dtype(::tensorflow::DataType value) {
  
  dtype_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpInfo.TensorProperties.dtype)
}

// .tensorflow.TensorShapeProto shape = 2;
bool OpInfo_TensorProperties::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
void OpInfo_TensorProperties::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) delete shape_;
  shape_ = NULL;
}
const ::tensorflow::TensorShapeProto& OpInfo_TensorProperties::shape() const {
  const ::tensorflow::TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.TensorProperties.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorShapeProto*>(
      &::tensorflow::_TensorShapeProto_default_instance_);
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.TensorProperties.shape)
  return shape_;
}
::tensorflow::TensorShapeProto* OpInfo_TensorProperties::release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.TensorProperties.shape)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shape();
  } else {
    ::tensorflow::TensorShapeProto* temp = shape_;
    shape_ = NULL;
    return temp;
  }
}
 void OpInfo_TensorProperties::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape != NULL) {
    _slow_set_allocated_shape(message_arena, &shape);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.TensorProperties.shape)
}

// .tensorflow.TensorProto value = 3;
bool OpInfo_TensorProperties::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void OpInfo_TensorProperties::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::tensorflow::TensorProto& OpInfo_TensorProperties::value() const {
  const ::tensorflow::TensorProto* p = value_;
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.TensorProperties.value)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorProto*>(
      &::tensorflow::_TensorProto_default_instance_);
}
::tensorflow::TensorProto* OpInfo_TensorProperties::mutable_value() {
  
  if (value_ == NULL) {
    _slow_mutable_value();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.TensorProperties.value)
  return value_;
}
::tensorflow::TensorProto* OpInfo_TensorProperties::release_value() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.TensorProperties.value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_value();
  } else {
    ::tensorflow::TensorProto* temp = value_;
    value_ = NULL;
    return temp;
  }
}
 void OpInfo_TensorProperties::set_allocated_value(::tensorflow::TensorProto* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value != NULL) {
    _slow_set_allocated_value(message_arena, &value);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.TensorProperties.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void OpInfo::_slow_mutable_device() {
  device_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceProperties >(
      GetArenaNoVirtual());
}
::tensorflow::DeviceProperties* OpInfo::_slow_release_device() {
  if (device_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::DeviceProperties* temp = new ::tensorflow::DeviceProperties(*device_);
    device_ = NULL;
    return temp;
  }
}
::tensorflow::DeviceProperties* OpInfo::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.device)
  
  ::tensorflow::DeviceProperties* temp = device_;
  device_ = NULL;
  return temp;
}
void OpInfo::_slow_set_allocated_device(
    ::google::protobuf::Arena* message_arena, ::tensorflow::DeviceProperties** device) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*device) == NULL) {
      message_arena->Own(*device);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*device)) {
      ::tensorflow::DeviceProperties* new_device = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::DeviceProperties >(
            message_arena);
      new_device->CopyFrom(**device);
      *device = new_device;
    }
}
void OpInfo::unsafe_arena_set_allocated_device(
    ::tensorflow::DeviceProperties* device) {
  if (GetArenaNoVirtual() == NULL) {
    delete device_;
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.device)
}
void OpInfo::_slow_mutable_session_info() {
  session_info_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::SessionInfo >(
      GetArenaNoVirtual());
}
::tensorflow::SessionInfo* OpInfo::_slow_release_session_info() {
  if (session_info_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::SessionInfo* temp = new ::tensorflow::SessionInfo(*session_info_);
    session_info_ = NULL;
    return temp;
  }
}
::tensorflow::SessionInfo* OpInfo::unsafe_arena_release_session_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.session_info)
  
  ::tensorflow::SessionInfo* temp = session_info_;
  session_info_ = NULL;
  return temp;
}
void OpInfo::_slow_set_allocated_session_info(
    ::google::protobuf::Arena* message_arena, ::tensorflow::SessionInfo** session_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*session_info) == NULL) {
      message_arena->Own(*session_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*session_info)) {
      ::tensorflow::SessionInfo* new_session_info = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::SessionInfo >(
            message_arena);
      new_session_info->CopyFrom(**session_info);
      *session_info = new_session_info;
    }
}
void OpInfo::unsafe_arena_set_allocated_session_info(
    ::tensorflow::SessionInfo* session_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete session_info_;
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.session_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpInfo::kOpFieldNumber;
const int OpInfo::kAttrFieldNumber;
const int OpInfo::kInputsFieldNumber;
const int OpInfo::kOutputsFieldNumber;
const int OpInfo::kDeviceFieldNumber;
const int OpInfo::kSessionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpInfo::OpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpInfo)
}
OpInfo::OpInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attr_(arena),
  inputs_(arena),
  outputs_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpInfo)
}
OpInfo::OpInfo(const OpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attr_.MergeFrom(from.attr_);
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op().size() > 0) {
    op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op(),
      GetArenaNoVirtual());
  }
  if (from.has_device()) {
    device_ = new ::tensorflow::DeviceProperties(*from.device_);
  } else {
    device_ = NULL;
  }
  if (from.has_session_info()) {
    session_info_ = new ::tensorflow::SessionInfo(*from.session_info_);
  } else {
    session_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpInfo)
}

void OpInfo::SharedCtor() {
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_info_) -
      reinterpret_cast<char*>(&device_)) + sizeof(session_info_));
  _cached_size_ = 0;
}

OpInfo::~OpInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.OpInfo)
  SharedDtor();
}

void OpInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  op_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete session_info_;
}

void OpInfo::ArenaDtor(void* object) {
  OpInfo* _this = reinterpret_cast< OpInfo* >(object);
  (void)_this;
}
void OpInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpInfo::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpInfo& OpInfo::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpInfo* OpInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpInfo>(arena);
}

void OpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  op_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && device_ != NULL) {
    delete device_;
  }
  device_ = NULL;
  if (GetArenaNoVirtual() == NULL && session_info_ != NULL) {
    delete session_info_;
  }
  session_info_ = NULL;
  _internal_metadata_.Clear();
}

bool OpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op().data(), static_cast<int>(this->op().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.OpInfo.op"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.AttrValue> attr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          OpInfo_AttrEntry::Parser< ::google::protobuf::internal::MapField<
              OpInfo_AttrEntry,
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&attr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.OpInfo.AttrEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DeviceProperties device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.SessionInfo session_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpInfo)
  return false;
#undef DO_
}

void OpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpInfo.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->op(), output);
  }

  // map<string, .tensorflow.AttrValue> attr = 2;
  if (!this->attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.OpInfo.AttrEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attr_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it) {
        entry.reset(attr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(static_cast<int>(i)), output);
  }

  // .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->device_, output);
  }

  // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->outputs(static_cast<int>(i)), output);
  }

  // .tensorflow.SessionInfo session_info = 6;
  if (this->has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->session_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.OpInfo)
}

::google::protobuf::uint8* OpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpInfo.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->op(), target);
  }

  // map<string, .tensorflow.AttrValue> attr = 2;
  if (!this->attr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.OpInfo.AttrEntry.key");
      }
    };

    if (deterministic &&
        this->attr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attr_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attr().begin();
          it != this->attr().end(); ++it) {
        entry.reset(attr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->inputs(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->device_, deterministic, target);
  }

  // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->outputs(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.SessionInfo session_info = 6;
  if (this->has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->session_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpInfo)
  return target;
}

size_t OpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .tensorflow.AttrValue> attr = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attr_size());
  {
    ::google::protobuf::scoped_ptr<OpInfo_AttrEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->attr().begin();
        it != this->attr().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(static_cast<int>(i)));
    }
  }

  // string op = 1;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op());
  }

  // .tensorflow.DeviceProperties device = 4;
  if (this->has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_);
  }

  // .tensorflow.SessionInfo session_info = 6;
  if (this->has_session_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpInfo)
    MergeFrom(*source);
  }
}

void OpInfo::MergeFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.op().size() > 0) {
    set_op(from.op());
  }
  if (from.has_device()) {
    mutable_device()->::tensorflow::DeviceProperties::MergeFrom(from.device());
  }
  if (from.has_session_info()) {
    mutable_session_info()->::tensorflow::SessionInfo::MergeFrom(from.session_info());
  }
}

void OpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpInfo::CopyFrom(const OpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpInfo::IsInitialized() const {
  return true;
}

void OpInfo::Swap(OpInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpInfo::UnsafeArenaSwap(OpInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpInfo::InternalSwap(OpInfo* other) {
  using std::swap;
  attr_.Swap(&other->attr_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  op_.Swap(&other->op_);
  swap(device_, other->device_);
  swap(session_info_, other->session_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpInfo::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpInfo

// string op = 1;
void OpInfo::clear_op() {
  op_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpInfo::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.op)
  return op_.Get();
}
void OpInfo::set_op(const ::std::string& value) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.OpInfo.op)
}
#if LANG_CXX11
void OpInfo::set_op(::std::string&& value) {
  
  op_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.OpInfo.op)
}
#endif
void OpInfo::set_op(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.OpInfo.op)
}
void OpInfo::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.OpInfo.op)
}
::std::string* OpInfo::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.op)
  return op_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpInfo::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.op)
  
  return op_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpInfo::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpInfo.op)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return op_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpInfo::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.op)
}
void OpInfo::unsafe_arena_set_allocated_op(
    ::std::string* op) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (op != NULL) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      op, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpInfo.op)
}

// map<string, .tensorflow.AttrValue> attr = 2;
int OpInfo::attr_size() const {
  return attr_.size();
}
void OpInfo::clear_attr() {
  attr_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
OpInfo::attr() const {
  // @@protoc_insertion_point(field_map:tensorflow.OpInfo.attr)
  return attr_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
OpInfo::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.OpInfo.attr)
  return attr_.MutableMap();
}

// repeated .tensorflow.OpInfo.TensorProperties inputs = 3;
int OpInfo::inputs_size() const {
  return inputs_.size();
}
void OpInfo::clear_inputs() {
  inputs_.Clear();
}
const ::tensorflow::OpInfo_TensorProperties& OpInfo::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.inputs)
  return inputs_.Get(index);
}
::tensorflow::OpInfo_TensorProperties* OpInfo::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.inputs)
  return inputs_.Mutable(index);
}
::tensorflow::OpInfo_TensorProperties* OpInfo::add_inputs() {
  // @@protoc_insertion_point(field_add:tensorflow.OpInfo.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::OpInfo_TensorProperties >*
OpInfo::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpInfo.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::OpInfo_TensorProperties >&
OpInfo::inputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpInfo.inputs)
  return inputs_;
}

// repeated .tensorflow.OpInfo.TensorProperties outputs = 5;
int OpInfo::outputs_size() const {
  return outputs_.size();
}
void OpInfo::clear_outputs() {
  outputs_.Clear();
}
const ::tensorflow::OpInfo_TensorProperties& OpInfo::outputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.outputs)
  return outputs_.Get(index);
}
::tensorflow::OpInfo_TensorProperties* OpInfo::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.outputs)
  return outputs_.Mutable(index);
}
::tensorflow::OpInfo_TensorProperties* OpInfo::add_outputs() {
  // @@protoc_insertion_point(field_add:tensorflow.OpInfo.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::OpInfo_TensorProperties >*
OpInfo::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpInfo.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::OpInfo_TensorProperties >&
OpInfo::outputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpInfo.outputs)
  return outputs_;
}

// .tensorflow.DeviceProperties device = 4;
bool OpInfo::has_device() const {
  return this != internal_default_instance() && device_ != NULL;
}
void OpInfo::clear_device() {
  if (GetArenaNoVirtual() == NULL && device_ != NULL) delete device_;
  device_ = NULL;
}
const ::tensorflow::DeviceProperties& OpInfo::device() const {
  const ::tensorflow::DeviceProperties* p = device_;
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.device)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::DeviceProperties*>(
      &::tensorflow::_DeviceProperties_default_instance_);
}
::tensorflow::DeviceProperties* OpInfo::mutable_device() {
  
  if (device_ == NULL) {
    _slow_mutable_device();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.device)
  return device_;
}
::tensorflow::DeviceProperties* OpInfo::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.device)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_device();
  } else {
    ::tensorflow::DeviceProperties* temp = device_;
    device_ = NULL;
    return temp;
  }
}
 void OpInfo::set_allocated_device(::tensorflow::DeviceProperties* device) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_;
  }
  if (device != NULL) {
    _slow_set_allocated_device(message_arena, &device);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.device)
}

// .tensorflow.SessionInfo session_info = 6;
bool OpInfo::has_session_info() const {
  return this != internal_default_instance() && session_info_ != NULL;
}
void OpInfo::clear_session_info() {
  if (GetArenaNoVirtual() == NULL && session_info_ != NULL) delete session_info_;
  session_info_ = NULL;
}
const ::tensorflow::SessionInfo& OpInfo::session_info() const {
  const ::tensorflow::SessionInfo* p = session_info_;
  // @@protoc_insertion_point(field_get:tensorflow.OpInfo.session_info)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::SessionInfo*>(
      &::tensorflow::_SessionInfo_default_instance_);
}
::tensorflow::SessionInfo* OpInfo::mutable_session_info() {
  
  if (session_info_ == NULL) {
    _slow_mutable_session_info();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpInfo.session_info)
  return session_info_;
}
::tensorflow::SessionInfo* OpInfo::release_session_info() {
  // @@protoc_insertion_point(field_release:tensorflow.OpInfo.session_info)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_session_info();
  } else {
    ::tensorflow::SessionInfo* temp = session_info_;
    session_info_ = NULL;
    return temp;
  }
}
 void OpInfo::set_allocated_session_info(::tensorflow::SessionInfo* session_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_info_;
  }
  if (session_info != NULL) {
    _slow_set_allocated_session_info(message_arena, &session_info);
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpInfo.session_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalDistribution::kMuFieldNumber;
const int NormalDistribution::kSigmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalDistribution::NormalDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NormalDistribution)
}
NormalDistribution::NormalDistribution(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NormalDistribution)
}
NormalDistribution::NormalDistribution(const NormalDistribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.NormalDistribution)
}

void NormalDistribution::SharedCtor() {
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _cached_size_ = 0;
}

NormalDistribution::~NormalDistribution() {
  // @@protoc_insertion_point(destructor:tensorflow.NormalDistribution)
  SharedDtor();
}

void NormalDistribution::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void NormalDistribution::ArenaDtor(void* object) {
  NormalDistribution* _this = reinterpret_cast< NormalDistribution* >(object);
  (void)_this;
}
void NormalDistribution::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NormalDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalDistribution::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalDistribution& NormalDistribution::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

NormalDistribution* NormalDistribution::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NormalDistribution>(arena);
}

void NormalDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NormalDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

bool NormalDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NormalDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double mu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sigma = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NormalDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NormalDistribution)
  return false;
#undef DO_
}

void NormalDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NormalDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1;
  if (this->mu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mu(), output);
  }

  // double sigma = 2;
  if (this->sigma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sigma(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.NormalDistribution)
}

::google::protobuf::uint8* NormalDistribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NormalDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1;
  if (this->mu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mu(), target);
  }

  // double sigma = 2;
  if (this->sigma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sigma(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NormalDistribution)
  return target;
}

size_t NormalDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NormalDistribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double mu = 1;
  if (this->mu() != 0) {
    total_size += 1 + 8;
  }

  // double sigma = 2;
  if (this->sigma() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalDistribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalDistribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalDistribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NormalDistribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NormalDistribution)
    MergeFrom(*source);
  }
}

void NormalDistribution::MergeFrom(const NormalDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mu() != 0) {
    set_mu(from.mu());
  }
  if (from.sigma() != 0) {
    set_sigma(from.sigma());
  }
}

void NormalDistribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalDistribution::CopyFrom(const NormalDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalDistribution::IsInitialized() const {
  return true;
}

void NormalDistribution::Swap(NormalDistribution* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NormalDistribution* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NormalDistribution::UnsafeArenaSwap(NormalDistribution* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NormalDistribution::InternalSwap(NormalDistribution* other) {
  using std::swap;
  swap(mu_, other->mu_);
  swap(sigma_, other->sigma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalDistribution::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalDistribution

// double mu = 1;
void NormalDistribution::clear_mu() {
  mu_ = 0;
}
double NormalDistribution::mu() const {
  // @@protoc_insertion_point(field_get:tensorflow.NormalDistribution.mu)
  return mu_;
}
void NormalDistribution::set_mu(double value) {
  
  mu_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NormalDistribution.mu)
}

// double sigma = 2;
void NormalDistribution::clear_sigma() {
  sigma_ = 0;
}
double NormalDistribution::sigma() const {
  // @@protoc_insertion_point(field_get:tensorflow.NormalDistribution.sigma)
  return sigma_;
}
void NormalDistribution::set_sigma(double value) {
  
  sigma_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NormalDistribution.sigma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogNormalDistribution::kMuFieldNumber;
const int LogNormalDistribution::kSigmaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogNormalDistribution::LogNormalDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.LogNormalDistribution)
}
LogNormalDistribution::LogNormalDistribution(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LogNormalDistribution)
}
LogNormalDistribution::LogNormalDistribution(const LogNormalDistribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mu_, &from.mu_,
    static_cast<size_t>(reinterpret_cast<char*>(&sigma_) -
    reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.LogNormalDistribution)
}

void LogNormalDistribution::SharedCtor() {
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _cached_size_ = 0;
}

LogNormalDistribution::~LogNormalDistribution() {
  // @@protoc_insertion_point(destructor:tensorflow.LogNormalDistribution)
  SharedDtor();
}

void LogNormalDistribution::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void LogNormalDistribution::ArenaDtor(void* object) {
  LogNormalDistribution* _this = reinterpret_cast< LogNormalDistribution* >(object);
  (void)_this;
}
void LogNormalDistribution::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogNormalDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogNormalDistribution::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogNormalDistribution& LogNormalDistribution::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogNormalDistribution* LogNormalDistribution::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogNormalDistribution>(arena);
}

void LogNormalDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LogNormalDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sigma_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(sigma_));
  _internal_metadata_.Clear();
}

bool LogNormalDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.LogNormalDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double mu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sigma = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.LogNormalDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.LogNormalDistribution)
  return false;
#undef DO_
}

void LogNormalDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.LogNormalDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1;
  if (this->mu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mu(), output);
  }

  // double sigma = 2;
  if (this->sigma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sigma(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.LogNormalDistribution)
}

::google::protobuf::uint8* LogNormalDistribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LogNormalDistribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double mu = 1;
  if (this->mu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mu(), target);
  }

  // double sigma = 2;
  if (this->sigma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sigma(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LogNormalDistribution)
  return target;
}

size_t LogNormalDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LogNormalDistribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double mu = 1;
  if (this->mu() != 0) {
    total_size += 1 + 8;
  }

  // double sigma = 2;
  if (this->sigma() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogNormalDistribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.LogNormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const LogNormalDistribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogNormalDistribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.LogNormalDistribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.LogNormalDistribution)
    MergeFrom(*source);
  }
}

void LogNormalDistribution::MergeFrom(const LogNormalDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LogNormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mu() != 0) {
    set_mu(from.mu());
  }
  if (from.sigma() != 0) {
    set_sigma(from.sigma());
  }
}

void LogNormalDistribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.LogNormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogNormalDistribution::CopyFrom(const LogNormalDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LogNormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogNormalDistribution::IsInitialized() const {
  return true;
}

void LogNormalDistribution::Swap(LogNormalDistribution* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogNormalDistribution* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LogNormalDistribution::UnsafeArenaSwap(LogNormalDistribution* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogNormalDistribution::InternalSwap(LogNormalDistribution* other) {
  using std::swap;
  swap(mu_, other->mu_);
  swap(sigma_, other->sigma_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogNormalDistribution::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogNormalDistribution

// double mu = 1;
void LogNormalDistribution::clear_mu() {
  mu_ = 0;
}
double LogNormalDistribution::mu() const {
  // @@protoc_insertion_point(field_get:tensorflow.LogNormalDistribution.mu)
  return mu_;
}
void LogNormalDistribution::set_mu(double value) {
  
  mu_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LogNormalDistribution.mu)
}

// double sigma = 2;
void LogNormalDistribution::clear_sigma() {
  sigma_ = 0;
}
double LogNormalDistribution::sigma() const {
  // @@protoc_insertion_point(field_get:tensorflow.LogNormalDistribution.sigma)
  return sigma_;
}
void LogNormalDistribution::set_sigma(double value) {
  
  sigma_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.LogNormalDistribution.sigma)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPerformance_OpMemory::kOutputMemoryFieldNumber;
const int OpPerformance_OpMemory::kTempMemoryFieldNumber;
const int OpPerformance_OpMemory::kPersistentMemoryFieldNumber;
const int OpPerformance_OpMemory::kDeviceTempMemoryFieldNumber;
const int OpPerformance_OpMemory::kDevicePersistentMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPerformance_OpMemory::OpPerformance_OpMemory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformance.OpMemory)
}
OpPerformance_OpMemory::OpPerformance_OpMemory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  output_memory_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformance.OpMemory)
}
OpPerformance_OpMemory::OpPerformance_OpMemory(const OpPerformance_OpMemory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      output_memory_(from.output_memory_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&temp_memory_, &from.temp_memory_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_persistent_memory_) -
    reinterpret_cast<char*>(&temp_memory_)) + sizeof(device_persistent_memory_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformance.OpMemory)
}

void OpPerformance_OpMemory::SharedCtor() {
  ::memset(&temp_memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_) -
      reinterpret_cast<char*>(&temp_memory_)) + sizeof(device_persistent_memory_));
  _cached_size_ = 0;
}

OpPerformance_OpMemory::~OpPerformance_OpMemory() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformance.OpMemory)
  SharedDtor();
}

void OpPerformance_OpMemory::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void OpPerformance_OpMemory::ArenaDtor(void* object) {
  OpPerformance_OpMemory* _this = reinterpret_cast< OpPerformance_OpMemory* >(object);
  (void)_this;
}
void OpPerformance_OpMemory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpPerformance_OpMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPerformance_OpMemory::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpPerformance_OpMemory& OpPerformance_OpMemory::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpPerformance_OpMemory* OpPerformance_OpMemory::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpPerformance_OpMemory>(arena);
}

void OpPerformance_OpMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformance.OpMemory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_memory_.Clear();
  ::memset(&temp_memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_) -
      reinterpret_cast<char*>(&temp_memory_)) + sizeof(device_persistent_memory_));
  _internal_metadata_.Clear();
}

bool OpPerformance_OpMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpPerformance.OpMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 output_memory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_output_memory())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_output_memory())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 temp_memory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temp_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 device_temp_memory = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_temp_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 persistent_memory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &persistent_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 device_persistent_memory = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_persistent_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpPerformance.OpMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpPerformance.OpMemory)
  return false;
#undef DO_
}

void OpPerformance_OpMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpPerformance.OpMemory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 output_memory = 1;
  if (this->output_memory_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _output_memory_cached_byte_size_));
  }
  for (int i = 0, n = this->output_memory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->output_memory(i), output);
  }

  // int64 temp_memory = 2;
  if (this->temp_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->temp_memory(), output);
  }

  // int64 device_temp_memory = 3 [deprecated = true];
  if (this->device_temp_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->device_temp_memory(), output);
  }

  // int64 persistent_memory = 4;
  if (this->persistent_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->persistent_memory(), output);
  }

  // int64 device_persistent_memory = 5 [deprecated = true];
  if (this->device_persistent_memory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->device_persistent_memory(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.OpPerformance.OpMemory)
}

::google::protobuf::uint8* OpPerformance_OpMemory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformance.OpMemory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 output_memory = 1;
  if (this->output_memory_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _output_memory_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->output_memory_, target);
  }

  // int64 temp_memory = 2;
  if (this->temp_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->temp_memory(), target);
  }

  // int64 device_temp_memory = 3 [deprecated = true];
  if (this->device_temp_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->device_temp_memory(), target);
  }

  // int64 persistent_memory = 4;
  if (this->persistent_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->persistent_memory(), target);
  }

  // int64 device_persistent_memory = 5 [deprecated = true];
  if (this->device_persistent_memory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->device_persistent_memory(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformance.OpMemory)
  return target;
}

size_t OpPerformance_OpMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformance.OpMemory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 output_memory = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->output_memory_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_memory_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 temp_memory = 2;
  if (this->temp_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->temp_memory());
  }

  // int64 device_temp_memory = 3 [deprecated = true];
  if (this->device_temp_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_temp_memory());
  }

  // int64 persistent_memory = 4;
  if (this->persistent_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->persistent_memory());
  }

  // int64 device_persistent_memory = 5 [deprecated = true];
  if (this->device_persistent_memory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_persistent_memory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPerformance_OpMemory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformance.OpMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPerformance_OpMemory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPerformance_OpMemory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformance.OpMemory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformance.OpMemory)
    MergeFrom(*source);
  }
}

void OpPerformance_OpMemory::MergeFrom(const OpPerformance_OpMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformance.OpMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_memory_.MergeFrom(from.output_memory_);
  if (from.temp_memory() != 0) {
    set_temp_memory(from.temp_memory());
  }
  if (from.device_temp_memory() != 0) {
    set_device_temp_memory(from.device_temp_memory());
  }
  if (from.persistent_memory() != 0) {
    set_persistent_memory(from.persistent_memory());
  }
  if (from.device_persistent_memory() != 0) {
    set_device_persistent_memory(from.device_persistent_memory());
  }
}

void OpPerformance_OpMemory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformance.OpMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformance_OpMemory::CopyFrom(const OpPerformance_OpMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformance.OpMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPerformance_OpMemory::IsInitialized() const {
  return true;
}

void OpPerformance_OpMemory::Swap(OpPerformance_OpMemory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpPerformance_OpMemory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpPerformance_OpMemory::UnsafeArenaSwap(OpPerformance_OpMemory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpPerformance_OpMemory::InternalSwap(OpPerformance_OpMemory* other) {
  using std::swap;
  output_memory_.InternalSwap(&other->output_memory_);
  swap(temp_memory_, other->temp_memory_);
  swap(device_temp_memory_, other->device_temp_memory_);
  swap(persistent_memory_, other->persistent_memory_);
  swap(device_persistent_memory_, other->device_persistent_memory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPerformance_OpMemory::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPerformance_OpMemory

// repeated int64 output_memory = 1;
int OpPerformance_OpMemory::output_memory_size() const {
  return output_memory_.size();
}
void OpPerformance_OpMemory::clear_output_memory() {
  output_memory_.Clear();
}
::google::protobuf::int64 OpPerformance_OpMemory::output_memory(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.output_memory)
  return output_memory_.Get(index);
}
void OpPerformance_OpMemory::set_output_memory(int index, ::google::protobuf::int64 value) {
  output_memory_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.output_memory)
}
void OpPerformance_OpMemory::add_output_memory(::google::protobuf::int64 value) {
  output_memory_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.OpPerformance.OpMemory.output_memory)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
OpPerformance_OpMemory::output_memory() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpPerformance.OpMemory.output_memory)
  return output_memory_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
OpPerformance_OpMemory::mutable_output_memory() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpPerformance.OpMemory.output_memory)
  return &output_memory_;
}

// int64 temp_memory = 2;
void OpPerformance_OpMemory::clear_temp_memory() {
  temp_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::temp_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.temp_memory)
  return temp_memory_;
}
void OpPerformance_OpMemory::set_temp_memory(::google::protobuf::int64 value) {
  
  temp_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.temp_memory)
}

// int64 persistent_memory = 4;
void OpPerformance_OpMemory::clear_persistent_memory() {
  persistent_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::persistent_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.persistent_memory)
  return persistent_memory_;
}
void OpPerformance_OpMemory::set_persistent_memory(::google::protobuf::int64 value) {
  
  persistent_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.persistent_memory)
}

// int64 device_temp_memory = 3 [deprecated = true];
void OpPerformance_OpMemory::clear_device_temp_memory() {
  device_temp_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::device_temp_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.device_temp_memory)
  return device_temp_memory_;
}
void OpPerformance_OpMemory::set_device_temp_memory(::google::protobuf::int64 value) {
  
  device_temp_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.device_temp_memory)
}

// int64 device_persistent_memory = 5 [deprecated = true];
void OpPerformance_OpMemory::clear_device_persistent_memory() {
  device_persistent_memory_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance_OpMemory::device_persistent_memory() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.OpMemory.device_persistent_memory)
  return device_persistent_memory_;
}
void OpPerformance_OpMemory::set_device_persistent_memory(::google::protobuf::int64 value) {
  
  device_persistent_memory_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.OpMemory.device_persistent_memory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void OpPerformance::_slow_mutable_op() {
  op_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpInfo >(
      GetArenaNoVirtual());
}
::tensorflow::OpInfo* OpPerformance::_slow_release_op() {
  if (op_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::OpInfo* temp = new ::tensorflow::OpInfo(*op_);
    op_ = NULL;
    return temp;
  }
}
::tensorflow::OpInfo* OpPerformance::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.op)
  
  ::tensorflow::OpInfo* temp = op_;
  op_ = NULL;
  return temp;
}
void OpPerformance::_slow_set_allocated_op(
    ::google::protobuf::Arena* message_arena, ::tensorflow::OpInfo** op) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*op) == NULL) {
      message_arena->Own(*op);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*op)) {
      ::tensorflow::OpInfo* new_op = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpInfo >(
            message_arena);
      new_op->CopyFrom(**op);
      *op = new_op;
    }
}
void OpPerformance::unsafe_arena_set_allocated_op(
    ::tensorflow::OpInfo* op) {
  if (GetArenaNoVirtual() == NULL) {
    delete op_;
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.op)
}
void OpPerformance::_slow_mutable_session_info() {
  session_info_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::SessionInfo >(
      GetArenaNoVirtual());
}
::tensorflow::SessionInfo* OpPerformance::_slow_release_session_info() {
  if (session_info_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::SessionInfo* temp = new ::tensorflow::SessionInfo(*session_info_);
    session_info_ = NULL;
    return temp;
  }
}
::tensorflow::SessionInfo* OpPerformance::unsafe_arena_release_session_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.session_info)
  
  ::tensorflow::SessionInfo* temp = session_info_;
  session_info_ = NULL;
  return temp;
}
void OpPerformance::_slow_set_allocated_session_info(
    ::google::protobuf::Arena* message_arena, ::tensorflow::SessionInfo** session_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*session_info) == NULL) {
      message_arena->Own(*session_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*session_info)) {
      ::tensorflow::SessionInfo* new_session_info = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::SessionInfo >(
            message_arena);
      new_session_info->CopyFrom(**session_info);
      *session_info = new_session_info;
    }
}
void OpPerformance::unsafe_arena_set_allocated_session_info(
    ::tensorflow::SessionInfo* session_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete session_info_;
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.session_info)
}
void OpPerformance::_slow_mutable_op_memory() {
  op_memory_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpPerformance_OpMemory >(
      GetArenaNoVirtual());
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::_slow_release_op_memory() {
  if (op_memory_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::OpPerformance_OpMemory* temp = new ::tensorflow::OpPerformance_OpMemory(*op_memory_);
    op_memory_ = NULL;
    return temp;
  }
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::unsafe_arena_release_op_memory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.op_memory)
  
  ::tensorflow::OpPerformance_OpMemory* temp = op_memory_;
  op_memory_ = NULL;
  return temp;
}
void OpPerformance::_slow_set_allocated_op_memory(
    ::google::protobuf::Arena* message_arena, ::tensorflow::OpPerformance_OpMemory** op_memory) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*op_memory) == NULL) {
      message_arena->Own(*op_memory);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*op_memory)) {
      ::tensorflow::OpPerformance_OpMemory* new_op_memory = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::OpPerformance_OpMemory >(
            message_arena);
      new_op_memory->CopyFrom(**op_memory);
      *op_memory = new_op_memory;
    }
}
void OpPerformance::unsafe_arena_set_allocated_op_memory(
    ::tensorflow::OpPerformance_OpMemory* op_memory) {
  if (GetArenaNoVirtual() == NULL) {
    delete op_memory_;
  }
  op_memory_ = op_memory;
  if (op_memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.op_memory)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPerformance::kOpFieldNumber;
const int OpPerformance::kSessionInfoFieldNumber;
const int OpPerformance::kNodeFieldNumber;
const int OpPerformance::kTemporaryMemorySizeFieldNumber;
const int OpPerformance::kComputeCostFieldNumber;
const int OpPerformance::kComputeTimeFieldNumber;
const int OpPerformance::kMemoryTimeFieldNumber;
const int OpPerformance::kComputeEfficiencyFieldNumber;
const int OpPerformance::kMemoryEfficiencyFieldNumber;
const int OpPerformance::kExecutionTimeNormalFieldNumber;
const int OpPerformance::kExecutionTimeLogNormalFieldNumber;
const int OpPerformance::kOpMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPerformance::OpPerformance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformance)
}
OpPerformance::OpPerformance(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformance)
}
OpPerformance::OpPerformance(const OpPerformance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node().size() > 0) {
    node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node(),
      GetArenaNoVirtual());
  }
  if (from.has_op()) {
    op_ = new ::tensorflow::OpInfo(*from.op_);
  } else {
    op_ = NULL;
  }
  if (from.has_op_memory()) {
    op_memory_ = new ::tensorflow::OpPerformance_OpMemory(*from.op_memory_);
  } else {
    op_memory_ = NULL;
  }
  if (from.has_session_info()) {
    session_info_ = new ::tensorflow::SessionInfo(*from.session_info_);
  } else {
    session_info_ = NULL;
  }
  ::memcpy(&temporary_memory_size_, &from.temporary_memory_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_efficiency_) -
    reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(memory_efficiency_));
  clear_has_execution_time();
  switch (from.execution_time_case()) {
    case kExecutionTimeNormal: {
      mutable_execution_time_normal()->::tensorflow::NormalDistribution::MergeFrom(from.execution_time_normal());
      break;
    }
    case kExecutionTimeLogNormal: {
      mutable_execution_time_log_normal()->::tensorflow::LogNormalDistribution::MergeFrom(from.execution_time_log_normal());
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformance)
}

void OpPerformance::SharedCtor() {
  node_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_efficiency_) -
      reinterpret_cast<char*>(&op_)) + sizeof(memory_efficiency_));
  clear_has_execution_time();
  _cached_size_ = 0;
}

OpPerformance::~OpPerformance() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformance)
  SharedDtor();
}

void OpPerformance::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  node_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete op_;
  if (this != internal_default_instance()) delete op_memory_;
  if (this != internal_default_instance()) delete session_info_;
  if (has_execution_time()) {
    clear_execution_time();
  }
}

void OpPerformance::ArenaDtor(void* object) {
  OpPerformance* _this = reinterpret_cast< OpPerformance* >(object);
  (void)_this;
}
void OpPerformance::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpPerformance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPerformance::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpPerformance& OpPerformance::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpPerformance* OpPerformance::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpPerformance>(arena);
}

void OpPerformance::clear_execution_time() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.OpPerformance)
  switch (execution_time_case()) {
    case kExecutionTimeNormal: {
      if (GetArenaNoVirtual() == NULL) {
        delete execution_time_.execution_time_normal_;
      }
      break;
    }
    case kExecutionTimeLogNormal: {
      if (GetArenaNoVirtual() == NULL) {
        delete execution_time_.execution_time_log_normal_;
      }
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXECUTION_TIME_NOT_SET;
}


void OpPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && op_ != NULL) {
    delete op_;
  }
  op_ = NULL;
  if (GetArenaNoVirtual() == NULL && op_memory_ != NULL) {
    delete op_memory_;
  }
  op_memory_ = NULL;
  if (GetArenaNoVirtual() == NULL && session_info_ != NULL) {
    delete session_info_;
  }
  session_info_ = NULL;
  ::memset(&temporary_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_efficiency_) -
      reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(memory_efficiency_));
  clear_execution_time();
  _internal_metadata_.Clear();
}

bool OpPerformance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpPerformance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.OpInfo op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 temporary_memory_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temporary_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compute_cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double compute_efficiency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compute_efficiency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node().data(), static_cast<int>(this->node().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.OpPerformance.node"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compute_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &compute_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 memory_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double memory_efficiency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memory_efficiency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.OpPerformance.OpMemory op_memory = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.NormalDistribution execution_time_normal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_time_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_execution_time_log_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpPerformance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpPerformance)
  return false;
#undef DO_
}

void OpPerformance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->op_, output);
  }

  // int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->temporary_memory_size(), output);
  }

  // int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->compute_cost(), output);
  }

  // double compute_efficiency = 4;
  if (this->compute_efficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->compute_efficiency(), output);
  }

  // string node = 5;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpPerformance.node");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->node(), output);
  }

  // int64 compute_time = 6;
  if (this->compute_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->compute_time(), output);
  }

  // int64 memory_time = 7;
  if (this->memory_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->memory_time(), output);
  }

  // double memory_efficiency = 8;
  if (this->memory_efficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->memory_efficiency(), output);
  }

  // .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->op_memory_, output);
  }

  // .tensorflow.NormalDistribution execution_time_normal = 10;
  if (has_execution_time_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *execution_time_.execution_time_normal_, output);
  }

  // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
  if (has_execution_time_log_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *execution_time_.execution_time_log_normal_, output);
  }

  // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
  if (this->has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->session_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.OpPerformance)
}

::google::protobuf::uint8* OpPerformance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->op_, deterministic, target);
  }

  // int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->temporary_memory_size(), target);
  }

  // int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->compute_cost(), target);
  }

  // double compute_efficiency = 4;
  if (this->compute_efficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->compute_efficiency(), target);
  }

  // string node = 5;
  if (this->node().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node().data(), static_cast<int>(this->node().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.OpPerformance.node");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->node(), target);
  }

  // int64 compute_time = 6;
  if (this->compute_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->compute_time(), target);
  }

  // int64 memory_time = 7;
  if (this->memory_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->memory_time(), target);
  }

  // double memory_efficiency = 8;
  if (this->memory_efficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->memory_efficiency(), target);
  }

  // .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->op_memory_, deterministic, target);
  }

  // .tensorflow.NormalDistribution execution_time_normal = 10;
  if (has_execution_time_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *execution_time_.execution_time_normal_, deterministic, target);
  }

  // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
  if (has_execution_time_log_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *execution_time_.execution_time_log_normal_, deterministic, target);
  }

  // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
  if (this->has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->session_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformance)
  return target;
}

size_t OpPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node = 5;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node());
  }

  // .tensorflow.OpInfo op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_);
  }

  // .tensorflow.OpPerformance.OpMemory op_memory = 9;
  if (this->has_op_memory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_memory_);
  }

  // .tensorflow.SessionInfo session_info = 12 [deprecated = true];
  if (this->has_session_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_info_);
  }

  // int64 temporary_memory_size = 2;
  if (this->temporary_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->temporary_memory_size());
  }

  // int64 compute_cost = 3;
  if (this->compute_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_cost());
  }

  // double compute_efficiency = 4;
  if (this->compute_efficiency() != 0) {
    total_size += 1 + 8;
  }

  // int64 compute_time = 6;
  if (this->compute_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->compute_time());
  }

  // int64 memory_time = 7;
  if (this->memory_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memory_time());
  }

  // double memory_efficiency = 8;
  if (this->memory_efficiency() != 0) {
    total_size += 1 + 8;
  }

  switch (execution_time_case()) {
    // .tensorflow.NormalDistribution execution_time_normal = 10;
    case kExecutionTimeNormal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *execution_time_.execution_time_normal_);
      break;
    }
    // .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
    case kExecutionTimeLogNormal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *execution_time_.execution_time_log_normal_);
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPerformance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPerformance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPerformance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformance)
    MergeFrom(*source);
  }
}

void OpPerformance::MergeFrom(const OpPerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node().size() > 0) {
    set_node(from.node());
  }
  if (from.has_op()) {
    mutable_op()->::tensorflow::OpInfo::MergeFrom(from.op());
  }
  if (from.has_op_memory()) {
    mutable_op_memory()->::tensorflow::OpPerformance_OpMemory::MergeFrom(from.op_memory());
  }
  if (from.has_session_info()) {
    mutable_session_info()->::tensorflow::SessionInfo::MergeFrom(from.session_info());
  }
  if (from.temporary_memory_size() != 0) {
    set_temporary_memory_size(from.temporary_memory_size());
  }
  if (from.compute_cost() != 0) {
    set_compute_cost(from.compute_cost());
  }
  if (from.compute_efficiency() != 0) {
    set_compute_efficiency(from.compute_efficiency());
  }
  if (from.compute_time() != 0) {
    set_compute_time(from.compute_time());
  }
  if (from.memory_time() != 0) {
    set_memory_time(from.memory_time());
  }
  if (from.memory_efficiency() != 0) {
    set_memory_efficiency(from.memory_efficiency());
  }
  switch (from.execution_time_case()) {
    case kExecutionTimeNormal: {
      mutable_execution_time_normal()->::tensorflow::NormalDistribution::MergeFrom(from.execution_time_normal());
      break;
    }
    case kExecutionTimeLogNormal: {
      mutable_execution_time_log_normal()->::tensorflow::LogNormalDistribution::MergeFrom(from.execution_time_log_normal());
      break;
    }
    case EXECUTION_TIME_NOT_SET: {
      break;
    }
  }
}

void OpPerformance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformance::CopyFrom(const OpPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPerformance::IsInitialized() const {
  return true;
}

void OpPerformance::Swap(OpPerformance* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpPerformance* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpPerformance::UnsafeArenaSwap(OpPerformance* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpPerformance::InternalSwap(OpPerformance* other) {
  using std::swap;
  node_.Swap(&other->node_);
  swap(op_, other->op_);
  swap(op_memory_, other->op_memory_);
  swap(session_info_, other->session_info_);
  swap(temporary_memory_size_, other->temporary_memory_size_);
  swap(compute_cost_, other->compute_cost_);
  swap(compute_efficiency_, other->compute_efficiency_);
  swap(compute_time_, other->compute_time_);
  swap(memory_time_, other->memory_time_);
  swap(memory_efficiency_, other->memory_efficiency_);
  swap(execution_time_, other->execution_time_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPerformance::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPerformance

// .tensorflow.OpInfo op = 1;
bool OpPerformance::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
void OpPerformance::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
const ::tensorflow::OpInfo& OpPerformance::op() const {
  const ::tensorflow::OpInfo* p = op_;
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.op)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::OpInfo*>(
      &::tensorflow::_OpInfo_default_instance_);
}
::tensorflow::OpInfo* OpPerformance::mutable_op() {
  
  if (op_ == NULL) {
    _slow_mutable_op();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.op)
  return op_;
}
::tensorflow::OpInfo* OpPerformance::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.op)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_op();
  } else {
    ::tensorflow::OpInfo* temp = op_;
    op_ = NULL;
    return temp;
  }
}
 void OpPerformance::set_allocated_op(::tensorflow::OpInfo* op) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete op_;
  }
  if (op != NULL) {
    _slow_set_allocated_op(message_arena, &op);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.op)
}

// .tensorflow.SessionInfo session_info = 12 [deprecated = true];
bool OpPerformance::has_session_info() const {
  return this != internal_default_instance() && session_info_ != NULL;
}
void OpPerformance::clear_session_info() {
  if (GetArenaNoVirtual() == NULL && session_info_ != NULL) delete session_info_;
  session_info_ = NULL;
}
const ::tensorflow::SessionInfo& OpPerformance::session_info() const {
  const ::tensorflow::SessionInfo* p = session_info_;
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.session_info)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::SessionInfo*>(
      &::tensorflow::_SessionInfo_default_instance_);
}
::tensorflow::SessionInfo* OpPerformance::mutable_session_info() {
  
  if (session_info_ == NULL) {
    _slow_mutable_session_info();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.session_info)
  return session_info_;
}
::tensorflow::SessionInfo* OpPerformance::release_session_info() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.session_info)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_session_info();
  } else {
    ::tensorflow::SessionInfo* temp = session_info_;
    session_info_ = NULL;
    return temp;
  }
}
 void OpPerformance::set_allocated_session_info(::tensorflow::SessionInfo* session_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_info_;
  }
  if (session_info != NULL) {
    _slow_set_allocated_session_info(message_arena, &session_info);
  }
  session_info_ = session_info;
  if (session_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.session_info)
}

// string node = 5;
void OpPerformance::clear_node() {
  node_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& OpPerformance::node() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.node)
  return node_.Get();
}
void OpPerformance::set_node(const ::std::string& value) {
  
  node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.node)
}
#if LANG_CXX11
void OpPerformance::set_node(::std::string&& value) {
  
  node_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.OpPerformance.node)
}
#endif
void OpPerformance::set_node(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.OpPerformance.node)
}
void OpPerformance::set_node(const char* value,
    size_t size) {
  
  node_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.OpPerformance.node)
}
::std::string* OpPerformance::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.node)
  return node_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpPerformance::release_node() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.node)
  
  return node_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* OpPerformance::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.node)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void OpPerformance::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.node)
}
void OpPerformance::unsafe_arena_set_allocated_node(
    ::std::string* node) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node != NULL) {
    
  } else {
    
  }
  node_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.node)
}

// int64 temporary_memory_size = 2;
void OpPerformance::clear_temporary_memory_size() {
  temporary_memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::temporary_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.temporary_memory_size)
  return temporary_memory_size_;
}
void OpPerformance::set_temporary_memory_size(::google::protobuf::int64 value) {
  
  temporary_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.temporary_memory_size)
}

// int64 compute_cost = 3;
void OpPerformance::clear_compute_cost() {
  compute_cost_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::compute_cost() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.compute_cost)
  return compute_cost_;
}
void OpPerformance::set_compute_cost(::google::protobuf::int64 value) {
  
  compute_cost_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.compute_cost)
}

// int64 compute_time = 6;
void OpPerformance::clear_compute_time() {
  compute_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::compute_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.compute_time)
  return compute_time_;
}
void OpPerformance::set_compute_time(::google::protobuf::int64 value) {
  
  compute_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.compute_time)
}

// int64 memory_time = 7;
void OpPerformance::clear_memory_time() {
  memory_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpPerformance::memory_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.memory_time)
  return memory_time_;
}
void OpPerformance::set_memory_time(::google::protobuf::int64 value) {
  
  memory_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.memory_time)
}

// double compute_efficiency = 4;
void OpPerformance::clear_compute_efficiency() {
  compute_efficiency_ = 0;
}
double OpPerformance::compute_efficiency() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.compute_efficiency)
  return compute_efficiency_;
}
void OpPerformance::set_compute_efficiency(double value) {
  
  compute_efficiency_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.compute_efficiency)
}

// double memory_efficiency = 8;
void OpPerformance::clear_memory_efficiency() {
  memory_efficiency_ = 0;
}
double OpPerformance::memory_efficiency() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.memory_efficiency)
  return memory_efficiency_;
}
void OpPerformance::set_memory_efficiency(double value) {
  
  memory_efficiency_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.OpPerformance.memory_efficiency)
}

// .tensorflow.NormalDistribution execution_time_normal = 10;
bool OpPerformance::has_execution_time_normal() const {
  return execution_time_case() == kExecutionTimeNormal;
}
void OpPerformance::set_has_execution_time_normal() {
  _oneof_case_[0] = kExecutionTimeNormal;
}
void OpPerformance::clear_execution_time_normal() {
  if (has_execution_time_normal()) {
    if (GetArenaNoVirtual() == NULL) {
      delete execution_time_.execution_time_normal_;
    }
    clear_has_execution_time();
  }
}
 const ::tensorflow::NormalDistribution& OpPerformance::execution_time_normal() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.execution_time_normal)
  return has_execution_time_normal()
      ? *execution_time_.execution_time_normal_
      : ::tensorflow::NormalDistribution::default_instance();
}
::tensorflow::NormalDistribution* OpPerformance::mutable_execution_time_normal() {
  if (!has_execution_time_normal()) {
    clear_execution_time();
    set_has_execution_time_normal();
    execution_time_.execution_time_normal_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::NormalDistribution >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.execution_time_normal)
  return execution_time_.execution_time_normal_;
}
::tensorflow::NormalDistribution* OpPerformance::release_execution_time_normal() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.execution_time_normal)
  if (has_execution_time_normal()) {
    clear_has_execution_time();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::NormalDistribution* temp = new ::tensorflow::NormalDistribution(*execution_time_.execution_time_normal_);
      execution_time_.execution_time_normal_ = NULL;
      return temp;
    } else {
      ::tensorflow::NormalDistribution* temp = execution_time_.execution_time_normal_;
      execution_time_.execution_time_normal_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpPerformance::set_allocated_execution_time_normal(::tensorflow::NormalDistribution* execution_time_normal) {
  clear_execution_time();
  if (execution_time_normal) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(execution_time_normal) == NULL) {
      GetArenaNoVirtual()->Own(execution_time_normal);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(execution_time_normal)) {
      ::tensorflow::NormalDistribution* new_execution_time_normal = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::NormalDistribution >(
          GetArenaNoVirtual());
      new_execution_time_normal->CopyFrom(*execution_time_normal);
      execution_time_normal = new_execution_time_normal;
    }
    set_has_execution_time_normal();
    execution_time_.execution_time_normal_ = execution_time_normal;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.execution_time_normal)
}
 ::tensorflow::NormalDistribution* OpPerformance::unsafe_arena_release_execution_time_normal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.execution_time_normal)
  if (has_execution_time_normal()) {
    clear_has_execution_time();
    ::tensorflow::NormalDistribution* temp = execution_time_.execution_time_normal_;
    execution_time_.execution_time_normal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpPerformance::unsafe_arena_set_allocated_execution_time_normal(::tensorflow::NormalDistribution* execution_time_normal) {
  clear_execution_time();
  if (execution_time_normal) {
    set_has_execution_time_normal();
    execution_time_.execution_time_normal_ = execution_time_normal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.execution_time_normal)
}

// .tensorflow.LogNormalDistribution execution_time_log_normal = 11;
bool OpPerformance::has_execution_time_log_normal() const {
  return execution_time_case() == kExecutionTimeLogNormal;
}
void OpPerformance::set_has_execution_time_log_normal() {
  _oneof_case_[0] = kExecutionTimeLogNormal;
}
void OpPerformance::clear_execution_time_log_normal() {
  if (has_execution_time_log_normal()) {
    if (GetArenaNoVirtual() == NULL) {
      delete execution_time_.execution_time_log_normal_;
    }
    clear_has_execution_time();
  }
}
 const ::tensorflow::LogNormalDistribution& OpPerformance::execution_time_log_normal() const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.execution_time_log_normal)
  return has_execution_time_log_normal()
      ? *execution_time_.execution_time_log_normal_
      : ::tensorflow::LogNormalDistribution::default_instance();
}
::tensorflow::LogNormalDistribution* OpPerformance::mutable_execution_time_log_normal() {
  if (!has_execution_time_log_normal()) {
    clear_execution_time();
    set_has_execution_time_log_normal();
    execution_time_.execution_time_log_normal_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::LogNormalDistribution >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.execution_time_log_normal)
  return execution_time_.execution_time_log_normal_;
}
::tensorflow::LogNormalDistribution* OpPerformance::release_execution_time_log_normal() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.execution_time_log_normal)
  if (has_execution_time_log_normal()) {
    clear_has_execution_time();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::LogNormalDistribution* temp = new ::tensorflow::LogNormalDistribution(*execution_time_.execution_time_log_normal_);
      execution_time_.execution_time_log_normal_ = NULL;
      return temp;
    } else {
      ::tensorflow::LogNormalDistribution* temp = execution_time_.execution_time_log_normal_;
      execution_time_.execution_time_log_normal_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void OpPerformance::set_allocated_execution_time_log_normal(::tensorflow::LogNormalDistribution* execution_time_log_normal) {
  clear_execution_time();
  if (execution_time_log_normal) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(execution_time_log_normal) == NULL) {
      GetArenaNoVirtual()->Own(execution_time_log_normal);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(execution_time_log_normal)) {
      ::tensorflow::LogNormalDistribution* new_execution_time_log_normal = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::LogNormalDistribution >(
          GetArenaNoVirtual());
      new_execution_time_log_normal->CopyFrom(*execution_time_log_normal);
      execution_time_log_normal = new_execution_time_log_normal;
    }
    set_has_execution_time_log_normal();
    execution_time_.execution_time_log_normal_ = execution_time_log_normal;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.execution_time_log_normal)
}
 ::tensorflow::LogNormalDistribution* OpPerformance::unsafe_arena_release_execution_time_log_normal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.OpPerformance.execution_time_log_normal)
  if (has_execution_time_log_normal()) {
    clear_has_execution_time();
    ::tensorflow::LogNormalDistribution* temp = execution_time_.execution_time_log_normal_;
    execution_time_.execution_time_log_normal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void OpPerformance::unsafe_arena_set_allocated_execution_time_log_normal(::tensorflow::LogNormalDistribution* execution_time_log_normal) {
  clear_execution_time();
  if (execution_time_log_normal) {
    set_has_execution_time_log_normal();
    execution_time_.execution_time_log_normal_ = execution_time_log_normal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.OpPerformance.execution_time_log_normal)
}

// .tensorflow.OpPerformance.OpMemory op_memory = 9;
bool OpPerformance::has_op_memory() const {
  return this != internal_default_instance() && op_memory_ != NULL;
}
void OpPerformance::clear_op_memory() {
  if (GetArenaNoVirtual() == NULL && op_memory_ != NULL) delete op_memory_;
  op_memory_ = NULL;
}
const ::tensorflow::OpPerformance_OpMemory& OpPerformance::op_memory() const {
  const ::tensorflow::OpPerformance_OpMemory* p = op_memory_;
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformance.op_memory)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::OpPerformance_OpMemory*>(
      &::tensorflow::_OpPerformance_OpMemory_default_instance_);
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::mutable_op_memory() {
  
  if (op_memory_ == NULL) {
    _slow_mutable_op_memory();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformance.op_memory)
  return op_memory_;
}
::tensorflow::OpPerformance_OpMemory* OpPerformance::release_op_memory() {
  // @@protoc_insertion_point(field_release:tensorflow.OpPerformance.op_memory)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_op_memory();
  } else {
    ::tensorflow::OpPerformance_OpMemory* temp = op_memory_;
    op_memory_ = NULL;
    return temp;
  }
}
 void OpPerformance::set_allocated_op_memory(::tensorflow::OpPerformance_OpMemory* op_memory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete op_memory_;
  }
  if (op_memory != NULL) {
    _slow_set_allocated_op_memory(message_arena, &op_memory);
  }
  op_memory_ = op_memory;
  if (op_memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.OpPerformance.op_memory)
}

bool OpPerformance::has_execution_time() const {
  return execution_time_case() != EXECUTION_TIME_NOT_SET;
}
void OpPerformance::clear_has_execution_time() {
  _oneof_case_[0] = EXECUTION_TIME_NOT_SET;
}
OpPerformance::ExecutionTimeCase OpPerformance::execution_time_case() const {
  return OpPerformance::ExecutionTimeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpPerformanceList::kOpPerformanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpPerformanceList::OpPerformanceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.OpPerformanceList)
}
OpPerformanceList::OpPerformanceList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  op_performance_(arena) {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.OpPerformanceList)
}
OpPerformanceList::OpPerformanceList(const OpPerformanceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      op_performance_(from.op_performance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.OpPerformanceList)
}

void OpPerformanceList::SharedCtor() {
  _cached_size_ = 0;
}

OpPerformanceList::~OpPerformanceList() {
  // @@protoc_insertion_point(destructor:tensorflow.OpPerformanceList)
  SharedDtor();
}

void OpPerformanceList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void OpPerformanceList::ArenaDtor(void* object) {
  OpPerformanceList* _this = reinterpret_cast< OpPerformanceList* >(object);
  (void)_this;
}
void OpPerformanceList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void OpPerformanceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpPerformanceList::descriptor() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpPerformanceList& OpPerformanceList::default_instance() {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpPerformanceList* OpPerformanceList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<OpPerformanceList>(arena);
}

void OpPerformanceList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.OpPerformanceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_performance_.Clear();
  _internal_metadata_.Clear();
}

bool OpPerformanceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.OpPerformanceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.OpPerformance op_performance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.OpPerformanceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.OpPerformanceList)
  return false;
#undef DO_
}

void OpPerformanceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.OpPerformanceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.OpPerformance op_performance = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_performance_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->op_performance(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.OpPerformanceList)
}

::google::protobuf::uint8* OpPerformanceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.OpPerformanceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.OpPerformance op_performance = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->op_performance_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->op_performance(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.OpPerformanceList)
  return target;
}

size_t OpPerformanceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.OpPerformanceList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.OpPerformance op_performance = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->op_performance_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_performance(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpPerformanceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.OpPerformanceList)
  GOOGLE_DCHECK_NE(&from, this);
  const OpPerformanceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpPerformanceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.OpPerformanceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.OpPerformanceList)
    MergeFrom(*source);
  }
}

void OpPerformanceList::MergeFrom(const OpPerformanceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.OpPerformanceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  op_performance_.MergeFrom(from.op_performance_);
}

void OpPerformanceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.OpPerformanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpPerformanceList::CopyFrom(const OpPerformanceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.OpPerformanceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpPerformanceList::IsInitialized() const {
  return true;
}

void OpPerformanceList::Swap(OpPerformanceList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    OpPerformanceList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void OpPerformanceList::UnsafeArenaSwap(OpPerformanceList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void OpPerformanceList::InternalSwap(OpPerformanceList* other) {
  using std::swap;
  op_performance_.InternalSwap(&other->op_performance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpPerformanceList::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fgrappler_2fcosts_2fop_5fperformance_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpPerformanceList

// repeated .tensorflow.OpPerformance op_performance = 1;
int OpPerformanceList::op_performance_size() const {
  return op_performance_.size();
}
void OpPerformanceList::clear_op_performance() {
  op_performance_.Clear();
}
const ::tensorflow::OpPerformance& OpPerformanceList::op_performance(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.OpPerformanceList.op_performance)
  return op_performance_.Get(index);
}
::tensorflow::OpPerformance* OpPerformanceList::mutable_op_performance(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.OpPerformanceList.op_performance)
  return op_performance_.Mutable(index);
}
::tensorflow::OpPerformance* OpPerformanceList::add_op_performance() {
  // @@protoc_insertion_point(field_add:tensorflow.OpPerformanceList.op_performance)
  return op_performance_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::OpPerformance >*
OpPerformanceList::mutable_op_performance() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.OpPerformanceList.op_performance)
  return &op_performance_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::OpPerformance >&
OpPerformanceList::op_performance() const {
  // @@protoc_insertion_point(field_list:tensorflow.OpPerformanceList.op_performance)
  return op_performance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
