// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/profiler/tfprof_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {
class CodeDef_TraceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CodeDef_Trace>
     _instance;
} _CodeDef_Trace_default_instance_;
class CodeDefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CodeDef>
     _instance;
} _CodeDef_default_instance_;
class OpLogEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpLogEntry>
     _instance;
} _OpLogEntry_default_instance_;
class OpLogProto_IdToStringEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpLogProto::OpLogProto_IdToStringEntry>
     _instance;
} _OpLogProto_IdToStringEntry_default_instance_;
class OpLogProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OpLogProto>
     _instance;
} _OpLogProto_default_instance_;
class ProfileProto_NodesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileProto::ProfileProto_NodesEntry>
     _instance;
} _ProfileProto_NodesEntry_default_instance_;
class ProfileProto_IdToStringEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileProto::ProfileProto_IdToStringEntry>
     _instance;
} _ProfileProto_IdToStringEntry_default_instance_;
class ProfileProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileProto>
     _instance;
} _ProfileProto_default_instance_;
class ProfileNode_InputsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_InputsEntry>
     _instance;
} _ProfileNode_InputsEntry_default_instance_;
class ProfileNode_InputShapesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_InputShapesEntry>
     _instance;
} _ProfileNode_InputShapesEntry_default_instance_;
class ProfileNode_OutputsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_OutputsEntry>
     _instance;
} _ProfileNode_OutputsEntry_default_instance_;
class ProfileNode_OutputShapesEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_OutputShapesEntry>
     _instance;
} _ProfileNode_OutputShapesEntry_default_instance_;
class ProfileNode_SrcOutputIndexEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_SrcOutputIndexEntry>
     _instance;
} _ProfileNode_SrcOutputIndexEntry_default_instance_;
class ProfileNode_AttrsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_AttrsEntry>
     _instance;
} _ProfileNode_AttrsEntry_default_instance_;
class ProfileNode_ExecsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode::ProfileNode_ExecsEntry>
     _instance;
} _ProfileNode_ExecsEntry_default_instance_;
class ProfileNodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileNode>
     _instance;
} _ProfileNode_default_instance_;
class ExecProfile_AcceleratorExecsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecProfile::ExecProfile_AcceleratorExecsEntry>
     _instance;
} _ExecProfile_AcceleratorExecsEntry_default_instance_;
class ExecProfile_CpuExecsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecProfile::ExecProfile_CpuExecsEntry>
     _instance;
} _ExecProfile_CpuExecsEntry_default_instance_;
class ExecProfileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecProfile>
     _instance;
} _ExecProfile_default_instance_;
class ExecTimeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecTime>
     _instance;
} _ExecTime_default_instance_;
class ExecMemory_OutputMemoryEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecMemory::ExecMemory_OutputMemoryEntry>
     _instance;
} _ExecMemory_OutputMemoryEntry_default_instance_;
class ExecMemoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecMemory>
     _instance;
} _ExecMemory_default_instance_;
class TupleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Tuple>
     _instance;
} _Tuple_default_instance_;
class MemoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Memory>
     _instance;
} _Memory_default_instance_;

namespace protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[24];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, lineno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, function_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, function_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, func_start_line_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef, traces_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, float_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, code_def_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogProto, log_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogProto, id_to_string_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, has_trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, miss_accelerator_stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, id_to_string_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, input_shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, output_shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, src_output_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, op_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, canonical_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, host_device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, float_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, trace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, attrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, execs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, run_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, all_start_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, latest_end_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, accelerator_execs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, cpu_execs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, memory_execs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, allocations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, devices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecTime, times_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, memory_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, host_temp_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, host_persistent_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, accelerator_temp_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, accelerator_persistent_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, requested_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, peak_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, residual_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, output_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, allocator_bytes_in_use_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecMemory, output_memory_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, int64_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, ptr_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CodeDef_Trace)},
  { 13, -1, sizeof(CodeDef)},
  { 19, -1, sizeof(OpLogEntry)},
  { 28, -1, sizeof(OpLogProto)},
  { 35, -1, sizeof(ProfileProto)},
  { 45, -1, sizeof(ProfileNode)},
  { 66, -1, sizeof(ExecProfile)},
  { 79, -1, sizeof(ExecTime)},
  { 85, -1, sizeof(ExecMemory)},
  { 101, -1, sizeof(Tuple)},
  { 107, -1, sizeof(Memory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CodeDef_Trace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CodeDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpLogProto_IdToStringEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OpLogProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileProto_NodesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileProto_IdToStringEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_InputsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_InputShapesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_OutputsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_OutputShapesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_SrcOutputIndexEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_AttrsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_ExecsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecProfile_AcceleratorExecsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecProfile_CpuExecsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecMemory_OutputMemoryEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecMemory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Tuple_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Memory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/profiler/tfprof_log.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[3].reflection = OpLogProto::OpLogProto_IdToStringEntry::CreateReflection(file_level_metadata[3].descriptor, _OpLogProto_IdToStringEntry_default_instance_._instance.get_mutable());
file_level_metadata[5].reflection = ProfileProto::ProfileProto_NodesEntry::CreateReflection(file_level_metadata[5].descriptor, _ProfileProto_NodesEntry_default_instance_._instance.get_mutable());
file_level_metadata[6].reflection = ProfileProto::ProfileProto_IdToStringEntry::CreateReflection(file_level_metadata[6].descriptor, _ProfileProto_IdToStringEntry_default_instance_._instance.get_mutable());
file_level_metadata[8].reflection = ProfileNode::ProfileNode_InputsEntry::CreateReflection(file_level_metadata[8].descriptor, _ProfileNode_InputsEntry_default_instance_._instance.get_mutable());
file_level_metadata[9].reflection = ProfileNode::ProfileNode_InputShapesEntry::CreateReflection(file_level_metadata[9].descriptor, _ProfileNode_InputShapesEntry_default_instance_._instance.get_mutable());
file_level_metadata[10].reflection = ProfileNode::ProfileNode_OutputsEntry::CreateReflection(file_level_metadata[10].descriptor, _ProfileNode_OutputsEntry_default_instance_._instance.get_mutable());
file_level_metadata[11].reflection = ProfileNode::ProfileNode_OutputShapesEntry::CreateReflection(file_level_metadata[11].descriptor, _ProfileNode_OutputShapesEntry_default_instance_._instance.get_mutable());
file_level_metadata[12].reflection = ProfileNode::ProfileNode_SrcOutputIndexEntry::CreateReflection(file_level_metadata[12].descriptor, _ProfileNode_SrcOutputIndexEntry_default_instance_._instance.get_mutable());
file_level_metadata[13].reflection = ProfileNode::ProfileNode_AttrsEntry::CreateReflection(file_level_metadata[13].descriptor, _ProfileNode_AttrsEntry_default_instance_._instance.get_mutable());
file_level_metadata[14].reflection = ProfileNode::ProfileNode_ExecsEntry::CreateReflection(file_level_metadata[14].descriptor, _ProfileNode_ExecsEntry_default_instance_._instance.get_mutable());
file_level_metadata[16].reflection = ExecProfile::ExecProfile_AcceleratorExecsEntry::CreateReflection(file_level_metadata[16].descriptor, _ExecProfile_AcceleratorExecsEntry_default_instance_._instance.get_mutable());
file_level_metadata[17].reflection = ExecProfile::ExecProfile_CpuExecsEntry::CreateReflection(file_level_metadata[17].descriptor, _ExecProfile_CpuExecsEntry_default_instance_._instance.get_mutable());
file_level_metadata[20].reflection = ExecMemory::ExecMemory_OutputMemoryEntry::CreateReflection(file_level_metadata[20].descriptor, _ExecMemory_OutputMemoryEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  _CodeDef_Trace_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CodeDef_Trace_default_instance_);_CodeDef_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CodeDef_default_instance_);_OpLogEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpLogEntry_default_instance_);_OpLogProto_IdToStringEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpLogProto_IdToStringEntry_default_instance_);_OpLogProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OpLogProto_default_instance_);_ProfileProto_NodesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileProto_NodesEntry_default_instance_);_ProfileProto_IdToStringEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileProto_IdToStringEntry_default_instance_);_ProfileProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileProto_default_instance_);_ProfileNode_InputsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_InputsEntry_default_instance_);_ProfileNode_InputShapesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_InputShapesEntry_default_instance_);_ProfileNode_OutputsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_OutputsEntry_default_instance_);_ProfileNode_OutputShapesEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_OutputShapesEntry_default_instance_);_ProfileNode_SrcOutputIndexEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_SrcOutputIndexEntry_default_instance_);_ProfileNode_AttrsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_AttrsEntry_default_instance_);_ProfileNode_ExecsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_ExecsEntry_default_instance_);_ProfileNode_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileNode_default_instance_);_ExecProfile_AcceleratorExecsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecProfile_AcceleratorExecsEntry_default_instance_);_ExecProfile_CpuExecsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecProfile_CpuExecsEntry_default_instance_);_ExecProfile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecProfile_default_instance_);_ExecTime_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecTime_default_instance_);_ExecMemory_OutputMemoryEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecMemory_OutputMemoryEntry_default_instance_);_ExecMemory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecMemory_default_instance_);_Tuple_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Tuple_default_instance_);_Memory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Memory_default_instance_);_OpLogEntry_default_instance_._instance.get_mutable()->code_def_ = const_cast< ::tensorflow::tfprof::CodeDef*>(
      ::tensorflow::tfprof::CodeDef::internal_default_instance());
  _OpLogProto_IdToStringEntry_default_instance_._instance.get_mutable()->set_default_instance(_OpLogProto_IdToStringEntry_default_instance_._instance.get_mutable());
  _OpLogProto_IdToStringEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileProto_NodesEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileProto_NodesEntry_default_instance_._instance.get_mutable());
  _ProfileProto_NodesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileProto_IdToStringEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileProto_IdToStringEntry_default_instance_._instance.get_mutable());
  _ProfileProto_IdToStringEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_InputsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_InputsEntry_default_instance_._instance.get_mutable());
  _ProfileNode_InputsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_InputShapesEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_InputShapesEntry_default_instance_._instance.get_mutable());
  _ProfileNode_InputShapesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_OutputsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_OutputsEntry_default_instance_._instance.get_mutable());
  _ProfileNode_OutputsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_OutputShapesEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_OutputShapesEntry_default_instance_._instance.get_mutable());
  _ProfileNode_OutputShapesEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_SrcOutputIndexEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_SrcOutputIndexEntry_default_instance_._instance.get_mutable());
  _ProfileNode_SrcOutputIndexEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_AttrsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_AttrsEntry_default_instance_._instance.get_mutable());
  _ProfileNode_AttrsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_ExecsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ProfileNode_ExecsEntry_default_instance_._instance.get_mutable());
  _ProfileNode_ExecsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ProfileNode_default_instance_._instance.get_mutable()->trace_ = const_cast< ::tensorflow::tfprof::CodeDef*>(
      ::tensorflow::tfprof::CodeDef::internal_default_instance());
  _ExecProfile_AcceleratorExecsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ExecProfile_AcceleratorExecsEntry_default_instance_._instance.get_mutable());
  _ExecProfile_AcceleratorExecsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ExecProfile_CpuExecsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ExecProfile_CpuExecsEntry_default_instance_._instance.get_mutable());
  _ExecProfile_CpuExecsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ExecMemory_OutputMemoryEntry_default_instance_._instance.get_mutable()->set_default_instance(_ExecMemory_OutputMemoryEntry_default_instance_._instance.get_mutable());
  _ExecMemory_OutputMemoryEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)tensorflow/core/profiler/tfprof_log.pr"
      "oto\022\021tensorflow.tfprof\032*tensorflow/core/"
      "framework/attr_value.proto\032*tensorflow/c"
      "ore/framework/step_stats.proto\"\337\001\n\007CodeD"
      "ef\0220\n\006traces\030\001 \003(\0132 .tensorflow.tfprof.C"
      "odeDef.Trace\032\241\001\n\005Trace\022\020\n\004file\030\001 \001(\tB\002\030\001"
      "\022\017\n\007file_id\030\006 \001(\003\022\016\n\006lineno\030\002 \001(\005\022\024\n\010fun"
      "ction\030\003 \001(\tB\002\030\001\022\023\n\013function_id\030\007 \001(\003\022\020\n\004"
      "line\030\004 \001(\tB\002\030\001\022\017\n\007line_id\030\010 \001(\003\022\027\n\017func_"
      "start_line\030\005 \001(\005\"j\n\nOpLogEntry\022\014\n\004name\030\001"
      " \001(\t\022\021\n\tfloat_ops\030\002 \001(\003\022\r\n\005types\030\003 \003(\t\022,"
      "\n\010code_def\030\004 \001(\0132\032.tensorflow.tfprof.Cod"
      "eDef\"\270\001\n\nOpLogProto\0222\n\013log_entries\030\001 \003(\013"
      "2\035.tensorflow.tfprof.OpLogEntry\022C\n\014id_to"
      "_string\030\002 \003(\0132-.tensorflow.tfprof.OpLogP"
      "roto.IdToStringEntry\0321\n\017IdToStringEntry\022"
      "\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\t:\0028\001\"\324\002\n\014Prof"
      "ileProto\0229\n\005nodes\030\001 \003(\0132*.tensorflow.tfp"
      "rof.ProfileProto.NodesEntry\022\021\n\thas_trace"
      "\030\002 \001(\010\022\037\n\027miss_accelerator_stream\030\005 \001(\010\022"
      "\r\n\005steps\030\003 \003(\003\022E\n\014id_to_string\030\004 \003(\0132/.t"
      "ensorflow.tfprof.ProfileProto.IdToString"
      "Entry\032L\n\nNodesEntry\022\013\n\003key\030\001 \001(\003\022-\n\005valu"
      "e\030\002 \001(\0132\036.tensorflow.tfprof.ProfileNode:"
      "\0028\001\0321\n\017IdToStringEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005v"
      "alue\030\002 \001(\t:\0028\001\"\323\010\n\013ProfileNode\022\014\n\004name\030\001"
      " \001(\t\022\n\n\002op\030\t \001(\t\022\n\n\002id\030\r \001(\003\022:\n\006inputs\030\002"
      " \003(\0132*.tensorflow.tfprof.ProfileNode.Inp"
      "utsEntry\022E\n\014input_shapes\030\020 \003(\0132/.tensorf"
      "low.tfprof.ProfileNode.InputShapesEntry\022"
      "<\n\007outputs\030\003 \003(\0132+.tensorflow.tfprof.Pro"
      "fileNode.OutputsEntry\022G\n\routput_shapes\030\017"
      " \003(\01320.tensorflow.tfprof.ProfileNode.Out"
      "putShapesEntry\022L\n\020src_output_index\030\016 \003(\013"
      "22.tensorflow.tfprof.ProfileNode.SrcOutp"
      "utIndexEntry\022\r\n\005shape\030\004 \003(\003\022\020\n\010op_types\030"
      "\005 \003(\t\022\030\n\020canonical_device\030\006 \001(\t\022\023\n\013host_"
      "device\030\007 \001(\t\022\021\n\tfloat_ops\030\010 \001(\003\022)\n\005trace"
      "\030\n \001(\0132\032.tensorflow.tfprof.CodeDef\0228\n\005at"
      "trs\030\013 \003(\0132).tensorflow.tfprof.ProfileNod"
      "e.AttrsEntry\0228\n\005execs\030\014 \003(\0132).tensorflow"
      ".tfprof.ProfileNode.ExecsEntry\032-\n\013Inputs"
      "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\003:\0028\001\032L\n"
      "\020InputShapesEntry\022\013\n\003key\030\001 \001(\005\022\'\n\005value\030"
      "\002 \001(\0132\030.tensorflow.tfprof.Tuple:\0028\001\032.\n\014O"
      "utputsEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\003:"
      "\0028\001\032M\n\021OutputShapesEntry\022\013\n\003key\030\001 \001(\005\022\'\n"
      "\005value\030\002 \001(\0132\030.tensorflow.tfprof.Tuple:\002"
      "8\001\0325\n\023SrcOutputIndexEntry\022\013\n\003key\030\001 \001(\003\022\r"
      "\n\005value\030\002 \001(\005:\0028\001\032C\n\nAttrsEntry\022\013\n\003key\030\001"
      " \001(\t\022$\n\005value\030\002 \001(\0132\025.tensorflow.AttrVal"
      "ue:\0028\001\032L\n\nExecsEntry\022\013\n\003key\030\001 \001(\003\022-\n\005val"
      "ue\030\002 \001(\0132\036.tensorflow.tfprof.ExecProfile"
      ":\0028\001\"\204\004\n\013ExecProfile\022\021\n\trun_count\030\001 \001(\003\022"
      "\030\n\020all_start_micros\030\002 \001(\003\022\031\n\021latest_end_"
      "micros\030\003 \001(\003\022O\n\021accelerator_execs\030\004 \003(\0132"
      "4.tensorflow.tfprof.ExecProfile.Accelera"
      "torExecsEntry\022\?\n\tcpu_execs\030\005 \003(\0132,.tenso"
      "rflow.tfprof.ExecProfile.CpuExecsEntry\0223"
      "\n\014memory_execs\030\007 \003(\0132\035.tensorflow.tfprof"
      ".ExecMemory\0221\n\013allocations\030\013 \003(\0132\034.tenso"
      "rflow.AllocationRecord\022\017\n\007devices\030\006 \003(\t\032"
      "T\n\025AcceleratorExecsEntry\022\013\n\003key\030\001 \001(\t\022*\n"
      "\005value\030\002 \001(\0132\033.tensorflow.tfprof.ExecTim"
      "e:\0028\001\032L\n\rCpuExecsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005v"
      "alue\030\002 \001(\0132\033.tensorflow.tfprof.ExecTime:"
      "\0028\001\"3\n\010ExecTime\022\'\n\005times\030\001 \003(\0132\030.tensorf"
      "low.tfprof.Tuple\"\264\003\n\nExecMemory\022\025\n\rmemor"
      "y_micros\030\001 \001(\003\022\027\n\017host_temp_bytes\030\002 \001(\003\022"
      "\035\n\025host_persistent_bytes\030\003 \001(\003\022\036\n\026accele"
      "rator_temp_bytes\030\004 \001(\003\022$\n\034accelerator_pe"
      "rsistent_bytes\030\005 \001(\003\022\027\n\017requested_bytes\030"
      "\006 \001(\003\022\022\n\npeak_bytes\030\007 \001(\003\022\026\n\016residual_by"
      "tes\030\010 \001(\003\022\024\n\014output_bytes\030\t \001(\003\022\036\n\026alloc"
      "ator_bytes_in_use\030\n \001(\003\022F\n\routput_memory"
      "\030\013 \003(\0132/.tensorflow.tfprof.ExecMemory.Ou"
      "tputMemoryEntry\032N\n\021OutputMemoryEntry\022\013\n\003"
      "key\030\001 \001(\005\022(\n\005value\030\002 \001(\0132\031.tensorflow.tf"
      "prof.Memory:\0028\001\"\035\n\005Tuple\022\024\n\014int64_values"
      "\030\001 \003(\003\"$\n\006Memory\022\r\n\005bytes\030\001 \001(\003\022\013\n\003ptr\030\002"
      " \001(\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/tfprof_log.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodeDef_Trace::kFileFieldNumber;
const int CodeDef_Trace::kFileIdFieldNumber;
const int CodeDef_Trace::kLinenoFieldNumber;
const int CodeDef_Trace::kFunctionFieldNumber;
const int CodeDef_Trace::kFunctionIdFieldNumber;
const int CodeDef_Trace::kLineFieldNumber;
const int CodeDef_Trace::kLineIdFieldNumber;
const int CodeDef_Trace::kFuncStartLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodeDef_Trace::CodeDef_Trace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.CodeDef.Trace)
}
CodeDef_Trace::CodeDef_Trace(const CodeDef_Trace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.function().size() > 0) {
    function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line().size() > 0) {
    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  ::memcpy(&lineno_, &from.lineno_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_id_) -
    reinterpret_cast<char*>(&lineno_)) + sizeof(line_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.CodeDef.Trace)
}

void CodeDef_Trace::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lineno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_id_) -
      reinterpret_cast<char*>(&lineno_)) + sizeof(line_id_));
  _cached_size_ = 0;
}

CodeDef_Trace::~CodeDef_Trace() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.CodeDef.Trace)
  SharedDtor();
}

void CodeDef_Trace::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CodeDef_Trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeDef_Trace::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CodeDef_Trace& CodeDef_Trace::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

CodeDef_Trace* CodeDef_Trace::New(::google::protobuf::Arena* arena) const {
  CodeDef_Trace* n = new CodeDef_Trace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CodeDef_Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.CodeDef.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lineno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_id_) -
      reinterpret_cast<char*>(&lineno_)) + sizeof(line_id_));
  _internal_metadata_.Clear();
}

bool CodeDef_Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.CodeDef.Trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.CodeDef.Trace.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lineno = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string function = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function().data(), static_cast<int>(this->function().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.CodeDef.Trace.function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string line = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line().data(), static_cast<int>(this->line().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.CodeDef.Trace.line"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 func_start_line = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_start_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 file_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 function_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &function_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.CodeDef.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.CodeDef.Trace)
  return false;
#undef DO_
}

void CodeDef_Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.CodeDef.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1 [deprecated = true];
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // int32 lineno = 2;
  if (this->lineno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lineno(), output);
  }

  // string function = 3 [deprecated = true];
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), static_cast<int>(this->function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  // string line = 4 [deprecated = true];
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), static_cast<int>(this->line().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->line(), output);
  }

  // int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->func_start_line(), output);
  }

  // int64 file_id = 6;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->file_id(), output);
  }

  // int64 function_id = 7;
  if (this->function_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->function_id(), output);
  }

  // int64 line_id = 8;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->line_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.CodeDef.Trace)
}

::google::protobuf::uint8* CodeDef_Trace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.CodeDef.Trace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1 [deprecated = true];
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // int32 lineno = 2;
  if (this->lineno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lineno(), target);
  }

  // string function = 3 [deprecated = true];
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), static_cast<int>(this->function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  // string line = 4 [deprecated = true];
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), static_cast<int>(this->line().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line(), target);
  }

  // int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->func_start_line(), target);
  }

  // int64 file_id = 6;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->file_id(), target);
  }

  // int64 function_id = 7;
  if (this->function_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->function_id(), target);
  }

  // int64 line_id = 8;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->line_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.CodeDef.Trace)
  return target;
}

size_t CodeDef_Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.CodeDef.Trace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file = 1 [deprecated = true];
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string function = 3 [deprecated = true];
  if (this->function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());
  }

  // string line = 4 [deprecated = true];
  if (this->line().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line());
  }

  // int32 lineno = 2;
  if (this->lineno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lineno());
  }

  // int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_start_line());
  }

  // int64 file_id = 6;
  if (this->file_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_id());
  }

  // int64 function_id = 7;
  if (this->function_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->function_id());
  }

  // int64 line_id = 8;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeDef_Trace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.CodeDef.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeDef_Trace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CodeDef_Trace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.CodeDef.Trace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.CodeDef.Trace)
    MergeFrom(*source);
  }
}

void CodeDef_Trace::MergeFrom(const CodeDef_Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.CodeDef.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.function().size() > 0) {

    function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  if (from.line().size() > 0) {

    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  if (from.lineno() != 0) {
    set_lineno(from.lineno());
  }
  if (from.func_start_line() != 0) {
    set_func_start_line(from.func_start_line());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.function_id() != 0) {
    set_function_id(from.function_id());
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
}

void CodeDef_Trace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeDef_Trace::CopyFrom(const CodeDef_Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeDef_Trace::IsInitialized() const {
  return true;
}

void CodeDef_Trace::Swap(CodeDef_Trace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodeDef_Trace::InternalSwap(CodeDef_Trace* other) {
  using std::swap;
  file_.Swap(&other->file_);
  function_.Swap(&other->function_);
  line_.Swap(&other->line_);
  swap(lineno_, other->lineno_);
  swap(func_start_line_, other->func_start_line_);
  swap(file_id_, other->file_id_);
  swap(function_id_, other->function_id_);
  swap(line_id_, other->line_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CodeDef_Trace::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CodeDef_Trace

// string file = 1 [deprecated = true];
void CodeDef_Trace::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CodeDef_Trace::file() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.file)
  return file_.GetNoArena();
}
void CodeDef_Trace::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.file)
}
#if LANG_CXX11
void CodeDef_Trace::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.CodeDef.Trace.file)
}
#endif
void CodeDef_Trace::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.CodeDef.Trace.file)
}
void CodeDef_Trace::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.CodeDef.Trace.file)
}
::std::string* CodeDef_Trace::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.Trace.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CodeDef_Trace::release_file() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.CodeDef.Trace.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.CodeDef.Trace.file)
}

// int64 file_id = 6;
void CodeDef_Trace::clear_file_id() {
  file_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CodeDef_Trace::file_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.file_id)
  return file_id_;
}
void CodeDef_Trace::set_file_id(::google::protobuf::int64 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.file_id)
}

// int32 lineno = 2;
void CodeDef_Trace::clear_lineno() {
  lineno_ = 0;
}
::google::protobuf::int32 CodeDef_Trace::lineno() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.lineno)
  return lineno_;
}
void CodeDef_Trace::set_lineno(::google::protobuf::int32 value) {
  
  lineno_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.lineno)
}

// string function = 3 [deprecated = true];
void CodeDef_Trace::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CodeDef_Trace::function() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.function)
  return function_.GetNoArena();
}
void CodeDef_Trace::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.function)
}
#if LANG_CXX11
void CodeDef_Trace::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.CodeDef.Trace.function)
}
#endif
void CodeDef_Trace::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.CodeDef.Trace.function)
}
void CodeDef_Trace::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.CodeDef.Trace.function)
}
::std::string* CodeDef_Trace::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.Trace.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CodeDef_Trace::release_function() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.CodeDef.Trace.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.CodeDef.Trace.function)
}

// int64 function_id = 7;
void CodeDef_Trace::clear_function_id() {
  function_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CodeDef_Trace::function_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.function_id)
  return function_id_;
}
void CodeDef_Trace::set_function_id(::google::protobuf::int64 value) {
  
  function_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.function_id)
}

// string line = 4 [deprecated = true];
void CodeDef_Trace::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CodeDef_Trace::line() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.line)
  return line_.GetNoArena();
}
void CodeDef_Trace::set_line(const ::std::string& value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.line)
}
#if LANG_CXX11
void CodeDef_Trace::set_line(::std::string&& value) {
  
  line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.CodeDef.Trace.line)
}
#endif
void CodeDef_Trace::set_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.CodeDef.Trace.line)
}
void CodeDef_Trace::set_line(const char* value, size_t size) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.CodeDef.Trace.line)
}
::std::string* CodeDef_Trace::mutable_line() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.Trace.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CodeDef_Trace::release_line() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.CodeDef.Trace.line)
  
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    
  } else {
    
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.CodeDef.Trace.line)
}

// int64 line_id = 8;
void CodeDef_Trace::clear_line_id() {
  line_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CodeDef_Trace::line_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.line_id)
  return line_id_;
}
void CodeDef_Trace::set_line_id(::google::protobuf::int64 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.line_id)
}

// int32 func_start_line = 5;
void CodeDef_Trace::clear_func_start_line() {
  func_start_line_ = 0;
}
::google::protobuf::int32 CodeDef_Trace::func_start_line() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.func_start_line)
  return func_start_line_;
}
void CodeDef_Trace::set_func_start_line(::google::protobuf::int32 value) {
  
  func_start_line_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.func_start_line)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodeDef::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodeDef::CodeDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.CodeDef)
}
CodeDef::CodeDef(const CodeDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traces_(from.traces_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.CodeDef)
}

void CodeDef::SharedCtor() {
  _cached_size_ = 0;
}

CodeDef::~CodeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.CodeDef)
  SharedDtor();
}

void CodeDef::SharedDtor() {
}

void CodeDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeDef::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CodeDef& CodeDef::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

CodeDef* CodeDef::New(::google::protobuf::Arena* arena) const {
  CodeDef* n = new CodeDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CodeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.CodeDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traces_.Clear();
  _internal_metadata_.Clear();
}

bool CodeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.CodeDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.CodeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.CodeDef)
  return false;
#undef DO_
}

void CodeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.CodeDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traces(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.CodeDef)
}

::google::protobuf::uint8* CodeDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.CodeDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traces_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traces(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.CodeDef)
  return target;
}

size_t CodeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.CodeDef)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->traces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traces(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.CodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CodeDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CodeDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.CodeDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.CodeDef)
    MergeFrom(*source);
  }
}

void CodeDef::MergeFrom(const CodeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.CodeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
}

void CodeDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.CodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeDef::CopyFrom(const CodeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.CodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeDef::IsInitialized() const {
  return true;
}

void CodeDef::Swap(CodeDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodeDef::InternalSwap(CodeDef* other) {
  using std::swap;
  traces_.InternalSwap(&other->traces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CodeDef::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CodeDef

// repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
int CodeDef::traces_size() const {
  return traces_.size();
}
void CodeDef::clear_traces() {
  traces_.Clear();
}
const ::tensorflow::tfprof::CodeDef_Trace& CodeDef::traces(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.traces)
  return traces_.Get(index);
}
::tensorflow::tfprof::CodeDef_Trace* CodeDef::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.traces)
  return traces_.Mutable(index);
}
::tensorflow::tfprof::CodeDef_Trace* CodeDef::add_traces() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.CodeDef.traces)
  return traces_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::CodeDef_Trace >*
CodeDef::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.CodeDef.traces)
  return &traces_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::CodeDef_Trace >&
CodeDef::traces() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.CodeDef.traces)
  return traces_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpLogEntry::kNameFieldNumber;
const int OpLogEntry::kFloatOpsFieldNumber;
const int OpLogEntry::kTypesFieldNumber;
const int OpLogEntry::kCodeDefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpLogEntry::OpLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OpLogEntry)
}
OpLogEntry::OpLogEntry(const OpLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      types_(from.types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_code_def()) {
    code_def_ = new ::tensorflow::tfprof::CodeDef(*from.code_def_);
  } else {
    code_def_ = NULL;
  }
  float_ops_ = from.float_ops_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OpLogEntry)
}

void OpLogEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_ops_) -
      reinterpret_cast<char*>(&code_def_)) + sizeof(float_ops_));
  _cached_size_ = 0;
}

OpLogEntry::~OpLogEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OpLogEntry)
  SharedDtor();
}

void OpLogEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete code_def_;
}

void OpLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpLogEntry::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpLogEntry& OpLogEntry::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpLogEntry* OpLogEntry::New(::google::protobuf::Arena* arena) const {
  OpLogEntry* n = new OpLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OpLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && code_def_ != NULL) {
    delete code_def_;
  }
  code_def_ = NULL;
  float_ops_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool OpLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.OpLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OpLogEntry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 float_ops = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->types(this->types_size() - 1).data(),
            static_cast<int>(this->types(this->types_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OpLogEntry.types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.tfprof.CodeDef code_def = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.OpLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.OpLogEntry)
  return false;
#undef DO_
}

void OpLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.OpLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 float_ops = 2;
  if (this->float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->float_ops(), output);
  }

  // repeated string types = 3;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->types(i).data(), static_cast<int>(this->types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->types(i), output);
  }

  // .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->code_def_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.OpLogEntry)
}

::google::protobuf::uint8* OpLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OpLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 float_ops = 2;
  if (this->float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->float_ops(), target);
  }

  // repeated string types = 3;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->types(i).data(), static_cast<int>(this->types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->types(i), target);
  }

  // .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->code_def_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OpLogEntry)
  return target;
}

size_t OpLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OpLogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string types = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->types_size());
  for (int i = 0, n = this->types_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->types(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->code_def_);
  }

  // int64 float_ops = 2;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->float_ops());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OpLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const OpLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OpLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OpLogEntry)
    MergeFrom(*source);
  }
}

void OpLogEntry::MergeFrom(const OpLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OpLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_code_def()) {
    mutable_code_def()->::tensorflow::tfprof::CodeDef::MergeFrom(from.code_def());
  }
  if (from.float_ops() != 0) {
    set_float_ops(from.float_ops());
  }
}

void OpLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OpLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogEntry::CopyFrom(const OpLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OpLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLogEntry::IsInitialized() const {
  return true;
}

void OpLogEntry::Swap(OpLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpLogEntry::InternalSwap(OpLogEntry* other) {
  using std::swap;
  types_.InternalSwap(&other->types_);
  name_.Swap(&other->name_);
  swap(code_def_, other->code_def_);
  swap(float_ops_, other->float_ops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpLogEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpLogEntry

// string name = 1;
void OpLogEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpLogEntry::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.name)
  return name_.GetNoArena();
}
void OpLogEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.name)
}
#if LANG_CXX11
void OpLogEntry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.OpLogEntry.name)
}
#endif
void OpLogEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OpLogEntry.name)
}
void OpLogEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OpLogEntry.name)
}
::std::string* OpLogEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpLogEntry::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OpLogEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpLogEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OpLogEntry.name)
}

// int64 float_ops = 2;
void OpLogEntry::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpLogEntry::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.float_ops)
  return float_ops_;
}
void OpLogEntry::set_float_ops(::google::protobuf::int64 value) {
  
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.float_ops)
}

// repeated string types = 3;
int OpLogEntry::types_size() const {
  return types_.size();
}
void OpLogEntry::clear_types() {
  types_.Clear();
}
const ::std::string& OpLogEntry::types(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.types)
  return types_.Get(index);
}
::std::string* OpLogEntry::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogEntry.types)
  return types_.Mutable(index);
}
void OpLogEntry::set_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.types)
  types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void OpLogEntry::set_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.types)
  types_.Mutable(index)->assign(std::move(value));
}
#endif
void OpLogEntry::set_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OpLogEntry.types)
}
void OpLogEntry::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OpLogEntry.types)
}
::std::string* OpLogEntry::add_types() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OpLogEntry.types)
  return types_.Add();
}
void OpLogEntry::add_types(const ::std::string& value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OpLogEntry.types)
}
#if LANG_CXX11
void OpLogEntry::add_types(::std::string&& value) {
  types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OpLogEntry.types)
}
#endif
void OpLogEntry::add_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OpLogEntry.types)
}
void OpLogEntry::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OpLogEntry.types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OpLogEntry::types() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OpLogEntry.types)
  return types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OpLogEntry::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OpLogEntry.types)
  return &types_;
}

// .tensorflow.tfprof.CodeDef code_def = 4;
bool OpLogEntry::has_code_def() const {
  return this != internal_default_instance() && code_def_ != NULL;
}
void OpLogEntry::clear_code_def() {
  if (GetArenaNoVirtual() == NULL && code_def_ != NULL) delete code_def_;
  code_def_ = NULL;
}
const ::tensorflow::tfprof::CodeDef& OpLogEntry::code_def() const {
  const ::tensorflow::tfprof::CodeDef* p = code_def_;
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.code_def)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::tfprof::CodeDef*>(
      &::tensorflow::tfprof::_CodeDef_default_instance_);
}
::tensorflow::tfprof::CodeDef* OpLogEntry::mutable_code_def() {
  
  if (code_def_ == NULL) {
    code_def_ = new ::tensorflow::tfprof::CodeDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogEntry.code_def)
  return code_def_;
}
::tensorflow::tfprof::CodeDef* OpLogEntry::release_code_def() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OpLogEntry.code_def)
  
  ::tensorflow::tfprof::CodeDef* temp = code_def_;
  code_def_ = NULL;
  return temp;
}
void OpLogEntry::set_allocated_code_def(::tensorflow::tfprof::CodeDef* code_def) {
  delete code_def_;
  code_def_ = code_def;
  if (code_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OpLogEntry.code_def)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

OpLogProto::OpLogProto_IdToStringEntry::OpLogProto_IdToStringEntry() {}
OpLogProto::OpLogProto_IdToStringEntry::OpLogProto_IdToStringEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata OpLogProto::OpLogProto_IdToStringEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[3];
}
void OpLogProto::OpLogProto_IdToStringEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void OpLogProto::OpLogProto_IdToStringEntry::MergeFrom(const OpLogProto_IdToStringEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpLogProto::kLogEntriesFieldNumber;
const int OpLogProto::kIdToStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpLogProto::OpLogProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OpLogProto)
}
OpLogProto::OpLogProto(const OpLogProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      log_entries_(from.log_entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_to_string_.MergeFrom(from.id_to_string_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OpLogProto)
}

void OpLogProto::SharedCtor() {
  _cached_size_ = 0;
}

OpLogProto::~OpLogProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OpLogProto)
  SharedDtor();
}

void OpLogProto::SharedDtor() {
}

void OpLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpLogProto::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpLogProto& OpLogProto::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

OpLogProto* OpLogProto::New(::google::protobuf::Arena* arena) const {
  OpLogProto* n = new OpLogProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpLogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OpLogProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_entries_.Clear();
  id_to_string_.Clear();
  _internal_metadata_.Clear();
}

bool OpLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.OpLogProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, string> id_to_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          OpLogProto_IdToStringEntry::Parser< ::google::protobuf::internal::MapField<
              OpLogProto_IdToStringEntry,
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&id_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OpLogProto.IdToStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.OpLogProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.OpLogProto)
  return false;
#undef DO_
}

void OpLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.OpLogProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_entries(static_cast<int>(i)), output);
  }

  // map<int64, string> id_to_string = 2;
  if (!this->id_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.OpLogProto.IdToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->id_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->id_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OpLogProto_IdToStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(id_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpLogProto_IdToStringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it) {
        entry.reset(id_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.OpLogProto)
}

::google::protobuf::uint8* OpLogProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OpLogProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->log_entries(static_cast<int>(i)), deterministic, target);
  }

  // map<int64, string> id_to_string = 2;
  if (!this->id_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.OpLogProto.IdToStringEntry.value");
      }
    };

    if (deterministic &&
        this->id_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->id_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<OpLogProto_IdToStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(id_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<OpLogProto_IdToStringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it) {
        entry.reset(id_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OpLogProto)
  return target;
}

size_t OpLogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OpLogProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->log_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_entries(static_cast<int>(i)));
    }
  }

  // map<int64, string> id_to_string = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->id_to_string_size());
  {
    ::google::protobuf::scoped_ptr<OpLogProto_IdToStringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->id_to_string().begin();
        it != this->id_to_string().end(); ++it) {
      entry.reset(id_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpLogProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OpLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  const OpLogProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpLogProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OpLogProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OpLogProto)
    MergeFrom(*source);
  }
}

void OpLogProto::MergeFrom(const OpLogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OpLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_entries_.MergeFrom(from.log_entries_);
  id_to_string_.MergeFrom(from.id_to_string_);
}

void OpLogProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OpLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogProto::CopyFrom(const OpLogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OpLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpLogProto::IsInitialized() const {
  return true;
}

void OpLogProto::Swap(OpLogProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpLogProto::InternalSwap(OpLogProto* other) {
  using std::swap;
  log_entries_.InternalSwap(&other->log_entries_);
  id_to_string_.Swap(&other->id_to_string_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpLogProto::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpLogProto

// repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
int OpLogProto::log_entries_size() const {
  return log_entries_.size();
}
void OpLogProto::clear_log_entries() {
  log_entries_.Clear();
}
const ::tensorflow::tfprof::OpLogEntry& OpLogProto::log_entries(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_.Get(index);
}
::tensorflow::tfprof::OpLogEntry* OpLogProto::mutable_log_entries(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_.Mutable(index);
}
::tensorflow::tfprof::OpLogEntry* OpLogProto::add_log_entries() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::OpLogEntry >*
OpLogProto::mutable_log_entries() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OpLogProto.log_entries)
  return &log_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::OpLogEntry >&
OpLogProto::log_entries() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_;
}

// map<int64, string> id_to_string = 2;
int OpLogProto::id_to_string_size() const {
  return id_to_string_.size();
}
void OpLogProto::clear_id_to_string() {
  id_to_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >&
OpLogProto::id_to_string() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.OpLogProto.id_to_string)
  return id_to_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >*
OpLogProto::mutable_id_to_string() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.OpLogProto.id_to_string)
  return id_to_string_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileProto::ProfileProto_NodesEntry::ProfileProto_NodesEntry() {}
ProfileProto::ProfileProto_NodesEntry::ProfileProto_NodesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileProto::ProfileProto_NodesEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[5];
}
void ProfileProto::ProfileProto_NodesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileProto::ProfileProto_NodesEntry::MergeFrom(const ProfileProto_NodesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileProto::ProfileProto_IdToStringEntry::ProfileProto_IdToStringEntry() {}
ProfileProto::ProfileProto_IdToStringEntry::ProfileProto_IdToStringEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileProto::ProfileProto_IdToStringEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[6];
}
void ProfileProto::ProfileProto_IdToStringEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileProto::ProfileProto_IdToStringEntry::MergeFrom(const ProfileProto_IdToStringEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileProto::kNodesFieldNumber;
const int ProfileProto::kHasTraceFieldNumber;
const int ProfileProto::kMissAcceleratorStreamFieldNumber;
const int ProfileProto::kStepsFieldNumber;
const int ProfileProto::kIdToStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileProto::ProfileProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ProfileProto)
}
ProfileProto::ProfileProto(const ProfileProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      steps_(from.steps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
  id_to_string_.MergeFrom(from.id_to_string_);
  ::memcpy(&has_trace_, &from.has_trace_,
    static_cast<size_t>(reinterpret_cast<char*>(&miss_accelerator_stream_) -
    reinterpret_cast<char*>(&has_trace_)) + sizeof(miss_accelerator_stream_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ProfileProto)
}

void ProfileProto::SharedCtor() {
  ::memset(&has_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_accelerator_stream_) -
      reinterpret_cast<char*>(&has_trace_)) + sizeof(miss_accelerator_stream_));
  _cached_size_ = 0;
}

ProfileProto::~ProfileProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ProfileProto)
  SharedDtor();
}

void ProfileProto::SharedDtor() {
}

void ProfileProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileProto::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileProto& ProfileProto::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileProto* ProfileProto::New(::google::protobuf::Arena* arena) const {
  ProfileProto* n = new ProfileProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ProfileProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  steps_.Clear();
  id_to_string_.Clear();
  ::memset(&has_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_accelerator_stream_) -
      reinterpret_cast<char*>(&has_trace_)) + sizeof(miss_accelerator_stream_));
  _internal_metadata_.Clear();
}

bool ProfileProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ProfileProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          ProfileProto_NodesEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileProto_NodesEntry,
              ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode > > parser(&nodes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_trace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_trace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 steps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_steps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_steps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, string> id_to_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          ProfileProto_IdToStringEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileProto_IdToStringEntry,
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&id_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileProto.IdToStringEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool miss_accelerator_stream = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &miss_accelerator_stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ProfileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ProfileProto)
  return false;
#undef DO_
}

void ProfileProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ProfileProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  if (!this->nodes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->nodes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nodes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nodes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it) {
        entry.reset(nodes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // bool has_trace = 2;
  if (this->has_trace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_trace(), output);
  }

  // repeated int64 steps = 3;
  if (this->steps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _steps_cached_byte_size_));
  }
  for (int i = 0, n = this->steps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->steps(i), output);
  }

  // map<int64, string> id_to_string = 4;
  if (!this->id_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileProto.IdToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->id_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->id_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileProto_IdToStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(id_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileProto_IdToStringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it) {
        entry.reset(id_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool miss_accelerator_stream = 5;
  if (this->miss_accelerator_stream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->miss_accelerator_stream(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ProfileProto)
}

::google::protobuf::uint8* ProfileProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ProfileProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  if (!this->nodes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->nodes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nodes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nodes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it) {
        entry.reset(nodes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // bool has_trace = 2;
  if (this->has_trace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_trace(), target);
  }

  // repeated int64 steps = 3;
  if (this->steps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _steps_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->steps_, target);
  }

  // map<int64, string> id_to_string = 4;
  if (!this->id_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileProto.IdToStringEntry.value");
      }
    };

    if (deterministic &&
        this->id_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->id_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileProto_IdToStringEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(id_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileProto_IdToStringEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->id_to_string().begin();
          it != this->id_to_string().end(); ++it) {
        entry.reset(id_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool miss_accelerator_stream = 5;
  if (this->miss_accelerator_stream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->miss_accelerator_stream(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ProfileProto)
  return target;
}

size_t ProfileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ProfileProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodes_size());
  {
    ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
        it = this->nodes().begin();
        it != this->nodes().end(); ++it) {
      entry.reset(nodes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 steps = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->steps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _steps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<int64, string> id_to_string = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->id_to_string_size());
  {
    ::google::protobuf::scoped_ptr<ProfileProto_IdToStringEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->id_to_string().begin();
        it != this->id_to_string().end(); ++it) {
      entry.reset(id_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bool has_trace = 2;
  if (this->has_trace() != 0) {
    total_size += 1 + 1;
  }

  // bool miss_accelerator_stream = 5;
  if (this->miss_accelerator_stream() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ProfileProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ProfileProto)
    MergeFrom(*source);
  }
}

void ProfileProto::MergeFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  steps_.MergeFrom(from.steps_);
  id_to_string_.MergeFrom(from.id_to_string_);
  if (from.has_trace() != 0) {
    set_has_trace(from.has_trace());
  }
  if (from.miss_accelerator_stream() != 0) {
    set_miss_accelerator_stream(from.miss_accelerator_stream());
  }
}

void ProfileProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileProto::CopyFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileProto::IsInitialized() const {
  return true;
}

void ProfileProto::Swap(ProfileProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileProto::InternalSwap(ProfileProto* other) {
  using std::swap;
  nodes_.Swap(&other->nodes_);
  steps_.InternalSwap(&other->steps_);
  id_to_string_.Swap(&other->id_to_string_);
  swap(has_trace_, other->has_trace_);
  swap(miss_accelerator_stream_, other->miss_accelerator_stream_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileProto::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileProto

// map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
int ProfileProto::nodes_size() const {
  return nodes_.size();
}
void ProfileProto::clear_nodes() {
  nodes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >&
ProfileProto::nodes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileProto.nodes)
  return nodes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >*
ProfileProto::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileProto.nodes)
  return nodes_.MutableMap();
}

// bool has_trace = 2;
void ProfileProto::clear_has_trace() {
  has_trace_ = false;
}
bool ProfileProto::has_trace() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileProto.has_trace)
  return has_trace_;
}
void ProfileProto::set_has_trace(bool value) {
  
  has_trace_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileProto.has_trace)
}

// bool miss_accelerator_stream = 5;
void ProfileProto::clear_miss_accelerator_stream() {
  miss_accelerator_stream_ = false;
}
bool ProfileProto::miss_accelerator_stream() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileProto.miss_accelerator_stream)
  return miss_accelerator_stream_;
}
void ProfileProto::set_miss_accelerator_stream(bool value) {
  
  miss_accelerator_stream_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileProto.miss_accelerator_stream)
}

// repeated int64 steps = 3;
int ProfileProto::steps_size() const {
  return steps_.size();
}
void ProfileProto::clear_steps() {
  steps_.Clear();
}
::google::protobuf::int64 ProfileProto::steps(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileProto.steps)
  return steps_.Get(index);
}
void ProfileProto::set_steps(int index, ::google::protobuf::int64 value) {
  steps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileProto.steps)
}
void ProfileProto::add_steps(::google::protobuf::int64 value) {
  steps_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileProto.steps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ProfileProto::steps() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ProfileProto.steps)
  return steps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ProfileProto::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ProfileProto.steps)
  return &steps_;
}

// map<int64, string> id_to_string = 4;
int ProfileProto::id_to_string_size() const {
  return id_to_string_.size();
}
void ProfileProto::clear_id_to_string() {
  id_to_string_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >&
ProfileProto::id_to_string() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileProto.id_to_string)
  return id_to_string_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >*
ProfileProto::mutable_id_to_string() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileProto.id_to_string)
  return id_to_string_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_InputsEntry::ProfileNode_InputsEntry() {}
ProfileNode::ProfileNode_InputsEntry::ProfileNode_InputsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_InputsEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[8];
}
void ProfileNode::ProfileNode_InputsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_InputsEntry::MergeFrom(const ProfileNode_InputsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_InputShapesEntry::ProfileNode_InputShapesEntry() {}
ProfileNode::ProfileNode_InputShapesEntry::ProfileNode_InputShapesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_InputShapesEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[9];
}
void ProfileNode::ProfileNode_InputShapesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_InputShapesEntry::MergeFrom(const ProfileNode_InputShapesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_OutputsEntry::ProfileNode_OutputsEntry() {}
ProfileNode::ProfileNode_OutputsEntry::ProfileNode_OutputsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_OutputsEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[10];
}
void ProfileNode::ProfileNode_OutputsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_OutputsEntry::MergeFrom(const ProfileNode_OutputsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_OutputShapesEntry::ProfileNode_OutputShapesEntry() {}
ProfileNode::ProfileNode_OutputShapesEntry::ProfileNode_OutputShapesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_OutputShapesEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[11];
}
void ProfileNode::ProfileNode_OutputShapesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_OutputShapesEntry::MergeFrom(const ProfileNode_OutputShapesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_SrcOutputIndexEntry::ProfileNode_SrcOutputIndexEntry() {}
ProfileNode::ProfileNode_SrcOutputIndexEntry::ProfileNode_SrcOutputIndexEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_SrcOutputIndexEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[12];
}
void ProfileNode::ProfileNode_SrcOutputIndexEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_SrcOutputIndexEntry::MergeFrom(const ProfileNode_SrcOutputIndexEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_AttrsEntry::ProfileNode_AttrsEntry() {}
ProfileNode::ProfileNode_AttrsEntry::ProfileNode_AttrsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_AttrsEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[13];
}
void ProfileNode::ProfileNode_AttrsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_AttrsEntry::MergeFrom(const ProfileNode_AttrsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ProfileNode::ProfileNode_ExecsEntry::ProfileNode_ExecsEntry() {}
ProfileNode::ProfileNode_ExecsEntry::ProfileNode_ExecsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ProfileNode::ProfileNode_ExecsEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[14];
}
void ProfileNode::ProfileNode_ExecsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ProfileNode::ProfileNode_ExecsEntry::MergeFrom(const ProfileNode_ExecsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileNode::kNameFieldNumber;
const int ProfileNode::kOpFieldNumber;
const int ProfileNode::kIdFieldNumber;
const int ProfileNode::kInputsFieldNumber;
const int ProfileNode::kInputShapesFieldNumber;
const int ProfileNode::kOutputsFieldNumber;
const int ProfileNode::kOutputShapesFieldNumber;
const int ProfileNode::kSrcOutputIndexFieldNumber;
const int ProfileNode::kShapeFieldNumber;
const int ProfileNode::kOpTypesFieldNumber;
const int ProfileNode::kCanonicalDeviceFieldNumber;
const int ProfileNode::kHostDeviceFieldNumber;
const int ProfileNode::kFloatOpsFieldNumber;
const int ProfileNode::kTraceFieldNumber;
const int ProfileNode::kAttrsFieldNumber;
const int ProfileNode::kExecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileNode::ProfileNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ProfileNode)
}
ProfileNode::ProfileNode(const ProfileNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      op_types_(from.op_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  attrs_.MergeFrom(from.attrs_);
  execs_.MergeFrom(from.execs_);
  src_output_index_.MergeFrom(from.src_output_index_);
  output_shapes_.MergeFrom(from.output_shapes_);
  input_shapes_.MergeFrom(from.input_shapes_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  canonical_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.canonical_device().size() > 0) {
    canonical_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_device_);
  }
  host_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_device().size() > 0) {
    host_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_);
  }
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.op().size() > 0) {
    op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from.has_trace()) {
    trace_ = new ::tensorflow::tfprof::CodeDef(*from.trace_);
  } else {
    trace_ = NULL;
  }
  ::memcpy(&float_ops_, &from.float_ops_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&float_ops_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ProfileNode)
}

void ProfileNode::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&trace_)) + sizeof(id_));
  _cached_size_ = 0;
}

ProfileNode::~ProfileNode() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ProfileNode)
  SharedDtor();
}

void ProfileNode::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trace_;
}

void ProfileNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileNode::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileNode& ProfileNode::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileNode* ProfileNode::New(::google::protobuf::Arena* arena) const {
  ProfileNode* n = new ProfileNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ProfileNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  shape_.Clear();
  op_types_.Clear();
  attrs_.Clear();
  execs_.Clear();
  src_output_index_.Clear();
  output_shapes_.Clear();
  input_shapes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && trace_ != NULL) {
    delete trace_;
  }
  trace_ = NULL;
  ::memset(&float_ops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&float_ops_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool ProfileNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ProfileNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, int64> inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ProfileNode_InputsEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_InputsEntry,
              ::google::protobuf::int32, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 > > parser(&inputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, int64> outputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          ProfileNode_OutputsEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_OutputsEntry,
              ::google::protobuf::int32, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 > > parser(&outputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string op_types = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_op_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_types(this->op_types_size() - 1).data(),
            static_cast<int>(this->op_types(this->op_types_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.op_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string canonical_device = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canonical_device().data(), static_cast<int>(this->canonical_device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.canonical_device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_device = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_device().data(), static_cast<int>(this->host_device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.host_device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 float_ops = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string op = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op().data(), static_cast<int>(this->op().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.op"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.tfprof.CodeDef trace = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.AttrValue> attrs = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          ProfileNode_AttrsEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_AttrsEntry,
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.AttrsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          ProfileNode_ExecsEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_ExecsEntry,
              ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile > > parser(&execs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, int32> src_output_index = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          ProfileNode_SrcOutputIndexEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_SrcOutputIndexEntry,
              ::google::protobuf::int64, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 > > parser(&src_output_index_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          ProfileNode_OutputShapesEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_OutputShapesEntry,
              ::google::protobuf::int32, ::tensorflow::tfprof::Tuple,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple > > parser(&output_shapes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          ProfileNode_InputShapesEntry::Parser< ::google::protobuf::internal::MapField<
              ProfileNode_InputShapesEntry,
              ::google::protobuf::int32, ::tensorflow::tfprof::Tuple,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple > > parser(&input_shapes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ProfileNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ProfileNode)
  return false;
#undef DO_
}

void ProfileNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ProfileNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<int32, int64> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // map<int32, int64> outputs = 3;
  if (!this->outputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->outputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->outputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(outputs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        entry.reset(outputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // repeated int64 shape = 4;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _shape_cached_byte_size_));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // repeated string op_types = 5;
  for (int i = 0, n = this->op_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_types(i).data(), static_cast<int>(this->op_types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->op_types(i), output);
  }

  // string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_device().data(), static_cast<int>(this->canonical_device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.canonical_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->canonical_device(), output);
  }

  // string host_device = 7;
  if (this->host_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_device().data(), static_cast<int>(this->host_device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.host_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->host_device(), output);
  }

  // int64 float_ops = 8;
  if (this->float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->float_ops(), output);
  }

  // string op = 9;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->op(), output);
  }

  // .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->trace_, output);
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileNode.AttrsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  if (!this->execs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->execs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(execs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it) {
        entry.reset(execs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    }
  }

  // int64 id = 13;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->id(), output);
  }

  // map<int64, int32> src_output_index = 14;
  if (!this->src_output_index().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->src_output_index().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->src_output_index().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(src_output_index_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it) {
        entry.reset(src_output_index_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  if (!this->output_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->output_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_shapes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it) {
        entry.reset(output_shapes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  if (!this->input_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->input_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->input_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(input_shapes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it) {
        entry.reset(input_shapes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ProfileNode)
}

::google::protobuf::uint8* ProfileNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ProfileNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<int32, int64> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int64> outputs = 3;
  if (!this->outputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->outputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->outputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(outputs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        entry.reset(outputs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // repeated int64 shape = 4;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _shape_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape_, target);
  }

  // repeated string op_types = 5;
  for (int i = 0, n = this->op_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_types(i).data(), static_cast<int>(this->op_types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op_types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->op_types(i), target);
  }

  // string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_device().data(), static_cast<int>(this->canonical_device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.canonical_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->canonical_device(), target);
  }

  // string host_device = 7;
  if (this->host_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_device().data(), static_cast<int>(this->host_device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.host_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->host_device(), target);
  }

  // int64 float_ops = 8;
  if (this->float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->float_ops(), target);
  }

  // string op = 9;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->op(), target);
  }

  // .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->trace_, deterministic, target);
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileNode.AttrsEntry.key");
      }
    };

    if (deterministic &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  if (!this->execs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->execs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(execs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it) {
        entry.reset(execs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    }
  }

  // int64 id = 13;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->id(), target);
  }

  // map<int64, int32> src_output_index = 14;
  if (!this->src_output_index().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->src_output_index().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->src_output_index().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(src_output_index_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it) {
        entry.reset(src_output_index_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  if (!this->output_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->output_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_shapes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it) {
        entry.reset(output_shapes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  if (!this->input_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->input_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->input_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(input_shapes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it) {
        entry.reset(input_shapes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ProfileNode)
  return target;
}

size_t ProfileNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ProfileNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, int64> inputs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->inputs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
        it = this->inputs().begin();
        it != this->inputs().end(); ++it) {
      entry.reset(inputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int64> outputs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->outputs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
        it = this->outputs().begin();
        it != this->outputs().end(); ++it) {
      entry.reset(outputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 shape = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string op_types = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->op_types_size());
  for (int i = 0, n = this->op_types_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->op_types(i));
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->attrs().begin();
        it != this->attrs().end(); ++it) {
      entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->execs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
        it = this->execs().begin();
        it != this->execs().end(); ++it) {
      entry.reset(execs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, int32> src_output_index = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->src_output_index_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
        it = this->src_output_index().begin();
        it != this->src_output_index().end(); ++it) {
      entry.reset(src_output_index_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_shapes_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
        it = this->output_shapes().begin();
        it != this->output_shapes().end(); ++it) {
      entry.reset(output_shapes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->input_shapes_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
        it = this->input_shapes().begin();
        it != this->input_shapes().end(); ++it) {
      entry.reset(input_shapes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canonical_device());
  }

  // string host_device = 7;
  if (this->host_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_device());
  }

  // string op = 9;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op());
  }

  // .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trace_);
  }

  // int64 float_ops = 8;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->float_ops());
  }

  // int64 id = 13;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ProfileNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ProfileNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ProfileNode)
    MergeFrom(*source);
  }
}

void ProfileNode::MergeFrom(const ProfileNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ProfileNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  shape_.MergeFrom(from.shape_);
  op_types_.MergeFrom(from.op_types_);
  attrs_.MergeFrom(from.attrs_);
  execs_.MergeFrom(from.execs_);
  src_output_index_.MergeFrom(from.src_output_index_);
  output_shapes_.MergeFrom(from.output_shapes_);
  input_shapes_.MergeFrom(from.input_shapes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.canonical_device().size() > 0) {

    canonical_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_device_);
  }
  if (from.host_device().size() > 0) {

    host_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_);
  }
  if (from.op().size() > 0) {

    op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from.has_trace()) {
    mutable_trace()->::tensorflow::tfprof::CodeDef::MergeFrom(from.trace());
  }
  if (from.float_ops() != 0) {
    set_float_ops(from.float_ops());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ProfileNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ProfileNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileNode::CopyFrom(const ProfileNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ProfileNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileNode::IsInitialized() const {
  return true;
}

void ProfileNode::Swap(ProfileNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileNode::InternalSwap(ProfileNode* other) {
  using std::swap;
  inputs_.Swap(&other->inputs_);
  outputs_.Swap(&other->outputs_);
  shape_.InternalSwap(&other->shape_);
  op_types_.InternalSwap(&other->op_types_);
  attrs_.Swap(&other->attrs_);
  execs_.Swap(&other->execs_);
  src_output_index_.Swap(&other->src_output_index_);
  output_shapes_.Swap(&other->output_shapes_);
  input_shapes_.Swap(&other->input_shapes_);
  name_.Swap(&other->name_);
  canonical_device_.Swap(&other->canonical_device_);
  host_device_.Swap(&other->host_device_);
  op_.Swap(&other->op_);
  swap(trace_, other->trace_);
  swap(float_ops_, other->float_ops_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileNode::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileNode

// string name = 1;
void ProfileNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.name)
  return name_.GetNoArena();
}
void ProfileNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.name)
}
#if LANG_CXX11
void ProfileNode::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.ProfileNode.name)
}
#endif
void ProfileNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.name)
}
void ProfileNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.name)
}
::std::string* ProfileNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.name)
}

// string op = 9;
void ProfileNode::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.op)
  return op_.GetNoArena();
}
void ProfileNode::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.op)
}
#if LANG_CXX11
void ProfileNode::set_op(::std::string&& value) {
  
  op_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.ProfileNode.op)
}
#endif
void ProfileNode::set_op(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.op)
}
void ProfileNode::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.op)
}
::std::string* ProfileNode::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.op)
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.op)
}

// int64 id = 13;
void ProfileNode::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProfileNode::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.id)
  return id_;
}
void ProfileNode::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.id)
}

// map<int32, int64> inputs = 2;
int ProfileNode::inputs_size() const {
  return inputs_.size();
}
void ProfileNode::clear_inputs() {
  inputs_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >&
ProfileNode::inputs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.inputs)
  return inputs_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >*
ProfileNode::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.inputs)
  return inputs_.MutableMap();
}

// map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
int ProfileNode::input_shapes_size() const {
  return input_shapes_.size();
}
void ProfileNode::clear_input_shapes() {
  input_shapes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >&
ProfileNode::input_shapes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.input_shapes)
  return input_shapes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >*
ProfileNode::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.input_shapes)
  return input_shapes_.MutableMap();
}

// map<int32, int64> outputs = 3;
int ProfileNode::outputs_size() const {
  return outputs_.size();
}
void ProfileNode::clear_outputs() {
  outputs_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >&
ProfileNode::outputs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.outputs)
  return outputs_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >*
ProfileNode::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.outputs)
  return outputs_.MutableMap();
}

// map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
int ProfileNode::output_shapes_size() const {
  return output_shapes_.size();
}
void ProfileNode::clear_output_shapes() {
  output_shapes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >&
ProfileNode::output_shapes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.output_shapes)
  return output_shapes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >*
ProfileNode::mutable_output_shapes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.output_shapes)
  return output_shapes_.MutableMap();
}

// map<int64, int32> src_output_index = 14;
int ProfileNode::src_output_index_size() const {
  return src_output_index_.size();
}
void ProfileNode::clear_src_output_index() {
  src_output_index_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >&
ProfileNode::src_output_index() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.src_output_index)
  return src_output_index_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >*
ProfileNode::mutable_src_output_index() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.src_output_index)
  return src_output_index_.MutableMap();
}

// repeated int64 shape = 4;
int ProfileNode::shape_size() const {
  return shape_.size();
}
void ProfileNode::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int64 ProfileNode::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.shape)
  return shape_.Get(index);
}
void ProfileNode::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.shape)
}
void ProfileNode::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileNode.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ProfileNode::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ProfileNode.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ProfileNode::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ProfileNode.shape)
  return &shape_;
}

// repeated string op_types = 5;
int ProfileNode::op_types_size() const {
  return op_types_.size();
}
void ProfileNode::clear_op_types() {
  op_types_.Clear();
}
const ::std::string& ProfileNode::op_types(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_.Get(index);
}
::std::string* ProfileNode::mutable_op_types(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_.Mutable(index);
}
void ProfileNode::set_op_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.op_types)
  op_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProfileNode::set_op_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.op_types)
  op_types_.Mutable(index)->assign(std::move(value));
}
#endif
void ProfileNode::set_op_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  op_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.op_types)
}
void ProfileNode::set_op_types(int index, const char* value, size_t size) {
  op_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.op_types)
}
::std::string* ProfileNode::add_op_types() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_.Add();
}
void ProfileNode::add_op_types(const ::std::string& value) {
  op_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileNode.op_types)
}
#if LANG_CXX11
void ProfileNode::add_op_types(::std::string&& value) {
  op_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileNode.op_types)
}
#endif
void ProfileNode::add_op_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  op_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.ProfileNode.op_types)
}
void ProfileNode::add_op_types(const char* value, size_t size) {
  op_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.ProfileNode.op_types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileNode::op_types() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileNode::mutable_op_types() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ProfileNode.op_types)
  return &op_types_;
}

// string canonical_device = 6;
void ProfileNode::clear_canonical_device() {
  canonical_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::canonical_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.canonical_device)
  return canonical_device_.GetNoArena();
}
void ProfileNode::set_canonical_device(const ::std::string& value) {
  
  canonical_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.canonical_device)
}
#if LANG_CXX11
void ProfileNode::set_canonical_device(::std::string&& value) {
  
  canonical_device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.ProfileNode.canonical_device)
}
#endif
void ProfileNode::set_canonical_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canonical_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.canonical_device)
}
void ProfileNode::set_canonical_device(const char* value, size_t size) {
  
  canonical_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.canonical_device)
}
::std::string* ProfileNode::mutable_canonical_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.canonical_device)
  return canonical_device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_canonical_device() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.canonical_device)
  
  return canonical_device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_canonical_device(::std::string* canonical_device) {
  if (canonical_device != NULL) {
    
  } else {
    
  }
  canonical_device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.canonical_device)
}

// string host_device = 7;
void ProfileNode::clear_host_device() {
  host_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::host_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.host_device)
  return host_device_.GetNoArena();
}
void ProfileNode::set_host_device(const ::std::string& value) {
  
  host_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.host_device)
}
#if LANG_CXX11
void ProfileNode::set_host_device(::std::string&& value) {
  
  host_device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.tfprof.ProfileNode.host_device)
}
#endif
void ProfileNode::set_host_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.host_device)
}
void ProfileNode::set_host_device(const char* value, size_t size) {
  
  host_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.host_device)
}
::std::string* ProfileNode::mutable_host_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.host_device)
  return host_device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_host_device() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.host_device)
  
  return host_device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_host_device(::std::string* host_device) {
  if (host_device != NULL) {
    
  } else {
    
  }
  host_device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.host_device)
}

// int64 float_ops = 8;
void ProfileNode::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProfileNode::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.float_ops)
  return float_ops_;
}
void ProfileNode::set_float_ops(::google::protobuf::int64 value) {
  
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.float_ops)
}

// .tensorflow.tfprof.CodeDef trace = 10;
bool ProfileNode::has_trace() const {
  return this != internal_default_instance() && trace_ != NULL;
}
void ProfileNode::clear_trace() {
  if (GetArenaNoVirtual() == NULL && trace_ != NULL) delete trace_;
  trace_ = NULL;
}
const ::tensorflow::tfprof::CodeDef& ProfileNode::trace() const {
  const ::tensorflow::tfprof::CodeDef* p = trace_;
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.trace)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::tfprof::CodeDef*>(
      &::tensorflow::tfprof::_CodeDef_default_instance_);
}
::tensorflow::tfprof::CodeDef* ProfileNode::mutable_trace() {
  
  if (trace_ == NULL) {
    trace_ = new ::tensorflow::tfprof::CodeDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.trace)
  return trace_;
}
::tensorflow::tfprof::CodeDef* ProfileNode::release_trace() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.trace)
  
  ::tensorflow::tfprof::CodeDef* temp = trace_;
  trace_ = NULL;
  return temp;
}
void ProfileNode::set_allocated_trace(::tensorflow::tfprof::CodeDef* trace) {
  delete trace_;
  trace_ = trace;
  if (trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.trace)
}

// map<string, .tensorflow.AttrValue> attrs = 11;
int ProfileNode::attrs_size() const {
  return attrs_.size();
}
void ProfileNode::clear_attrs() {
  attrs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
ProfileNode::attrs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.attrs)
  return attrs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
ProfileNode::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.attrs)
  return attrs_.MutableMap();
}

// map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
int ProfileNode::execs_size() const {
  return execs_.size();
}
void ProfileNode::clear_execs() {
  execs_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >&
ProfileNode::execs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.execs)
  return execs_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >*
ProfileNode::mutable_execs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.execs)
  return execs_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ExecProfile::ExecProfile_AcceleratorExecsEntry::ExecProfile_AcceleratorExecsEntry() {}
ExecProfile::ExecProfile_AcceleratorExecsEntry::ExecProfile_AcceleratorExecsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ExecProfile::ExecProfile_AcceleratorExecsEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[16];
}
void ExecProfile::ExecProfile_AcceleratorExecsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ExecProfile::ExecProfile_AcceleratorExecsEntry::MergeFrom(const ExecProfile_AcceleratorExecsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ExecProfile::ExecProfile_CpuExecsEntry::ExecProfile_CpuExecsEntry() {}
ExecProfile::ExecProfile_CpuExecsEntry::ExecProfile_CpuExecsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ExecProfile::ExecProfile_CpuExecsEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[17];
}
void ExecProfile::ExecProfile_CpuExecsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ExecProfile::ExecProfile_CpuExecsEntry::MergeFrom(const ExecProfile_CpuExecsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecProfile::kRunCountFieldNumber;
const int ExecProfile::kAllStartMicrosFieldNumber;
const int ExecProfile::kLatestEndMicrosFieldNumber;
const int ExecProfile::kAcceleratorExecsFieldNumber;
const int ExecProfile::kCpuExecsFieldNumber;
const int ExecProfile::kMemoryExecsFieldNumber;
const int ExecProfile::kAllocationsFieldNumber;
const int ExecProfile::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecProfile::ExecProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecProfile)
}
ExecProfile::ExecProfile(const ExecProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devices_(from.devices_),
      memory_execs_(from.memory_execs_),
      allocations_(from.allocations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accelerator_execs_.MergeFrom(from.accelerator_execs_);
  cpu_execs_.MergeFrom(from.cpu_execs_);
  ::memcpy(&run_count_, &from.run_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_end_micros_) -
    reinterpret_cast<char*>(&run_count_)) + sizeof(latest_end_micros_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecProfile)
}

void ExecProfile::SharedCtor() {
  ::memset(&run_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_end_micros_) -
      reinterpret_cast<char*>(&run_count_)) + sizeof(latest_end_micros_));
  _cached_size_ = 0;
}

ExecProfile::~ExecProfile() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecProfile)
  SharedDtor();
}

void ExecProfile::SharedDtor() {
}

void ExecProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecProfile::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecProfile& ExecProfile::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecProfile* ExecProfile::New(::google::protobuf::Arena* arena) const {
  ExecProfile* n = new ExecProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accelerator_execs_.Clear();
  cpu_execs_.Clear();
  devices_.Clear();
  memory_execs_.Clear();
  allocations_.Clear();
  ::memset(&run_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_end_micros_) -
      reinterpret_cast<char*>(&run_count_)) + sizeof(latest_end_micros_));
  _internal_metadata_.Clear();
}

bool ExecProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ExecProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 run_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &run_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 all_start_micros = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_start_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_end_micros = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_end_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          ExecProfile_AcceleratorExecsEntry::Parser< ::google::protobuf::internal::MapField<
              ExecProfile_AcceleratorExecsEntry,
              ::std::string, ::tensorflow::tfprof::ExecTime,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime > > parser(&accelerator_execs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          ExecProfile_CpuExecsEntry::Parser< ::google::protobuf::internal::MapField<
              ExecProfile_CpuExecsEntry,
              ::std::string, ::tensorflow::tfprof::ExecTime,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime > > parser(&cpu_execs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string devices = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devices()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devices(this->devices_size() - 1).data(),
            static_cast<int>(this->devices(this->devices_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ExecProfile.devices"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memory_execs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.AllocationRecord allocations = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ExecProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ExecProfile)
  return false;
#undef DO_
}

void ExecProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ExecProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 run_count = 1;
  if (this->run_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->run_count(), output);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->all_start_micros(), output);
  }

  // int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->latest_end_micros(), output);
  }

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  if (!this->accelerator_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->accelerator_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->accelerator_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  if (!this->cpu_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->cpu_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cpu_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string devices = 6;
  for (int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devices(i).data(), static_cast<int>(this->devices(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ExecProfile.devices");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->devices(i), output);
  }

  // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_execs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->memory_execs(static_cast<int>(i)), output);
  }

  // repeated .tensorflow.AllocationRecord allocations = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allocations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->allocations(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ExecProfile)
}

::google::protobuf::uint8* ExecProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 run_count = 1;
  if (this->run_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->run_count(), target);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->all_start_micros(), target);
  }

  // int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->latest_end_micros(), target);
  }

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  if (!this->accelerator_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key");
      }
    };

    if (deterministic &&
        this->accelerator_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->accelerator_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  if (!this->cpu_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key");
      }
    };

    if (deterministic &&
        this->cpu_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cpu_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string devices = 6;
  for (int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devices(i).data(), static_cast<int>(this->devices(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ExecProfile.devices");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->devices(i), target);
  }

  // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_execs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->memory_execs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorflow.AllocationRecord allocations = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allocations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->allocations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecProfile)
  return target;
}

size_t ExecProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accelerator_execs_size());
  {
    ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
        it = this->accelerator_execs().begin();
        it != this->accelerator_execs().end(); ++it) {
      entry.reset(accelerator_execs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cpu_execs_size());
  {
    ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
        it = this->cpu_execs().begin();
        it != this->cpu_execs().end(); ++it) {
      entry.reset(cpu_execs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string devices = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->devices_size());
  for (int i = 0, n = this->devices_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devices(i));
  }

  // repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->memory_execs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_execs(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.AllocationRecord allocations = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->allocations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allocations(static_cast<int>(i)));
    }
  }

  // int64 run_count = 1;
  if (this->run_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->run_count());
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->all_start_micros());
  }

  // int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->latest_end_micros());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecProfile)
    MergeFrom(*source);
  }
}

void ExecProfile::MergeFrom(const ExecProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accelerator_execs_.MergeFrom(from.accelerator_execs_);
  cpu_execs_.MergeFrom(from.cpu_execs_);
  devices_.MergeFrom(from.devices_);
  memory_execs_.MergeFrom(from.memory_execs_);
  allocations_.MergeFrom(from.allocations_);
  if (from.run_count() != 0) {
    set_run_count(from.run_count());
  }
  if (from.all_start_micros() != 0) {
    set_all_start_micros(from.all_start_micros());
  }
  if (from.latest_end_micros() != 0) {
    set_latest_end_micros(from.latest_end_micros());
  }
}

void ExecProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecProfile::CopyFrom(const ExecProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecProfile::IsInitialized() const {
  return true;
}

void ExecProfile::Swap(ExecProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecProfile::InternalSwap(ExecProfile* other) {
  using std::swap;
  accelerator_execs_.Swap(&other->accelerator_execs_);
  cpu_execs_.Swap(&other->cpu_execs_);
  devices_.InternalSwap(&other->devices_);
  memory_execs_.InternalSwap(&other->memory_execs_);
  allocations_.InternalSwap(&other->allocations_);
  swap(run_count_, other->run_count_);
  swap(all_start_micros_, other->all_start_micros_);
  swap(latest_end_micros_, other->latest_end_micros_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecProfile::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecProfile

// int64 run_count = 1;
void ExecProfile::clear_run_count() {
  run_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::run_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.run_count)
  return run_count_;
}
void ExecProfile::set_run_count(::google::protobuf::int64 value) {
  
  run_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.run_count)
}

// int64 all_start_micros = 2;
void ExecProfile::clear_all_start_micros() {
  all_start_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::all_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.all_start_micros)
  return all_start_micros_;
}
void ExecProfile::set_all_start_micros(::google::protobuf::int64 value) {
  
  all_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.all_start_micros)
}

// int64 latest_end_micros = 3;
void ExecProfile::clear_latest_end_micros() {
  latest_end_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::latest_end_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.latest_end_micros)
  return latest_end_micros_;
}
void ExecProfile::set_latest_end_micros(::google::protobuf::int64 value) {
  
  latest_end_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.latest_end_micros)
}

// map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
int ExecProfile::accelerator_execs_size() const {
  return accelerator_execs_.size();
}
void ExecProfile::clear_accelerator_execs() {
  accelerator_execs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >&
ExecProfile::accelerator_execs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ExecProfile.accelerator_execs)
  return accelerator_execs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >*
ExecProfile::mutable_accelerator_execs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ExecProfile.accelerator_execs)
  return accelerator_execs_.MutableMap();
}

// map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
int ExecProfile::cpu_execs_size() const {
  return cpu_execs_.size();
}
void ExecProfile::clear_cpu_execs() {
  cpu_execs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >&
ExecProfile::cpu_execs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ExecProfile.cpu_execs)
  return cpu_execs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >*
ExecProfile::mutable_cpu_execs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ExecProfile.cpu_execs)
  return cpu_execs_.MutableMap();
}

// repeated .tensorflow.tfprof.ExecMemory memory_execs = 7;
int ExecProfile::memory_execs_size() const {
  return memory_execs_.size();
}
void ExecProfile::clear_memory_execs() {
  memory_execs_.Clear();
}
const ::tensorflow::tfprof::ExecMemory& ExecProfile::memory_execs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.memory_execs)
  return memory_execs_.Get(index);
}
::tensorflow::tfprof::ExecMemory* ExecProfile::mutable_memory_execs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ExecProfile.memory_execs)
  return memory_execs_.Mutable(index);
}
::tensorflow::tfprof::ExecMemory* ExecProfile::add_memory_execs() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecProfile.memory_execs)
  return memory_execs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::ExecMemory >*
ExecProfile::mutable_memory_execs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ExecProfile.memory_execs)
  return &memory_execs_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::ExecMemory >&
ExecProfile::memory_execs() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ExecProfile.memory_execs)
  return memory_execs_;
}

// repeated .tensorflow.AllocationRecord allocations = 11;
int ExecProfile::allocations_size() const {
  return allocations_.size();
}
void ExecProfile::clear_allocations() {
  allocations_.Clear();
}
const ::tensorflow::AllocationRecord& ExecProfile::allocations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.allocations)
  return allocations_.Get(index);
}
::tensorflow::AllocationRecord* ExecProfile::mutable_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ExecProfile.allocations)
  return allocations_.Mutable(index);
}
::tensorflow::AllocationRecord* ExecProfile::add_allocations() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecProfile.allocations)
  return allocations_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationRecord >*
ExecProfile::mutable_allocations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ExecProfile.allocations)
  return &allocations_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationRecord >&
ExecProfile::allocations() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ExecProfile.allocations)
  return allocations_;
}

// repeated string devices = 6;
int ExecProfile::devices_size() const {
  return devices_.size();
}
void ExecProfile::clear_devices() {
  devices_.Clear();
}
const ::std::string& ExecProfile::devices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.devices)
  return devices_.Get(index);
}
::std::string* ExecProfile::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ExecProfile.devices)
  return devices_.Mutable(index);
}
void ExecProfile::set_devices(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.devices)
  devices_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ExecProfile::set_devices(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.devices)
  devices_.Mutable(index)->assign(std::move(value));
}
#endif
void ExecProfile::set_devices(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ExecProfile.devices)
}
void ExecProfile::set_devices(int index, const char* value, size_t size) {
  devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ExecProfile.devices)
}
::std::string* ExecProfile::add_devices() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.ExecProfile.devices)
  return devices_.Add();
}
void ExecProfile::add_devices(const ::std::string& value) {
  devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecProfile.devices)
}
#if LANG_CXX11
void ExecProfile::add_devices(::std::string&& value) {
  devices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecProfile.devices)
}
#endif
void ExecProfile::add_devices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.ExecProfile.devices)
}
void ExecProfile::add_devices(const char* value, size_t size) {
  devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.ExecProfile.devices)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecProfile::devices() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ExecProfile.devices)
  return devices_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExecProfile::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ExecProfile.devices)
  return &devices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecTime::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecTime::ExecTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecTime)
}
ExecTime::ExecTime(const ExecTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      times_(from.times_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecTime)
}

void ExecTime::SharedCtor() {
  _cached_size_ = 0;
}

ExecTime::~ExecTime() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecTime)
  SharedDtor();
}

void ExecTime::SharedDtor() {
}

void ExecTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecTime::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecTime& ExecTime::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecTime* ExecTime::New(::google::protobuf::Arena* arena) const {
  ExecTime* n = new ExecTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecTime::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  times_.Clear();
  _internal_metadata_.Clear();
}

bool ExecTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ExecTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.Tuple times = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_times()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ExecTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ExecTime)
  return false;
#undef DO_
}

void ExecTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ExecTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.Tuple times = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->times_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->times(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ExecTime)
}

::google::protobuf::uint8* ExecTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tfprof.Tuple times = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->times_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->times(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecTime)
  return target;
}

size_t ExecTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.tfprof.Tuple times = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->times_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->times(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecTime)
    MergeFrom(*source);
  }
}

void ExecTime::MergeFrom(const ExecTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  times_.MergeFrom(from.times_);
}

void ExecTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecTime::CopyFrom(const ExecTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecTime::IsInitialized() const {
  return true;
}

void ExecTime::Swap(ExecTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecTime::InternalSwap(ExecTime* other) {
  using std::swap;
  times_.InternalSwap(&other->times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecTime::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecTime

// repeated .tensorflow.tfprof.Tuple times = 1;
int ExecTime::times_size() const {
  return times_.size();
}
void ExecTime::clear_times() {
  times_.Clear();
}
const ::tensorflow::tfprof::Tuple& ExecTime::times(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecTime.times)
  return times_.Get(index);
}
::tensorflow::tfprof::Tuple* ExecTime::mutable_times(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ExecTime.times)
  return times_.Mutable(index);
}
::tensorflow::tfprof::Tuple* ExecTime::add_times() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecTime.times)
  return times_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::Tuple >*
ExecTime::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ExecTime.times)
  return &times_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::Tuple >&
ExecTime::times() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ExecTime.times)
  return times_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ExecMemory::ExecMemory_OutputMemoryEntry::ExecMemory_OutputMemoryEntry() {}
ExecMemory::ExecMemory_OutputMemoryEntry::ExecMemory_OutputMemoryEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ExecMemory::ExecMemory_OutputMemoryEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[20];
}
void ExecMemory::ExecMemory_OutputMemoryEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ExecMemory::ExecMemory_OutputMemoryEntry::MergeFrom(const ExecMemory_OutputMemoryEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecMemory::kMemoryMicrosFieldNumber;
const int ExecMemory::kHostTempBytesFieldNumber;
const int ExecMemory::kHostPersistentBytesFieldNumber;
const int ExecMemory::kAcceleratorTempBytesFieldNumber;
const int ExecMemory::kAcceleratorPersistentBytesFieldNumber;
const int ExecMemory::kRequestedBytesFieldNumber;
const int ExecMemory::kPeakBytesFieldNumber;
const int ExecMemory::kResidualBytesFieldNumber;
const int ExecMemory::kOutputBytesFieldNumber;
const int ExecMemory::kAllocatorBytesInUseFieldNumber;
const int ExecMemory::kOutputMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecMemory::ExecMemory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecMemory)
}
ExecMemory::ExecMemory(const ExecMemory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_memory_.MergeFrom(from.output_memory_);
  ::memcpy(&memory_micros_, &from.memory_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocator_bytes_in_use_) -
    reinterpret_cast<char*>(&memory_micros_)) + sizeof(allocator_bytes_in_use_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecMemory)
}

void ExecMemory::SharedCtor() {
  ::memset(&memory_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocator_bytes_in_use_) -
      reinterpret_cast<char*>(&memory_micros_)) + sizeof(allocator_bytes_in_use_));
  _cached_size_ = 0;
}

ExecMemory::~ExecMemory() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecMemory)
  SharedDtor();
}

void ExecMemory::SharedDtor() {
}

void ExecMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecMemory::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecMemory& ExecMemory::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecMemory* ExecMemory::New(::google::protobuf::Arena* arena) const {
  ExecMemory* n = new ExecMemory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecMemory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_memory_.Clear();
  ::memset(&memory_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocator_bytes_in_use_) -
      reinterpret_cast<char*>(&memory_micros_)) + sizeof(allocator_bytes_in_use_));
  _internal_metadata_.Clear();
}

bool ExecMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ExecMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 memory_micros = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 host_temp_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &host_temp_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 host_persistent_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &host_persistent_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 accelerator_temp_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_temp_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 accelerator_persistent_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_persistent_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 requested_bytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 peak_bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 residual_bytes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 output_bytes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allocator_bytes_in_use = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocator_bytes_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          ExecMemory_OutputMemoryEntry::Parser< ::google::protobuf::internal::MapField<
              ExecMemory_OutputMemoryEntry,
              ::google::protobuf::int32, ::tensorflow::tfprof::Memory,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory > > parser(&output_memory_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ExecMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ExecMemory)
  return false;
#undef DO_
}

void ExecMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ExecMemory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 memory_micros = 1;
  if (this->memory_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->memory_micros(), output);
  }

  // int64 host_temp_bytes = 2;
  if (this->host_temp_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->host_temp_bytes(), output);
  }

  // int64 host_persistent_bytes = 3;
  if (this->host_persistent_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->host_persistent_bytes(), output);
  }

  // int64 accelerator_temp_bytes = 4;
  if (this->accelerator_temp_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->accelerator_temp_bytes(), output);
  }

  // int64 accelerator_persistent_bytes = 5;
  if (this->accelerator_persistent_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->accelerator_persistent_bytes(), output);
  }

  // int64 requested_bytes = 6;
  if (this->requested_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->requested_bytes(), output);
  }

  // int64 peak_bytes = 7;
  if (this->peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->peak_bytes(), output);
  }

  // int64 residual_bytes = 8;
  if (this->residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->residual_bytes(), output);
  }

  // int64 output_bytes = 9;
  if (this->output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->output_bytes(), output);
  }

  // int64 allocator_bytes_in_use = 10;
  if (this->allocator_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->allocator_bytes_in_use(), output);
  }

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
  if (!this->output_memory().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->output_memory().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_memory().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecMemory_OutputMemoryEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_memory_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecMemory_OutputMemoryEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it) {
        entry.reset(output_memory_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ExecMemory)
}

::google::protobuf::uint8* ExecMemory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecMemory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 memory_micros = 1;
  if (this->memory_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->memory_micros(), target);
  }

  // int64 host_temp_bytes = 2;
  if (this->host_temp_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->host_temp_bytes(), target);
  }

  // int64 host_persistent_bytes = 3;
  if (this->host_persistent_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->host_persistent_bytes(), target);
  }

  // int64 accelerator_temp_bytes = 4;
  if (this->accelerator_temp_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->accelerator_temp_bytes(), target);
  }

  // int64 accelerator_persistent_bytes = 5;
  if (this->accelerator_persistent_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->accelerator_persistent_bytes(), target);
  }

  // int64 requested_bytes = 6;
  if (this->requested_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->requested_bytes(), target);
  }

  // int64 peak_bytes = 7;
  if (this->peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->peak_bytes(), target);
  }

  // int64 residual_bytes = 8;
  if (this->residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->residual_bytes(), target);
  }

  // int64 output_bytes = 9;
  if (this->output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->output_bytes(), target);
  }

  // int64 allocator_bytes_in_use = 10;
  if (this->allocator_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->allocator_bytes_in_use(), target);
  }

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
  if (!this->output_memory().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->output_memory().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_memory().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecMemory_OutputMemoryEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_memory_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecMemory_OutputMemoryEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it) {
        entry.reset(output_memory_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecMemory)
  return target;
}

size_t ExecMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecMemory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_memory_size());
  {
    ::google::protobuf::scoped_ptr<ExecMemory_OutputMemoryEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
        it = this->output_memory().begin();
        it != this->output_memory().end(); ++it) {
      entry.reset(output_memory_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 memory_micros = 1;
  if (this->memory_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->memory_micros());
  }

  // int64 host_temp_bytes = 2;
  if (this->host_temp_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->host_temp_bytes());
  }

  // int64 host_persistent_bytes = 3;
  if (this->host_persistent_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->host_persistent_bytes());
  }

  // int64 accelerator_temp_bytes = 4;
  if (this->accelerator_temp_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_temp_bytes());
  }

  // int64 accelerator_persistent_bytes = 5;
  if (this->accelerator_persistent_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_persistent_bytes());
  }

  // int64 requested_bytes = 6;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->requested_bytes());
  }

  // int64 peak_bytes = 7;
  if (this->peak_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes());
  }

  // int64 residual_bytes = 8;
  if (this->residual_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->residual_bytes());
  }

  // int64 output_bytes = 9;
  if (this->output_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_bytes());
  }

  // int64 allocator_bytes_in_use = 10;
  if (this->allocator_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->allocator_bytes_in_use());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecMemory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecMemory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecMemory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecMemory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecMemory)
    MergeFrom(*source);
  }
}

void ExecMemory::MergeFrom(const ExecMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_memory_.MergeFrom(from.output_memory_);
  if (from.memory_micros() != 0) {
    set_memory_micros(from.memory_micros());
  }
  if (from.host_temp_bytes() != 0) {
    set_host_temp_bytes(from.host_temp_bytes());
  }
  if (from.host_persistent_bytes() != 0) {
    set_host_persistent_bytes(from.host_persistent_bytes());
  }
  if (from.accelerator_temp_bytes() != 0) {
    set_accelerator_temp_bytes(from.accelerator_temp_bytes());
  }
  if (from.accelerator_persistent_bytes() != 0) {
    set_accelerator_persistent_bytes(from.accelerator_persistent_bytes());
  }
  if (from.requested_bytes() != 0) {
    set_requested_bytes(from.requested_bytes());
  }
  if (from.peak_bytes() != 0) {
    set_peak_bytes(from.peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    set_residual_bytes(from.residual_bytes());
  }
  if (from.output_bytes() != 0) {
    set_output_bytes(from.output_bytes());
  }
  if (from.allocator_bytes_in_use() != 0) {
    set_allocator_bytes_in_use(from.allocator_bytes_in_use());
  }
}

void ExecMemory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecMemory::CopyFrom(const ExecMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecMemory::IsInitialized() const {
  return true;
}

void ExecMemory::Swap(ExecMemory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecMemory::InternalSwap(ExecMemory* other) {
  using std::swap;
  output_memory_.Swap(&other->output_memory_);
  swap(memory_micros_, other->memory_micros_);
  swap(host_temp_bytes_, other->host_temp_bytes_);
  swap(host_persistent_bytes_, other->host_persistent_bytes_);
  swap(accelerator_temp_bytes_, other->accelerator_temp_bytes_);
  swap(accelerator_persistent_bytes_, other->accelerator_persistent_bytes_);
  swap(requested_bytes_, other->requested_bytes_);
  swap(peak_bytes_, other->peak_bytes_);
  swap(residual_bytes_, other->residual_bytes_);
  swap(output_bytes_, other->output_bytes_);
  swap(allocator_bytes_in_use_, other->allocator_bytes_in_use_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecMemory::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecMemory

// int64 memory_micros = 1;
void ExecMemory::clear_memory_micros() {
  memory_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::memory_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.memory_micros)
  return memory_micros_;
}
void ExecMemory::set_memory_micros(::google::protobuf::int64 value) {
  
  memory_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.memory_micros)
}

// int64 host_temp_bytes = 2;
void ExecMemory::clear_host_temp_bytes() {
  host_temp_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::host_temp_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.host_temp_bytes)
  return host_temp_bytes_;
}
void ExecMemory::set_host_temp_bytes(::google::protobuf::int64 value) {
  
  host_temp_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.host_temp_bytes)
}

// int64 host_persistent_bytes = 3;
void ExecMemory::clear_host_persistent_bytes() {
  host_persistent_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::host_persistent_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.host_persistent_bytes)
  return host_persistent_bytes_;
}
void ExecMemory::set_host_persistent_bytes(::google::protobuf::int64 value) {
  
  host_persistent_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.host_persistent_bytes)
}

// int64 accelerator_temp_bytes = 4;
void ExecMemory::clear_accelerator_temp_bytes() {
  accelerator_temp_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::accelerator_temp_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.accelerator_temp_bytes)
  return accelerator_temp_bytes_;
}
void ExecMemory::set_accelerator_temp_bytes(::google::protobuf::int64 value) {
  
  accelerator_temp_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.accelerator_temp_bytes)
}

// int64 accelerator_persistent_bytes = 5;
void ExecMemory::clear_accelerator_persistent_bytes() {
  accelerator_persistent_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::accelerator_persistent_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.accelerator_persistent_bytes)
  return accelerator_persistent_bytes_;
}
void ExecMemory::set_accelerator_persistent_bytes(::google::protobuf::int64 value) {
  
  accelerator_persistent_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.accelerator_persistent_bytes)
}

// int64 requested_bytes = 6;
void ExecMemory::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.requested_bytes)
  return requested_bytes_;
}
void ExecMemory::set_requested_bytes(::google::protobuf::int64 value) {
  
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.requested_bytes)
}

// int64 peak_bytes = 7;
void ExecMemory::clear_peak_bytes() {
  peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.peak_bytes)
  return peak_bytes_;
}
void ExecMemory::set_peak_bytes(::google::protobuf::int64 value) {
  
  peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.peak_bytes)
}

// int64 residual_bytes = 8;
void ExecMemory::clear_residual_bytes() {
  residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.residual_bytes)
  return residual_bytes_;
}
void ExecMemory::set_residual_bytes(::google::protobuf::int64 value) {
  
  residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.residual_bytes)
}

// int64 output_bytes = 9;
void ExecMemory::clear_output_bytes() {
  output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.output_bytes)
  return output_bytes_;
}
void ExecMemory::set_output_bytes(::google::protobuf::int64 value) {
  
  output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.output_bytes)
}

// int64 allocator_bytes_in_use = 10;
void ExecMemory::clear_allocator_bytes_in_use() {
  allocator_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecMemory::allocator_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecMemory.allocator_bytes_in_use)
  return allocator_bytes_in_use_;
}
void ExecMemory::set_allocator_bytes_in_use(::google::protobuf::int64 value) {
  
  allocator_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecMemory.allocator_bytes_in_use)
}

// map<int32, .tensorflow.tfprof.Memory> output_memory = 11;
int ExecMemory::output_memory_size() const {
  return output_memory_.size();
}
void ExecMemory::clear_output_memory() {
  output_memory_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >&
ExecMemory::output_memory() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ExecMemory.output_memory)
  return output_memory_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >*
ExecMemory::mutable_output_memory() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ExecMemory.output_memory)
  return output_memory_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tuple::kInt64ValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tuple::Tuple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.Tuple)
}
Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      int64_values_(from.int64_values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.Tuple)
}

void Tuple::SharedCtor() {
  _cached_size_ = 0;
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.Tuple)
  SharedDtor();
}

void Tuple::SharedDtor() {
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tuple& Tuple::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tuple* Tuple::New(::google::protobuf::Arena* arena) const {
  Tuple* n = new Tuple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.Tuple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int64_values_.Clear();
  _internal_metadata_.Clear();
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.Tuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 int64_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_int64_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.Tuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.Tuple)
  return false;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.Tuple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 int64_values = 1;
  if (this->int64_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _int64_values_cached_byte_size_));
  }
  for (int i = 0, n = this->int64_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_values(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.Tuple)
}

::google::protobuf::uint8* Tuple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.Tuple)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 int64_values = 1;
  if (this->int64_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _int64_values_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->int64_values_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.Tuple)
  return target;
}

size_t Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.Tuple)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 int64_values = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->int64_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  const Tuple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tuple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.Tuple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.Tuple)
    MergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int64_values_.MergeFrom(from.int64_values_);
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuple::IsInitialized() const {
  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tuple::InternalSwap(Tuple* other) {
  using std::swap;
  int64_values_.InternalSwap(&other->int64_values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tuple

// repeated int64 int64_values = 1;
int Tuple::int64_values_size() const {
  return int64_values_.size();
}
void Tuple::clear_int64_values() {
  int64_values_.Clear();
}
::google::protobuf::int64 Tuple::int64_values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.Tuple.int64_values)
  return int64_values_.Get(index);
}
void Tuple::set_int64_values(int index, ::google::protobuf::int64 value) {
  int64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.Tuple.int64_values)
}
void Tuple::add_int64_values(::google::protobuf::int64 value) {
  int64_values_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.Tuple.int64_values)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Tuple::int64_values() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.Tuple.int64_values)
  return int64_values_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Tuple::mutable_int64_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.Tuple.int64_values)
  return &int64_values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kBytesFieldNumber;
const int Memory::kPtrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.Memory)
}
Memory::Memory(const Memory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_, &from.bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptr_) -
    reinterpret_cast<char*>(&bytes_)) + sizeof(ptr_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.Memory)
}

void Memory::SharedCtor() {
  ::memset(&bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptr_) -
      reinterpret_cast<char*>(&bytes_)) + sizeof(ptr_));
  _cached_size_ = 0;
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Memory& Memory::default_instance() {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Memory* Memory::New(::google::protobuf::Arena* arena) const {
  Memory* n = new Memory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptr_) -
      reinterpret_cast<char*>(&bytes_)) + sizeof(ptr_));
  _internal_metadata_.Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ptr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes = 1;
  if (this->bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bytes(), output);
  }

  // uint64 ptr = 2;
  if (this->ptr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ptr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.Memory)
}

::google::protobuf::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bytes = 1;
  if (this->bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bytes(), target);
  }

  // uint64 ptr = 2;
  if (this->ptr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ptr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.Memory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 bytes = 1;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes());
  }

  // uint64 ptr = 2;
  if (this->ptr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes() != 0) {
    set_bytes(from.bytes());
  }
  if (from.ptr() != 0) {
    set_ptr(from.ptr());
  }
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  using std::swap;
  swap(bytes_, other->bytes_);
  swap(ptr_, other->ptr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Memory

// int64 bytes = 1;
void Memory::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Memory::bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.Memory.bytes)
  return bytes_;
}
void Memory::set_bytes(::google::protobuf::int64 value) {
  
  bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.Memory.bytes)
}

// uint64 ptr = 2;
void Memory::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Memory::ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.Memory.ptr)
  return ptr_;
}
void Memory::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.Memory.ptr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
