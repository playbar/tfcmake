// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/kernels/boosted_trees/boosted_trees.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/kernels/boosted_trees/boosted_trees.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace boosted_trees {
class NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Node>
     _instance;
  const ::tensorflow::boosted_trees::Leaf* leaf_;
  const ::tensorflow::boosted_trees::BucketizedSplit* bucketized_split_;
} _Node_default_instance_;
class NodeMetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeMetadata>
     _instance;
} _NodeMetadata_default_instance_;
class LeafDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Leaf>
     _instance;
  const ::tensorflow::boosted_trees::Vector* vector_;
  const ::tensorflow::boosted_trees::SparseVector* sparse_vector_;
} _Leaf_default_instance_;
class VectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vector>
     _instance;
} _Vector_default_instance_;
class SparseVectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SparseVector>
     _instance;
} _SparseVector_default_instance_;
class BucketizedSplitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BucketizedSplit>
     _instance;
} _BucketizedSplit_default_instance_;
class TreeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Tree>
     _instance;
} _Tree_default_instance_;
class TreeMetadata_PostPruneNodeUpdateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TreeMetadata_PostPruneNodeUpdate>
     _instance;
} _TreeMetadata_PostPruneNodeUpdate_default_instance_;
class TreeMetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TreeMetadata>
     _instance;
} _TreeMetadata_default_instance_;
class GrowingMetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GrowingMetadata>
     _instance;
} _GrowingMetadata_default_instance_;
class TreeEnsembleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TreeEnsemble>
     _instance;
} _TreeEnsemble_default_instance_;

namespace protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(NodeDefaultTypeInternal, leaf_),
  offsetof(NodeDefaultTypeInternal, bucketized_split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMetadata, original_leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(LeafDefaultTypeInternal, vector_),
  offsetof(LeafDefaultTypeInternal, sparse_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, scalar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaf, leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseVector, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseVector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizedSplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizedSplit, feature_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizedSplit, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizedSplit, left_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BucketizedSplit, right_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata_PostPruneNodeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata_PostPruneNodeUpdate, new_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata_PostPruneNodeUpdate, logit_change_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata, num_layers_grown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata, is_finalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeMetadata, post_pruned_nodes_meta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowingMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowingMetadata, num_trees_attempted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowingMetadata, num_layers_attempted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowingMetadata, last_layer_node_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowingMetadata, last_layer_node_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeEnsemble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeEnsemble, trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeEnsemble, tree_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeEnsemble, tree_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeEnsemble, growing_metadata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Node)},
  { 9, -1, sizeof(NodeMetadata)},
  { 16, -1, sizeof(Leaf)},
  { 25, -1, sizeof(Vector)},
  { 31, -1, sizeof(SparseVector)},
  { 38, -1, sizeof(BucketizedSplit)},
  { 47, -1, sizeof(Tree)},
  { 53, -1, sizeof(TreeMetadata_PostPruneNodeUpdate)},
  { 60, -1, sizeof(TreeMetadata)},
  { 68, -1, sizeof(GrowingMetadata)},
  { 77, -1, sizeof(TreeEnsemble)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Leaf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SparseVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BucketizedSplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Tree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeMetadata_PostPruneNodeUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GrowingMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TreeEnsemble_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/kernels/boosted_trees/boosted_trees.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Node_default_instance_);_NodeMetadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeMetadata_default_instance_);_Leaf_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Leaf_default_instance_);_Vector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vector_default_instance_);_SparseVector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SparseVector_default_instance_);_BucketizedSplit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BucketizedSplit_default_instance_);_Tree_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Tree_default_instance_);_TreeMetadata_PostPruneNodeUpdate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TreeMetadata_PostPruneNodeUpdate_default_instance_);_TreeMetadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TreeMetadata_default_instance_);_GrowingMetadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GrowingMetadata_default_instance_);_TreeEnsemble_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TreeEnsemble_default_instance_);_Node_default_instance_.leaf_ = const_cast< ::tensorflow::boosted_trees::Leaf*>(
      ::tensorflow::boosted_trees::Leaf::internal_default_instance());
  _Node_default_instance_.bucketized_split_ = const_cast< ::tensorflow::boosted_trees::BucketizedSplit*>(
      ::tensorflow::boosted_trees::BucketizedSplit::internal_default_instance());
  _Node_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::tensorflow::boosted_trees::NodeMetadata*>(
      ::tensorflow::boosted_trees::NodeMetadata::internal_default_instance());
  _NodeMetadata_default_instance_._instance.get_mutable()->original_leaf_ = const_cast< ::tensorflow::boosted_trees::Leaf*>(
      ::tensorflow::boosted_trees::Leaf::internal_default_instance());
  _Leaf_default_instance_.vector_ = const_cast< ::tensorflow::boosted_trees::Vector*>(
      ::tensorflow::boosted_trees::Vector::internal_default_instance());
  _Leaf_default_instance_.sparse_vector_ = const_cast< ::tensorflow::boosted_trees::SparseVector*>(
      ::tensorflow::boosted_trees::SparseVector::internal_default_instance());
  _TreeEnsemble_default_instance_._instance.get_mutable()->growing_metadata_ = const_cast< ::tensorflow::boosted_trees::GrowingMetadata*>(
      ::tensorflow::boosted_trees::GrowingMetadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n9tensorflow/core/kernels/boosted_trees/"
      "boosted_trees.proto\022\030tensorflow.boosted_"
      "trees\"\300\001\n\004Node\022.\n\004leaf\030\001 \001(\0132\036.tensorflo"
      "w.boosted_trees.LeafH\000\022E\n\020bucketized_spl"
      "it\030\002 \001(\0132).tensorflow.boosted_trees.Buck"
      "etizedSplitH\000\0229\n\010metadata\030\211\006 \001(\0132&.tenso"
      "rflow.boosted_trees.NodeMetadataB\006\n\004node"
      "\"S\n\014NodeMetadata\022\014\n\004gain\030\001 \001(\002\0225\n\rorigin"
      "al_leaf\030\002 \001(\0132\036.tensorflow.boosted_trees"
      ".Leaf\"\223\001\n\004Leaf\0222\n\006vector\030\001 \001(\0132 .tensorf"
      "low.boosted_trees.VectorH\000\022\?\n\rsparse_vec"
      "tor\030\002 \001(\0132&.tensorflow.boosted_trees.Spa"
      "rseVectorH\000\022\016\n\006scalar\030\003 \001(\002B\006\n\004leaf\"\027\n\006V"
      "ector\022\r\n\005value\030\001 \003(\002\",\n\014SparseVector\022\r\n\005"
      "index\030\001 \003(\005\022\r\n\005value\030\002 \003(\002\"[\n\017Bucketized"
      "Split\022\022\n\nfeature_id\030\001 \001(\005\022\021\n\tthreshold\030\002"
      " \001(\005\022\017\n\007left_id\030\003 \001(\005\022\020\n\010right_id\030\004 \001(\005\""
      "5\n\004Tree\022-\n\005nodes\030\001 \003(\0132\036.tensorflow.boos"
      "ted_trees.Node\"\334\001\n\014TreeMetadata\022\030\n\020num_l"
      "ayers_grown\030\002 \001(\005\022\024\n\014is_finalized\030\003 \001(\010\022"
      "Z\n\026post_pruned_nodes_meta\030\004 \003(\0132:.tensor"
      "flow.boosted_trees.TreeMetadata.PostPrun"
      "eNodeUpdate\032@\n\023PostPruneNodeUpdate\022\023\n\013ne"
      "w_node_id\030\001 \001(\005\022\024\n\014logit_change\030\002 \001(\002\"\210\001"
      "\n\017GrowingMetadata\022\033\n\023num_trees_attempted"
      "\030\001 \001(\003\022\034\n\024num_layers_attempted\030\002 \001(\003\022\035\n\025"
      "last_layer_node_start\030\003 \001(\005\022\033\n\023last_laye"
      "r_node_end\030\004 \001(\005\"\327\001\n\014TreeEnsemble\022-\n\005tre"
      "es\030\001 \003(\0132\036.tensorflow.boosted_trees.Tree"
      "\022\024\n\014tree_weights\030\002 \003(\002\022=\n\rtree_metadata\030"
      "\003 \003(\0132&.tensorflow.boosted_trees.TreeMet"
      "adata\022C\n\020growing_metadata\030\004 \001(\0132).tensor"
      "flow.boosted_trees.GrowingMetadataB3\n\030or"
      "g.tensorflow.frameworkB\022BoostedTreesProt"
      "osP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/kernels/boosted_trees/boosted_trees.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto


// ===================================================================

void Node::_slow_mutable_metadata() {
  metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::NodeMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::NodeMetadata* Node::_slow_release_metadata() {
  if (metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::NodeMetadata* temp = new ::tensorflow::boosted_trees::NodeMetadata(*metadata_);
    metadata_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::NodeMetadata* Node::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Node.metadata)
  
  ::tensorflow::boosted_trees::NodeMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Node::_slow_set_allocated_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::NodeMetadata** metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*metadata) == NULL) {
      message_arena->Own(*metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*metadata)) {
      ::tensorflow::boosted_trees::NodeMetadata* new_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::NodeMetadata >(
            message_arena);
      new_metadata->CopyFrom(**metadata);
      *metadata = new_metadata;
    }
}
void Node::unsafe_arena_set_allocated_metadata(
    ::tensorflow::boosted_trees::NodeMetadata* metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Node.metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kLeafFieldNumber;
const int Node::kBucketizedSplitFieldNumber;
const int Node::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.Node)
}
Node::Node(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::tensorflow::boosted_trees::NodeMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  clear_has_node();
  switch (from.node_case()) {
    case kLeaf: {
      mutable_leaf()->::tensorflow::boosted_trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kBucketizedSplit: {
      mutable_bucketized_split()->::tensorflow::boosted_trees::BucketizedSplit::MergeFrom(from.bucketized_split());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.Node)
}

void Node::SharedCtor() {
  metadata_ = NULL;
  clear_has_node();
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete metadata_;
  if (has_node()) {
    clear_node();
  }
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Node>(arena);
}

void Node::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.Node)
  switch (node_case()) {
    case kLeaf: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.leaf_;
      }
      break;
    }
    case kBucketizedSplit: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_.bucketized_split_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  clear_node();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.Leaf leaf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bucketized_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.NodeMetadata metadata = 777;
      case 777: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 6218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.Leaf leaf = 1;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *node_.leaf_, output);
  }

  // .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
  if (has_bucketized_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *node_.bucketized_split_, output);
  }

  // .tensorflow.boosted_trees.NodeMetadata metadata = 777;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      777, *this->metadata_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.Leaf leaf = 1;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *node_.leaf_, deterministic, target);
  }

  // .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
  if (has_bucketized_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *node_.bucketized_split_, deterministic, target);
  }

  // .tensorflow.boosted_trees.NodeMetadata metadata = 777;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        777, *this->metadata_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.NodeMetadata metadata = 777;
  if (this->has_metadata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  switch (node_case()) {
    // .tensorflow.boosted_trees.Leaf leaf = 1;
    case kLeaf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.leaf_);
      break;
    }
    // .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
    case kBucketizedSplit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *node_.bucketized_split_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    mutable_metadata()->::tensorflow::boosted_trees::NodeMetadata::MergeFrom(from.metadata());
  }
  switch (from.node_case()) {
    case kLeaf: {
      mutable_leaf()->::tensorflow::boosted_trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kBucketizedSplit: {
      mutable_bucketized_split()->::tensorflow::boosted_trees::BucketizedSplit::MergeFrom(from.bucketized_split());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Node* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Node::UnsafeArenaSwap(Node* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  swap(metadata_, other->metadata_);
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// .tensorflow.boosted_trees.Leaf leaf = 1;
bool Node::has_leaf() const {
  return node_case() == kLeaf;
}
void Node::set_has_leaf() {
  _oneof_case_[0] = kLeaf;
}
void Node::clear_leaf() {
  if (has_leaf()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.leaf_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::Leaf& Node::leaf() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Node.leaf)
  return has_leaf()
      ? *node_.leaf_
      : ::tensorflow::boosted_trees::Leaf::default_instance();
}
::tensorflow::boosted_trees::Leaf* Node::mutable_leaf() {
  if (!has_leaf()) {
    clear_node();
    set_has_leaf();
    node_.leaf_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Leaf >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Node.leaf)
  return node_.leaf_;
}
::tensorflow::boosted_trees::Leaf* Node::release_leaf() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Node.leaf)
  if (has_leaf()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::Leaf* temp = new ::tensorflow::boosted_trees::Leaf(*node_.leaf_);
      node_.leaf_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::Leaf* temp = node_.leaf_;
      node_.leaf_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Node::set_allocated_leaf(::tensorflow::boosted_trees::Leaf* leaf) {
  clear_node();
  if (leaf) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(leaf) == NULL) {
      GetArenaNoVirtual()->Own(leaf);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(leaf)) {
      ::tensorflow::boosted_trees::Leaf* new_leaf = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Leaf >(
          GetArenaNoVirtual());
      new_leaf->CopyFrom(*leaf);
      leaf = new_leaf;
    }
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Node.leaf)
}
 ::tensorflow::boosted_trees::Leaf* Node::unsafe_arena_release_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Node.leaf)
  if (has_leaf()) {
    clear_has_node();
    ::tensorflow::boosted_trees::Leaf* temp = node_.leaf_;
    node_.leaf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Node::unsafe_arena_set_allocated_leaf(::tensorflow::boosted_trees::Leaf* leaf) {
  clear_node();
  if (leaf) {
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Node.leaf)
}

// .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
bool Node::has_bucketized_split() const {
  return node_case() == kBucketizedSplit;
}
void Node::set_has_bucketized_split() {
  _oneof_case_[0] = kBucketizedSplit;
}
void Node::clear_bucketized_split() {
  if (has_bucketized_split()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.bucketized_split_;
    }
    clear_has_node();
  }
}
 const ::tensorflow::boosted_trees::BucketizedSplit& Node::bucketized_split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Node.bucketized_split)
  return has_bucketized_split()
      ? *node_.bucketized_split_
      : ::tensorflow::boosted_trees::BucketizedSplit::default_instance();
}
::tensorflow::boosted_trees::BucketizedSplit* Node::mutable_bucketized_split() {
  if (!has_bucketized_split()) {
    clear_node();
    set_has_bucketized_split();
    node_.bucketized_split_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::BucketizedSplit >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Node.bucketized_split)
  return node_.bucketized_split_;
}
::tensorflow::boosted_trees::BucketizedSplit* Node::release_bucketized_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Node.bucketized_split)
  if (has_bucketized_split()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::BucketizedSplit* temp = new ::tensorflow::boosted_trees::BucketizedSplit(*node_.bucketized_split_);
      node_.bucketized_split_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::BucketizedSplit* temp = node_.bucketized_split_;
      node_.bucketized_split_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Node::set_allocated_bucketized_split(::tensorflow::boosted_trees::BucketizedSplit* bucketized_split) {
  clear_node();
  if (bucketized_split) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(bucketized_split) == NULL) {
      GetArenaNoVirtual()->Own(bucketized_split);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(bucketized_split)) {
      ::tensorflow::boosted_trees::BucketizedSplit* new_bucketized_split = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::BucketizedSplit >(
          GetArenaNoVirtual());
      new_bucketized_split->CopyFrom(*bucketized_split);
      bucketized_split = new_bucketized_split;
    }
    set_has_bucketized_split();
    node_.bucketized_split_ = bucketized_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Node.bucketized_split)
}
 ::tensorflow::boosted_trees::BucketizedSplit* Node::unsafe_arena_release_bucketized_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Node.bucketized_split)
  if (has_bucketized_split()) {
    clear_has_node();
    ::tensorflow::boosted_trees::BucketizedSplit* temp = node_.bucketized_split_;
    node_.bucketized_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Node::unsafe_arena_set_allocated_bucketized_split(::tensorflow::boosted_trees::BucketizedSplit* bucketized_split) {
  clear_node();
  if (bucketized_split) {
    set_has_bucketized_split();
    node_.bucketized_split_ = bucketized_split;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Node.bucketized_split)
}

// .tensorflow.boosted_trees.NodeMetadata metadata = 777;
bool Node::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void Node::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::tensorflow::boosted_trees::NodeMetadata& Node::metadata() const {
  const ::tensorflow::boosted_trees::NodeMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Node.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::NodeMetadata*>(
      &::tensorflow::boosted_trees::_NodeMetadata_default_instance_);
}
::tensorflow::boosted_trees::NodeMetadata* Node::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Node.metadata)
  return metadata_;
}
::tensorflow::boosted_trees::NodeMetadata* Node::release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Node.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::tensorflow::boosted_trees::NodeMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
 void Node::set_allocated_metadata(::tensorflow::boosted_trees::NodeMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Node.metadata)
}

bool Node::has_node() const {
  return node_case() != NODE_NOT_SET;
}
void Node::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
Node::NodeCase Node::node_case() const {
  return Node::NodeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NodeMetadata::_slow_mutable_original_leaf() {
  original_leaf_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Leaf >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::Leaf* NodeMetadata::_slow_release_original_leaf() {
  if (original_leaf_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::Leaf* temp = new ::tensorflow::boosted_trees::Leaf(*original_leaf_);
    original_leaf_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::Leaf* NodeMetadata::unsafe_arena_release_original_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  
  ::tensorflow::boosted_trees::Leaf* temp = original_leaf_;
  original_leaf_ = NULL;
  return temp;
}
void NodeMetadata::_slow_set_allocated_original_leaf(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::Leaf** original_leaf) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*original_leaf) == NULL) {
      message_arena->Own(*original_leaf);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*original_leaf)) {
      ::tensorflow::boosted_trees::Leaf* new_original_leaf = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Leaf >(
            message_arena);
      new_original_leaf->CopyFrom(**original_leaf);
      *original_leaf = new_original_leaf;
    }
}
void NodeMetadata::unsafe_arena_set_allocated_original_leaf(
    ::tensorflow::boosted_trees::Leaf* original_leaf) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_leaf_;
  }
  original_leaf_ = original_leaf;
  if (original_leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.NodeMetadata.original_leaf)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMetadata::kGainFieldNumber;
const int NodeMetadata::kOriginalLeafFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMetadata::NodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.NodeMetadata)
}
NodeMetadata::NodeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.NodeMetadata)
}
NodeMetadata::NodeMetadata(const NodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_original_leaf()) {
    original_leaf_ = new ::tensorflow::boosted_trees::Leaf(*from.original_leaf_);
  } else {
    original_leaf_ = NULL;
  }
  gain_ = from.gain_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.NodeMetadata)
}

void NodeMetadata::SharedCtor() {
  ::memset(&original_leaf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&original_leaf_)) + sizeof(gain_));
  _cached_size_ = 0;
}

NodeMetadata::~NodeMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.NodeMetadata)
  SharedDtor();
}

void NodeMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete original_leaf_;
}

void NodeMetadata::ArenaDtor(void* object) {
  NodeMetadata* _this = reinterpret_cast< NodeMetadata* >(object);
  (void)_this;
}
void NodeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMetadata::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeMetadata& NodeMetadata::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeMetadata* NodeMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeMetadata>(arena);
}

void NodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && original_leaf_ != NULL) {
    delete original_leaf_;
  }
  original_leaf_ = NULL;
  gain_ = 0;
  _internal_metadata_.Clear();
}

bool NodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.NodeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.Leaf original_leaf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.NodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.NodeMetadata)
  return false;
#undef DO_
}

void NodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gain = 1;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gain(), output);
  }

  // .tensorflow.boosted_trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->original_leaf_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.NodeMetadata)
}

::google::protobuf::uint8* NodeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gain = 1;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gain(), target);
  }

  // .tensorflow.boosted_trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->original_leaf_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.NodeMetadata)
  return target;
}

size_t NodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.NodeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.boosted_trees.Leaf original_leaf = 2;
  if (this->has_original_leaf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->original_leaf_);
  }

  // float gain = 1;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.NodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.NodeMetadata)
    MergeFrom(*source);
  }
}

void NodeMetadata::MergeFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_original_leaf()) {
    mutable_original_leaf()->::tensorflow::boosted_trees::Leaf::MergeFrom(from.original_leaf());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
}

void NodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetadata::CopyFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetadata::IsInitialized() const {
  return true;
}

void NodeMetadata::Swap(NodeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NodeMetadata::UnsafeArenaSwap(NodeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeMetadata::InternalSwap(NodeMetadata* other) {
  using std::swap;
  swap(original_leaf_, other->original_leaf_);
  swap(gain_, other->gain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeMetadata

// float gain = 1;
void NodeMetadata::clear_gain() {
  gain_ = 0;
}
float NodeMetadata::gain() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.NodeMetadata.gain)
  return gain_;
}
void NodeMetadata::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.NodeMetadata.gain)
}

// .tensorflow.boosted_trees.Leaf original_leaf = 2;
bool NodeMetadata::has_original_leaf() const {
  return this != internal_default_instance() && original_leaf_ != NULL;
}
void NodeMetadata::clear_original_leaf() {
  if (GetArenaNoVirtual() == NULL && original_leaf_ != NULL) delete original_leaf_;
  original_leaf_ = NULL;
}
const ::tensorflow::boosted_trees::Leaf& NodeMetadata::original_leaf() const {
  const ::tensorflow::boosted_trees::Leaf* p = original_leaf_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::Leaf*>(
      &::tensorflow::boosted_trees::_Leaf_default_instance_);
}
::tensorflow::boosted_trees::Leaf* NodeMetadata::mutable_original_leaf() {
  
  if (original_leaf_ == NULL) {
    _slow_mutable_original_leaf();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  return original_leaf_;
}
::tensorflow::boosted_trees::Leaf* NodeMetadata::release_original_leaf() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_leaf();
  } else {
    ::tensorflow::boosted_trees::Leaf* temp = original_leaf_;
    original_leaf_ = NULL;
    return temp;
  }
}
 void NodeMetadata::set_allocated_original_leaf(::tensorflow::boosted_trees::Leaf* original_leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_leaf_;
  }
  if (original_leaf != NULL) {
    _slow_set_allocated_original_leaf(message_arena, &original_leaf);
  }
  original_leaf_ = original_leaf;
  if (original_leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.NodeMetadata.original_leaf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaf::kVectorFieldNumber;
const int Leaf::kSparseVectorFieldNumber;
const int Leaf::kScalarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaf::Leaf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.Leaf)
}
Leaf::Leaf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.Leaf)
}
Leaf::Leaf(const Leaf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scalar_ = from.scalar_;
  clear_has_leaf();
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::tensorflow::boosted_trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::tensorflow::boosted_trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.Leaf)
}

void Leaf::SharedCtor() {
  scalar_ = 0;
  clear_has_leaf();
  _cached_size_ = 0;
}

Leaf::~Leaf() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.Leaf)
  SharedDtor();
}

void Leaf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (has_leaf()) {
    clear_leaf();
  }
}

void Leaf::ArenaDtor(void* object) {
  Leaf* _this = reinterpret_cast< Leaf* >(object);
  (void)_this;
}
void Leaf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Leaf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaf::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Leaf& Leaf::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

Leaf* Leaf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Leaf>(arena);
}

void Leaf::clear_leaf() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.boosted_trees.Leaf)
  switch (leaf_case()) {
    case kVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.vector_;
      }
      break;
    }
    case kSparseVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.sparse_vector_;
      }
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEAF_NOT_SET;
}


void Leaf::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scalar_ = 0;
  clear_leaf();
  _internal_metadata_.Clear();
}

bool Leaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.Leaf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.boosted_trees.Vector vector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sparse_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scalar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.Leaf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.Leaf)
  return false;
#undef DO_
}

void Leaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.Vector vector = 1;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *leaf_.vector_, output);
  }

  // .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *leaf_.sparse_vector_, output);
  }

  // float scalar = 3;
  if (this->scalar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scalar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.Leaf)
}

::google::protobuf::uint8* Leaf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.boosted_trees.Vector vector = 1;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *leaf_.vector_, deterministic, target);
  }

  // .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *leaf_.sparse_vector_, deterministic, target);
  }

  // float scalar = 3;
  if (this->scalar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scalar(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.Leaf)
  return target;
}

size_t Leaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.Leaf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float scalar = 3;
  if (this->scalar() != 0) {
    total_size += 1 + 4;
  }

  switch (leaf_case()) {
    // .tensorflow.boosted_trees.Vector vector = 1;
    case kVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *leaf_.vector_);
      break;
    }
    // .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
    case kSparseVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *leaf_.sparse_vector_);
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.Leaf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.Leaf)
    MergeFrom(*source);
  }
}

void Leaf::MergeFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scalar() != 0) {
    set_scalar(from.scalar());
  }
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::tensorflow::boosted_trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::tensorflow::boosted_trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
}

void Leaf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaf::CopyFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaf::IsInitialized() const {
  return true;
}

void Leaf::Swap(Leaf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Leaf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Leaf::UnsafeArenaSwap(Leaf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Leaf::InternalSwap(Leaf* other) {
  using std::swap;
  swap(scalar_, other->scalar_);
  swap(leaf_, other->leaf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaf::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leaf

// .tensorflow.boosted_trees.Vector vector = 1;
bool Leaf::has_vector() const {
  return leaf_case() == kVector;
}
void Leaf::set_has_vector() {
  _oneof_case_[0] = kVector;
}
void Leaf::clear_vector() {
  if (has_vector()) {
    if (GetArenaNoVirtual() == NULL) {
      delete leaf_.vector_;
    }
    clear_has_leaf();
  }
}
 const ::tensorflow::boosted_trees::Vector& Leaf::vector() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Leaf.vector)
  return has_vector()
      ? *leaf_.vector_
      : ::tensorflow::boosted_trees::Vector::default_instance();
}
::tensorflow::boosted_trees::Vector* Leaf::mutable_vector() {
  if (!has_vector()) {
    clear_leaf();
    set_has_vector();
    leaf_.vector_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Vector >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Leaf.vector)
  return leaf_.vector_;
}
::tensorflow::boosted_trees::Vector* Leaf::release_vector() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Leaf.vector)
  if (has_vector()) {
    clear_has_leaf();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::Vector* temp = new ::tensorflow::boosted_trees::Vector(*leaf_.vector_);
      leaf_.vector_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::Vector* temp = leaf_.vector_;
      leaf_.vector_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Leaf::set_allocated_vector(::tensorflow::boosted_trees::Vector* vector) {
  clear_leaf();
  if (vector) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(vector) == NULL) {
      GetArenaNoVirtual()->Own(vector);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(vector)) {
      ::tensorflow::boosted_trees::Vector* new_vector = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Vector >(
          GetArenaNoVirtual());
      new_vector->CopyFrom(*vector);
      vector = new_vector;
    }
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Leaf.vector)
}
 ::tensorflow::boosted_trees::Vector* Leaf::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Leaf.vector)
  if (has_vector()) {
    clear_has_leaf();
    ::tensorflow::boosted_trees::Vector* temp = leaf_.vector_;
    leaf_.vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Leaf::unsafe_arena_set_allocated_vector(::tensorflow::boosted_trees::Vector* vector) {
  clear_leaf();
  if (vector) {
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Leaf.vector)
}

// .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
bool Leaf::has_sparse_vector() const {
  return leaf_case() == kSparseVector;
}
void Leaf::set_has_sparse_vector() {
  _oneof_case_[0] = kSparseVector;
}
void Leaf::clear_sparse_vector() {
  if (has_sparse_vector()) {
    if (GetArenaNoVirtual() == NULL) {
      delete leaf_.sparse_vector_;
    }
    clear_has_leaf();
  }
}
 const ::tensorflow::boosted_trees::SparseVector& Leaf::sparse_vector() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Leaf.sparse_vector)
  return has_sparse_vector()
      ? *leaf_.sparse_vector_
      : ::tensorflow::boosted_trees::SparseVector::default_instance();
}
::tensorflow::boosted_trees::SparseVector* Leaf::mutable_sparse_vector() {
  if (!has_sparse_vector()) {
    clear_leaf();
    set_has_sparse_vector();
    leaf_.sparse_vector_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::SparseVector >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Leaf.sparse_vector)
  return leaf_.sparse_vector_;
}
::tensorflow::boosted_trees::SparseVector* Leaf::release_sparse_vector() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Leaf.sparse_vector)
  if (has_sparse_vector()) {
    clear_has_leaf();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::SparseVector* temp = new ::tensorflow::boosted_trees::SparseVector(*leaf_.sparse_vector_);
      leaf_.sparse_vector_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::SparseVector* temp = leaf_.sparse_vector_;
      leaf_.sparse_vector_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Leaf::set_allocated_sparse_vector(::tensorflow::boosted_trees::SparseVector* sparse_vector) {
  clear_leaf();
  if (sparse_vector) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(sparse_vector) == NULL) {
      GetArenaNoVirtual()->Own(sparse_vector);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(sparse_vector)) {
      ::tensorflow::boosted_trees::SparseVector* new_sparse_vector = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::SparseVector >(
          GetArenaNoVirtual());
      new_sparse_vector->CopyFrom(*sparse_vector);
      sparse_vector = new_sparse_vector;
    }
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Leaf.sparse_vector)
}
 ::tensorflow::boosted_trees::SparseVector* Leaf::unsafe_arena_release_sparse_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Leaf.sparse_vector)
  if (has_sparse_vector()) {
    clear_has_leaf();
    ::tensorflow::boosted_trees::SparseVector* temp = leaf_.sparse_vector_;
    leaf_.sparse_vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Leaf::unsafe_arena_set_allocated_sparse_vector(::tensorflow::boosted_trees::SparseVector* sparse_vector) {
  clear_leaf();
  if (sparse_vector) {
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Leaf.sparse_vector)
}

// float scalar = 3;
void Leaf::clear_scalar() {
  scalar_ = 0;
}
float Leaf::scalar() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Leaf.scalar)
  return scalar_;
}
void Leaf::set_scalar(float value) {
  
  scalar_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.Leaf.scalar)
}

bool Leaf::has_leaf() const {
  return leaf_case() != LEAF_NOT_SET;
}
void Leaf::clear_has_leaf() {
  _oneof_case_[0] = LEAF_NOT_SET;
}
Leaf::LeafCase Leaf::leaf_case() const {
  return Leaf::LeafCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.Vector)
}
Vector::Vector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector& Vector::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Vector>(arena);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _value_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _value_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.Vector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vector::UnsafeArenaSwap(Vector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// repeated float value = 1;
int Vector::value_size() const {
  return value_.size();
}
void Vector::clear_value() {
  value_.Clear();
}
float Vector::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Vector.value)
  return value_.Get(index);
}
void Vector::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.Vector.value)
}
void Vector::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.Vector.value)
}
const ::google::protobuf::RepeatedField< float >&
Vector::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.Vector.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
Vector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.Vector.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseVector::kIndexFieldNumber;
const int SparseVector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseVector::SparseVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.SparseVector)
}
SparseVector::SparseVector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  index_(arena),
  value_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.SparseVector)
}
SparseVector::SparseVector(const SparseVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      index_(from.index_),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.SparseVector)
}

void SparseVector::SharedCtor() {
  _cached_size_ = 0;
}

SparseVector::~SparseVector() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.SparseVector)
  SharedDtor();
}

void SparseVector::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SparseVector::ArenaDtor(void* object) {
  SparseVector* _this = reinterpret_cast< SparseVector* >(object);
  (void)_this;
}
void SparseVector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseVector::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparseVector& SparseVector::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

SparseVector* SparseVector::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SparseVector>(arena);
}

void SparseVector::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  value_.Clear();
  _internal_metadata_.Clear();
}

bool SparseVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.SparseVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.SparseVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.SparseVector)
  return false;
#undef DO_
}

void SparseVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
  }
  for (int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->index(i), output);
  }

  // repeated float value = 2;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _value_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.SparseVector)
}

::google::protobuf::uint8* SparseVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->index_, target);
  }

  // repeated float value = 2;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _value_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.SparseVector)
  return target;
}

size_t SparseVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.SparseVector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float value = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.SparseVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.SparseVector)
    MergeFrom(*source);
  }
}

void SparseVector::MergeFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
  value_.MergeFrom(from.value_);
}

void SparseVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseVector::CopyFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVector::IsInitialized() const {
  return true;
}

void SparseVector::Swap(SparseVector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseVector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseVector::UnsafeArenaSwap(SparseVector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseVector::InternalSwap(SparseVector* other) {
  using std::swap;
  index_.InternalSwap(&other->index_);
  value_.InternalSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseVector::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseVector

// repeated int32 index = 1;
int SparseVector::index_size() const {
  return index_.size();
}
void SparseVector::clear_index() {
  index_.Clear();
}
::google::protobuf::int32 SparseVector::index(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.SparseVector.index)
  return index_.Get(index);
}
void SparseVector::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.SparseVector.index)
}
void SparseVector::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.SparseVector.index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SparseVector::index() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.SparseVector.index)
  return index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SparseVector::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.SparseVector.index)
  return &index_;
}

// repeated float value = 2;
int SparseVector::value_size() const {
  return value_.size();
}
void SparseVector::clear_value() {
  value_.Clear();
}
float SparseVector::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.SparseVector.value)
  return value_.Get(index);
}
void SparseVector::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.SparseVector.value)
}
void SparseVector::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.SparseVector.value)
}
const ::google::protobuf::RepeatedField< float >&
SparseVector::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.SparseVector.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
SparseVector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.SparseVector.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketizedSplit::kFeatureIdFieldNumber;
const int BucketizedSplit::kThresholdFieldNumber;
const int BucketizedSplit::kLeftIdFieldNumber;
const int BucketizedSplit::kRightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketizedSplit::BucketizedSplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.BucketizedSplit)
}
BucketizedSplit::BucketizedSplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.BucketizedSplit)
}
BucketizedSplit::BucketizedSplit(const BucketizedSplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_id_, &from.feature_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_id_) -
    reinterpret_cast<char*>(&feature_id_)) + sizeof(right_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.BucketizedSplit)
}

void BucketizedSplit::SharedCtor() {
  ::memset(&feature_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_id_) -
      reinterpret_cast<char*>(&feature_id_)) + sizeof(right_id_));
  _cached_size_ = 0;
}

BucketizedSplit::~BucketizedSplit() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.BucketizedSplit)
  SharedDtor();
}

void BucketizedSplit::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void BucketizedSplit::ArenaDtor(void* object) {
  BucketizedSplit* _this = reinterpret_cast< BucketizedSplit* >(object);
  (void)_this;
}
void BucketizedSplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BucketizedSplit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BucketizedSplit::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BucketizedSplit& BucketizedSplit::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

BucketizedSplit* BucketizedSplit::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BucketizedSplit>(arena);
}

void BucketizedSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.BucketizedSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&feature_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_id_) -
      reinterpret_cast<char*>(&feature_id_)) + sizeof(right_id_));
  _internal_metadata_.Clear();
}

bool BucketizedSplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.BucketizedSplit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 feature_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.BucketizedSplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.BucketizedSplit)
  return false;
#undef DO_
}

void BucketizedSplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.BucketizedSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_id = 1;
  if (this->feature_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->feature_id(), output);
  }

  // int32 threshold = 2;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threshold(), output);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_id(), output);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.BucketizedSplit)
}

::google::protobuf::uint8* BucketizedSplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.BucketizedSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 feature_id = 1;
  if (this->feature_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->feature_id(), target);
  }

  // int32 threshold = 2;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->threshold(), target);
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_id(), target);
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.BucketizedSplit)
  return target;
}

size_t BucketizedSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.BucketizedSplit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 feature_id = 1;
  if (this->feature_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->feature_id());
  }

  // int32 threshold = 2;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold());
  }

  // int32 left_id = 3;
  if (this->left_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_id());
  }

  // int32 right_id = 4;
  if (this->right_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BucketizedSplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.BucketizedSplit)
  GOOGLE_DCHECK_NE(&from, this);
  const BucketizedSplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BucketizedSplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.BucketizedSplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.BucketizedSplit)
    MergeFrom(*source);
  }
}

void BucketizedSplit::MergeFrom(const BucketizedSplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.BucketizedSplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feature_id() != 0) {
    set_feature_id(from.feature_id());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.left_id() != 0) {
    set_left_id(from.left_id());
  }
  if (from.right_id() != 0) {
    set_right_id(from.right_id());
  }
}

void BucketizedSplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.BucketizedSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketizedSplit::CopyFrom(const BucketizedSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.BucketizedSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketizedSplit::IsInitialized() const {
  return true;
}

void BucketizedSplit::Swap(BucketizedSplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BucketizedSplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BucketizedSplit::UnsafeArenaSwap(BucketizedSplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BucketizedSplit::InternalSwap(BucketizedSplit* other) {
  using std::swap;
  swap(feature_id_, other->feature_id_);
  swap(threshold_, other->threshold_);
  swap(left_id_, other->left_id_);
  swap(right_id_, other->right_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BucketizedSplit::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BucketizedSplit

// int32 feature_id = 1;
void BucketizedSplit::clear_feature_id() {
  feature_id_ = 0;
}
::google::protobuf::int32 BucketizedSplit::feature_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.feature_id)
  return feature_id_;
}
void BucketizedSplit::set_feature_id(::google::protobuf::int32 value) {
  
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.feature_id)
}

// int32 threshold = 2;
void BucketizedSplit::clear_threshold() {
  threshold_ = 0;
}
::google::protobuf::int32 BucketizedSplit::threshold() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.threshold)
  return threshold_;
}
void BucketizedSplit::set_threshold(::google::protobuf::int32 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.threshold)
}

// int32 left_id = 3;
void BucketizedSplit::clear_left_id() {
  left_id_ = 0;
}
::google::protobuf::int32 BucketizedSplit::left_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.left_id)
  return left_id_;
}
void BucketizedSplit::set_left_id(::google::protobuf::int32 value) {
  
  left_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.left_id)
}

// int32 right_id = 4;
void BucketizedSplit::clear_right_id() {
  right_id_ = 0;
}
::google::protobuf::int32 BucketizedSplit::right_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.right_id)
  return right_id_;
}
void BucketizedSplit::set_right_id(::google::protobuf::int32 value) {
  
  right_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.right_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tree::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tree::Tree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.Tree)
}
Tree::Tree(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.Tree)
}
Tree::Tree(const Tree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.Tree)
}

void Tree::SharedCtor() {
  _cached_size_ = 0;
}

Tree::~Tree() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.Tree)
  SharedDtor();
}

void Tree::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void Tree::ArenaDtor(void* object) {
  Tree* _this = reinterpret_cast< Tree* >(object);
  (void)_this;
}
void Tree::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Tree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tree::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tree& Tree::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

Tree* Tree::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Tree>(arena);
}

void Tree::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool Tree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.Tree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.boosted_trees.Node nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.Tree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.Tree)
  return false;
#undef DO_
}

void Tree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.Tree)
}

::google::protobuf::uint8* Tree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.Node nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.Tree)
  return target;
}

size_t Tree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.Tree)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.boosted_trees.Node nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.Tree)
  GOOGLE_DCHECK_NE(&from, this);
  const Tree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.Tree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.Tree)
    MergeFrom(*source);
  }
}

void Tree::MergeFrom(const Tree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.Tree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void Tree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.Tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tree::CopyFrom(const Tree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.Tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tree::IsInitialized() const {
  return true;
}

void Tree::Swap(Tree* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Tree* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Tree::UnsafeArenaSwap(Tree* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Tree::InternalSwap(Tree* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tree::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tree

// repeated .tensorflow.boosted_trees.Node nodes = 1;
int Tree::nodes_size() const {
  return nodes_.size();
}
void Tree::clear_nodes() {
  nodes_.Clear();
}
const ::tensorflow::boosted_trees::Node& Tree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Tree.nodes)
  return nodes_.Get(index);
}
::tensorflow::boosted_trees::Node* Tree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Tree.nodes)
  return nodes_.Mutable(index);
}
::tensorflow::boosted_trees::Node* Tree::add_nodes() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.Tree.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node >*
Tree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.Tree.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node >&
Tree::nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.Tree.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeMetadata_PostPruneNodeUpdate::kNewNodeIdFieldNumber;
const int TreeMetadata_PostPruneNodeUpdate::kLogitChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeMetadata_PostPruneNodeUpdate::TreeMetadata_PostPruneNodeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
}
TreeMetadata_PostPruneNodeUpdate::TreeMetadata_PostPruneNodeUpdate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
}
TreeMetadata_PostPruneNodeUpdate::TreeMetadata_PostPruneNodeUpdate(const TreeMetadata_PostPruneNodeUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_node_id_, &from.new_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_change_) -
    reinterpret_cast<char*>(&new_node_id_)) + sizeof(logit_change_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
}

void TreeMetadata_PostPruneNodeUpdate::SharedCtor() {
  ::memset(&new_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logit_change_) -
      reinterpret_cast<char*>(&new_node_id_)) + sizeof(logit_change_));
  _cached_size_ = 0;
}

TreeMetadata_PostPruneNodeUpdate::~TreeMetadata_PostPruneNodeUpdate() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  SharedDtor();
}

void TreeMetadata_PostPruneNodeUpdate::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void TreeMetadata_PostPruneNodeUpdate::ArenaDtor(void* object) {
  TreeMetadata_PostPruneNodeUpdate* _this = reinterpret_cast< TreeMetadata_PostPruneNodeUpdate* >(object);
  (void)_this;
}
void TreeMetadata_PostPruneNodeUpdate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeMetadata_PostPruneNodeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeMetadata_PostPruneNodeUpdate::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeMetadata_PostPruneNodeUpdate& TreeMetadata_PostPruneNodeUpdate::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeMetadata_PostPruneNodeUpdate* TreeMetadata_PostPruneNodeUpdate::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeMetadata_PostPruneNodeUpdate>(arena);
}

void TreeMetadata_PostPruneNodeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&new_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logit_change_) -
      reinterpret_cast<char*>(&new_node_id_)) + sizeof(logit_change_));
  _internal_metadata_.Clear();
}

bool TreeMetadata_PostPruneNodeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 new_node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float logit_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  return false;
#undef DO_
}

void TreeMetadata_PostPruneNodeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 new_node_id = 1;
  if (this->new_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_node_id(), output);
  }

  // float logit_change = 2;
  if (this->logit_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->logit_change(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
}

::google::protobuf::uint8* TreeMetadata_PostPruneNodeUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 new_node_id = 1;
  if (this->new_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_node_id(), target);
  }

  // float logit_change = 2;
  if (this->logit_change() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->logit_change(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  return target;
}

size_t TreeMetadata_PostPruneNodeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 new_node_id = 1;
  if (this->new_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_node_id());
  }

  // float logit_change = 2;
  if (this->logit_change() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeMetadata_PostPruneNodeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeMetadata_PostPruneNodeUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeMetadata_PostPruneNodeUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
    MergeFrom(*source);
  }
}

void TreeMetadata_PostPruneNodeUpdate::MergeFrom(const TreeMetadata_PostPruneNodeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_node_id() != 0) {
    set_new_node_id(from.new_node_id());
  }
  if (from.logit_change() != 0) {
    set_logit_change(from.logit_change());
  }
}

void TreeMetadata_PostPruneNodeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeMetadata_PostPruneNodeUpdate::CopyFrom(const TreeMetadata_PostPruneNodeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeMetadata_PostPruneNodeUpdate::IsInitialized() const {
  return true;
}

void TreeMetadata_PostPruneNodeUpdate::Swap(TreeMetadata_PostPruneNodeUpdate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeMetadata_PostPruneNodeUpdate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeMetadata_PostPruneNodeUpdate::UnsafeArenaSwap(TreeMetadata_PostPruneNodeUpdate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeMetadata_PostPruneNodeUpdate::InternalSwap(TreeMetadata_PostPruneNodeUpdate* other) {
  using std::swap;
  swap(new_node_id_, other->new_node_id_);
  swap(logit_change_, other->logit_change_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeMetadata_PostPruneNodeUpdate::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeMetadata_PostPruneNodeUpdate

// int32 new_node_id = 1;
void TreeMetadata_PostPruneNodeUpdate::clear_new_node_id() {
  new_node_id_ = 0;
}
::google::protobuf::int32 TreeMetadata_PostPruneNodeUpdate::new_node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.new_node_id)
  return new_node_id_;
}
void TreeMetadata_PostPruneNodeUpdate::set_new_node_id(::google::protobuf::int32 value) {
  
  new_node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.new_node_id)
}

// float logit_change = 2;
void TreeMetadata_PostPruneNodeUpdate::clear_logit_change() {
  logit_change_ = 0;
}
float TreeMetadata_PostPruneNodeUpdate::logit_change() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.logit_change)
  return logit_change_;
}
void TreeMetadata_PostPruneNodeUpdate::set_logit_change(float value) {
  
  logit_change_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.logit_change)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeMetadata::kNumLayersGrownFieldNumber;
const int TreeMetadata::kIsFinalizedFieldNumber;
const int TreeMetadata::kPostPrunedNodesMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeMetadata::TreeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.TreeMetadata)
}
TreeMetadata::TreeMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  post_pruned_nodes_meta_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.TreeMetadata)
}
TreeMetadata::TreeMetadata(const TreeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      post_pruned_nodes_meta_(from.post_pruned_nodes_meta_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_layers_grown_, &from.num_layers_grown_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_finalized_) -
    reinterpret_cast<char*>(&num_layers_grown_)) + sizeof(is_finalized_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.TreeMetadata)
}

void TreeMetadata::SharedCtor() {
  ::memset(&num_layers_grown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finalized_) -
      reinterpret_cast<char*>(&num_layers_grown_)) + sizeof(is_finalized_));
  _cached_size_ = 0;
}

TreeMetadata::~TreeMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.TreeMetadata)
  SharedDtor();
}

void TreeMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void TreeMetadata::ArenaDtor(void* object) {
  TreeMetadata* _this = reinterpret_cast< TreeMetadata* >(object);
  (void)_this;
}
void TreeMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeMetadata::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeMetadata& TreeMetadata::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeMetadata* TreeMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeMetadata>(arena);
}

void TreeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.TreeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_pruned_nodes_meta_.Clear();
  ::memset(&num_layers_grown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finalized_) -
      reinterpret_cast<char*>(&num_layers_grown_)) + sizeof(is_finalized_));
  _internal_metadata_.Clear();
}

bool TreeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.TreeMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_layers_grown = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_grown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finalized = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post_pruned_nodes_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.TreeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.TreeMetadata)
  return false;
#undef DO_
}

void TreeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.TreeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_layers_grown(), output);
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_finalized(), output);
  }

  // repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_pruned_nodes_meta_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->post_pruned_nodes_meta(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.TreeMetadata)
}

::google::protobuf::uint8* TreeMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.TreeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_layers_grown(), target);
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_finalized(), target);
  }

  // repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->post_pruned_nodes_meta_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->post_pruned_nodes_meta(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.TreeMetadata)
  return target;
}

size_t TreeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.TreeMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->post_pruned_nodes_meta_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post_pruned_nodes_meta(static_cast<int>(i)));
    }
  }

  // int32 num_layers_grown = 2;
  if (this->num_layers_grown() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_layers_grown());
  }

  // bool is_finalized = 3;
  if (this->is_finalized() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.TreeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.TreeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.TreeMetadata)
    MergeFrom(*source);
  }
}

void TreeMetadata::MergeFrom(const TreeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.TreeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  post_pruned_nodes_meta_.MergeFrom(from.post_pruned_nodes_meta_);
  if (from.num_layers_grown() != 0) {
    set_num_layers_grown(from.num_layers_grown());
  }
  if (from.is_finalized() != 0) {
    set_is_finalized(from.is_finalized());
  }
}

void TreeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.TreeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeMetadata::CopyFrom(const TreeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.TreeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeMetadata::IsInitialized() const {
  return true;
}

void TreeMetadata::Swap(TreeMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeMetadata::UnsafeArenaSwap(TreeMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeMetadata::InternalSwap(TreeMetadata* other) {
  using std::swap;
  post_pruned_nodes_meta_.InternalSwap(&other->post_pruned_nodes_meta_);
  swap(num_layers_grown_, other->num_layers_grown_);
  swap(is_finalized_, other->is_finalized_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeMetadata

// int32 num_layers_grown = 2;
void TreeMetadata::clear_num_layers_grown() {
  num_layers_grown_ = 0;
}
::google::protobuf::int32 TreeMetadata::num_layers_grown() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.num_layers_grown)
  return num_layers_grown_;
}
void TreeMetadata::set_num_layers_grown(::google::protobuf::int32 value) {
  
  num_layers_grown_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.num_layers_grown)
}

// bool is_finalized = 3;
void TreeMetadata::clear_is_finalized() {
  is_finalized_ = false;
}
bool TreeMetadata::is_finalized() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.is_finalized)
  return is_finalized_;
}
void TreeMetadata::set_is_finalized(bool value) {
  
  is_finalized_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.is_finalized)
}

// repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
int TreeMetadata::post_pruned_nodes_meta_size() const {
  return post_pruned_nodes_meta_.size();
}
void TreeMetadata::clear_post_pruned_nodes_meta() {
  post_pruned_nodes_meta_.Clear();
}
const ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate& TreeMetadata::post_pruned_nodes_meta(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_.Get(index);
}
::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate* TreeMetadata::mutable_post_pruned_nodes_meta(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_.Mutable(index);
}
::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate* TreeMetadata::add_post_pruned_nodes_meta() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate >*
TreeMetadata::mutable_post_pruned_nodes_meta() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return &post_pruned_nodes_meta_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate >&
TreeMetadata::post_pruned_nodes_meta() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GrowingMetadata::kNumTreesAttemptedFieldNumber;
const int GrowingMetadata::kNumLayersAttemptedFieldNumber;
const int GrowingMetadata::kLastLayerNodeStartFieldNumber;
const int GrowingMetadata::kLastLayerNodeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GrowingMetadata::GrowingMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.GrowingMetadata)
}
GrowingMetadata::GrowingMetadata(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.GrowingMetadata)
}
GrowingMetadata::GrowingMetadata(const GrowingMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_trees_attempted_, &from.num_trees_attempted_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_layer_node_end_) -
    reinterpret_cast<char*>(&num_trees_attempted_)) + sizeof(last_layer_node_end_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.GrowingMetadata)
}

void GrowingMetadata::SharedCtor() {
  ::memset(&num_trees_attempted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_layer_node_end_) -
      reinterpret_cast<char*>(&num_trees_attempted_)) + sizeof(last_layer_node_end_));
  _cached_size_ = 0;
}

GrowingMetadata::~GrowingMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.GrowingMetadata)
  SharedDtor();
}

void GrowingMetadata::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void GrowingMetadata::ArenaDtor(void* object) {
  GrowingMetadata* _this = reinterpret_cast< GrowingMetadata* >(object);
  (void)_this;
}
void GrowingMetadata::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GrowingMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowingMetadata::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GrowingMetadata& GrowingMetadata::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

GrowingMetadata* GrowingMetadata::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GrowingMetadata>(arena);
}

void GrowingMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.GrowingMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_trees_attempted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_layer_node_end_) -
      reinterpret_cast<char*>(&num_trees_attempted_)) + sizeof(last_layer_node_end_));
  _internal_metadata_.Clear();
}

bool GrowingMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.GrowingMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 num_trees_attempted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_trees_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_layers_attempted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_layers_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_layer_node_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_layer_node_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_layer_node_end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_layer_node_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.GrowingMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.GrowingMetadata)
  return false;
#undef DO_
}

void GrowingMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.GrowingMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_trees_attempted = 1;
  if (this->num_trees_attempted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_trees_attempted(), output);
  }

  // int64 num_layers_attempted = 2;
  if (this->num_layers_attempted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_layers_attempted(), output);
  }

  // int32 last_layer_node_start = 3;
  if (this->last_layer_node_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_layer_node_start(), output);
  }

  // int32 last_layer_node_end = 4;
  if (this->last_layer_node_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_layer_node_end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.GrowingMetadata)
}

::google::protobuf::uint8* GrowingMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.GrowingMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_trees_attempted = 1;
  if (this->num_trees_attempted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_trees_attempted(), target);
  }

  // int64 num_layers_attempted = 2;
  if (this->num_layers_attempted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_layers_attempted(), target);
  }

  // int32 last_layer_node_start = 3;
  if (this->last_layer_node_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_layer_node_start(), target);
  }

  // int32 last_layer_node_end = 4;
  if (this->last_layer_node_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_layer_node_end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.GrowingMetadata)
  return target;
}

size_t GrowingMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.GrowingMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 num_trees_attempted = 1;
  if (this->num_trees_attempted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_trees_attempted());
  }

  // int64 num_layers_attempted = 2;
  if (this->num_layers_attempted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_layers_attempted());
  }

  // int32 last_layer_node_start = 3;
  if (this->last_layer_node_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_layer_node_start());
  }

  // int32 last_layer_node_end = 4;
  if (this->last_layer_node_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_layer_node_end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowingMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.GrowingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const GrowingMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GrowingMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.GrowingMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.GrowingMetadata)
    MergeFrom(*source);
  }
}

void GrowingMetadata::MergeFrom(const GrowingMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.GrowingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_trees_attempted() != 0) {
    set_num_trees_attempted(from.num_trees_attempted());
  }
  if (from.num_layers_attempted() != 0) {
    set_num_layers_attempted(from.num_layers_attempted());
  }
  if (from.last_layer_node_start() != 0) {
    set_last_layer_node_start(from.last_layer_node_start());
  }
  if (from.last_layer_node_end() != 0) {
    set_last_layer_node_end(from.last_layer_node_end());
  }
}

void GrowingMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.GrowingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowingMetadata::CopyFrom(const GrowingMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.GrowingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowingMetadata::IsInitialized() const {
  return true;
}

void GrowingMetadata::Swap(GrowingMetadata* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GrowingMetadata* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GrowingMetadata::UnsafeArenaSwap(GrowingMetadata* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GrowingMetadata::InternalSwap(GrowingMetadata* other) {
  using std::swap;
  swap(num_trees_attempted_, other->num_trees_attempted_);
  swap(num_layers_attempted_, other->num_layers_attempted_);
  swap(last_layer_node_start_, other->last_layer_node_start_);
  swap(last_layer_node_end_, other->last_layer_node_end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GrowingMetadata::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GrowingMetadata

// int64 num_trees_attempted = 1;
void GrowingMetadata::clear_num_trees_attempted() {
  num_trees_attempted_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GrowingMetadata::num_trees_attempted() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.num_trees_attempted)
  return num_trees_attempted_;
}
void GrowingMetadata::set_num_trees_attempted(::google::protobuf::int64 value) {
  
  num_trees_attempted_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.num_trees_attempted)
}

// int64 num_layers_attempted = 2;
void GrowingMetadata::clear_num_layers_attempted() {
  num_layers_attempted_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GrowingMetadata::num_layers_attempted() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.num_layers_attempted)
  return num_layers_attempted_;
}
void GrowingMetadata::set_num_layers_attempted(::google::protobuf::int64 value) {
  
  num_layers_attempted_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.num_layers_attempted)
}

// int32 last_layer_node_start = 3;
void GrowingMetadata::clear_last_layer_node_start() {
  last_layer_node_start_ = 0;
}
::google::protobuf::int32 GrowingMetadata::last_layer_node_start() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_start)
  return last_layer_node_start_;
}
void GrowingMetadata::set_last_layer_node_start(::google::protobuf::int32 value) {
  
  last_layer_node_start_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_start)
}

// int32 last_layer_node_end = 4;
void GrowingMetadata::clear_last_layer_node_end() {
  last_layer_node_end_ = 0;
}
::google::protobuf::int32 GrowingMetadata::last_layer_node_end() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_end)
  return last_layer_node_end_;
}
void GrowingMetadata::set_last_layer_node_end(::google::protobuf::int32 value) {
  
  last_layer_node_end_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TreeEnsemble::_slow_mutable_growing_metadata() {
  growing_metadata_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::GrowingMetadata >(
      GetArenaNoVirtual());
}
::tensorflow::boosted_trees::GrowingMetadata* TreeEnsemble::_slow_release_growing_metadata() {
  if (growing_metadata_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::boosted_trees::GrowingMetadata* temp = new ::tensorflow::boosted_trees::GrowingMetadata(*growing_metadata_);
    growing_metadata_ = NULL;
    return temp;
  }
}
::tensorflow::boosted_trees::GrowingMetadata* TreeEnsemble::unsafe_arena_release_growing_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  
  ::tensorflow::boosted_trees::GrowingMetadata* temp = growing_metadata_;
  growing_metadata_ = NULL;
  return temp;
}
void TreeEnsemble::_slow_set_allocated_growing_metadata(
    ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::GrowingMetadata** growing_metadata) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*growing_metadata) == NULL) {
      message_arena->Own(*growing_metadata);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*growing_metadata)) {
      ::tensorflow::boosted_trees::GrowingMetadata* new_growing_metadata = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::GrowingMetadata >(
            message_arena);
      new_growing_metadata->CopyFrom(**growing_metadata);
      *growing_metadata = new_growing_metadata;
    }
}
void TreeEnsemble::unsafe_arena_set_allocated_growing_metadata(
    ::tensorflow::boosted_trees::GrowingMetadata* growing_metadata) {
  if (GetArenaNoVirtual() == NULL) {
    delete growing_metadata_;
  }
  growing_metadata_ = growing_metadata;
  if (growing_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeEnsemble::kTreesFieldNumber;
const int TreeEnsemble::kTreeWeightsFieldNumber;
const int TreeEnsemble::kTreeMetadataFieldNumber;
const int TreeEnsemble::kGrowingMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeEnsemble::TreeEnsemble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.boosted_trees.TreeEnsemble)
}
TreeEnsemble::TreeEnsemble(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  trees_(arena),
  tree_weights_(arena),
  tree_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.boosted_trees.TreeEnsemble)
}
TreeEnsemble::TreeEnsemble(const TreeEnsemble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trees_(from.trees_),
      tree_weights_(from.tree_weights_),
      tree_metadata_(from.tree_metadata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_growing_metadata()) {
    growing_metadata_ = new ::tensorflow::boosted_trees::GrowingMetadata(*from.growing_metadata_);
  } else {
    growing_metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.boosted_trees.TreeEnsemble)
}

void TreeEnsemble::SharedCtor() {
  growing_metadata_ = NULL;
  _cached_size_ = 0;
}

TreeEnsemble::~TreeEnsemble() {
  // @@protoc_insertion_point(destructor:tensorflow.boosted_trees.TreeEnsemble)
  SharedDtor();
}

void TreeEnsemble::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete growing_metadata_;
}

void TreeEnsemble::ArenaDtor(void* object) {
  TreeEnsemble* _this = reinterpret_cast< TreeEnsemble* >(object);
  (void)_this;
}
void TreeEnsemble::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeEnsemble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeEnsemble::descriptor() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeEnsemble& TreeEnsemble::default_instance() {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::InitDefaults();
  return *internal_default_instance();
}

TreeEnsemble* TreeEnsemble::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TreeEnsemble>(arena);
}

void TreeEnsemble::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.boosted_trees.TreeEnsemble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trees_.Clear();
  tree_weights_.Clear();
  tree_metadata_.Clear();
  if (GetArenaNoVirtual() == NULL && growing_metadata_ != NULL) {
    delete growing_metadata_;
  }
  growing_metadata_ = NULL;
  _internal_metadata_.Clear();
}

bool TreeEnsemble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.boosted_trees.TreeEnsemble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.boosted_trees.Tree trees = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trees()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tree_weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tree_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tree_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tree_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growing_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.boosted_trees.TreeEnsemble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.boosted_trees.TreeEnsemble)
  return false;
#undef DO_
}

void TreeEnsemble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.boosted_trees.TreeEnsemble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.Tree trees = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trees_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trees(static_cast<int>(i)), output);
  }

  // repeated float tree_weights = 2;
  if (this->tree_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tree_weights_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tree_weights().data(), this->tree_weights_size(), output);
  }

  // repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tree_metadata(static_cast<int>(i)), output);
  }

  // .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
  if (this->has_growing_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->growing_metadata_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.boosted_trees.TreeEnsemble)
}

::google::protobuf::uint8* TreeEnsemble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.boosted_trees.TreeEnsemble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.boosted_trees.Tree trees = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trees_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->trees(static_cast<int>(i)), deterministic, target);
  }

  // repeated float tree_weights = 2;
  if (this->tree_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tree_weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tree_weights_, target);
  }

  // repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tree_metadata(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
  if (this->has_growing_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->growing_metadata_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.boosted_trees.TreeEnsemble)
  return target;
}

size_t TreeEnsemble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.boosted_trees.TreeEnsemble)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.boosted_trees.Tree trees = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->trees_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trees(static_cast<int>(i)));
    }
  }

  // repeated float tree_weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_weights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tree_weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree_metadata(static_cast<int>(i)));
    }
  }

  // .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
  if (this->has_growing_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->growing_metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeEnsemble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.boosted_trees.TreeEnsemble)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeEnsemble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeEnsemble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.boosted_trees.TreeEnsemble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.boosted_trees.TreeEnsemble)
    MergeFrom(*source);
  }
}

void TreeEnsemble::MergeFrom(const TreeEnsemble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.boosted_trees.TreeEnsemble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trees_.MergeFrom(from.trees_);
  tree_weights_.MergeFrom(from.tree_weights_);
  tree_metadata_.MergeFrom(from.tree_metadata_);
  if (from.has_growing_metadata()) {
    mutable_growing_metadata()->::tensorflow::boosted_trees::GrowingMetadata::MergeFrom(from.growing_metadata());
  }
}

void TreeEnsemble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.boosted_trees.TreeEnsemble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeEnsemble::CopyFrom(const TreeEnsemble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.boosted_trees.TreeEnsemble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeEnsemble::IsInitialized() const {
  return true;
}

void TreeEnsemble::Swap(TreeEnsemble* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeEnsemble* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeEnsemble::UnsafeArenaSwap(TreeEnsemble* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeEnsemble::InternalSwap(TreeEnsemble* other) {
  using std::swap;
  trees_.InternalSwap(&other->trees_);
  tree_weights_.InternalSwap(&other->tree_weights_);
  tree_metadata_.InternalSwap(&other->tree_metadata_);
  swap(growing_metadata_, other->growing_metadata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeEnsemble::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeEnsemble

// repeated .tensorflow.boosted_trees.Tree trees = 1;
int TreeEnsemble::trees_size() const {
  return trees_.size();
}
void TreeEnsemble::clear_trees() {
  trees_.Clear();
}
const ::tensorflow::boosted_trees::Tree& TreeEnsemble::trees(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_.Get(index);
}
::tensorflow::boosted_trees::Tree* TreeEnsemble::mutable_trees(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_.Mutable(index);
}
::tensorflow::boosted_trees::Tree* TreeEnsemble::add_trees() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree >*
TreeEnsemble::mutable_trees() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeEnsemble.trees)
  return &trees_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree >&
TreeEnsemble::trees() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_;
}

// repeated float tree_weights = 2;
int TreeEnsemble::tree_weights_size() const {
  return tree_weights_.size();
}
void TreeEnsemble::clear_tree_weights() {
  tree_weights_.Clear();
}
float TreeEnsemble::tree_weights(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
  return tree_weights_.Get(index);
}
void TreeEnsemble::set_tree_weights(int index, float value) {
  tree_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
}
void TreeEnsemble::add_tree_weights(float value) {
  tree_weights_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
}
const ::google::protobuf::RepeatedField< float >&
TreeEnsemble::tree_weights() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
  return tree_weights_;
}
::google::protobuf::RepeatedField< float >*
TreeEnsemble::mutable_tree_weights() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
  return &tree_weights_;
}

// repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
int TreeEnsemble::tree_metadata_size() const {
  return tree_metadata_.size();
}
void TreeEnsemble::clear_tree_metadata() {
  tree_metadata_.Clear();
}
const ::tensorflow::boosted_trees::TreeMetadata& TreeEnsemble::tree_metadata(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_.Get(index);
}
::tensorflow::boosted_trees::TreeMetadata* TreeEnsemble::mutable_tree_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_.Mutable(index);
}
::tensorflow::boosted_trees::TreeMetadata* TreeEnsemble::add_tree_metadata() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata >*
TreeEnsemble::mutable_tree_metadata() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return &tree_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata >&
TreeEnsemble::tree_metadata() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_;
}

// .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
bool TreeEnsemble::has_growing_metadata() const {
  return this != internal_default_instance() && growing_metadata_ != NULL;
}
void TreeEnsemble::clear_growing_metadata() {
  if (GetArenaNoVirtual() == NULL && growing_metadata_ != NULL) delete growing_metadata_;
  growing_metadata_ = NULL;
}
const ::tensorflow::boosted_trees::GrowingMetadata& TreeEnsemble::growing_metadata() const {
  const ::tensorflow::boosted_trees::GrowingMetadata* p = growing_metadata_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::GrowingMetadata*>(
      &::tensorflow::boosted_trees::_GrowingMetadata_default_instance_);
}
::tensorflow::boosted_trees::GrowingMetadata* TreeEnsemble::mutable_growing_metadata() {
  
  if (growing_metadata_ == NULL) {
    _slow_mutable_growing_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  return growing_metadata_;
}
::tensorflow::boosted_trees::GrowingMetadata* TreeEnsemble::release_growing_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_growing_metadata();
  } else {
    ::tensorflow::boosted_trees::GrowingMetadata* temp = growing_metadata_;
    growing_metadata_ = NULL;
    return temp;
  }
}
 void TreeEnsemble::set_allocated_growing_metadata(::tensorflow::boosted_trees::GrowingMetadata* growing_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete growing_metadata_;
  }
  if (growing_metadata != NULL) {
    _slow_set_allocated_growing_metadata(message_arena, &growing_metadata);
  }
  growing_metadata_ = growing_metadata;
  if (growing_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
