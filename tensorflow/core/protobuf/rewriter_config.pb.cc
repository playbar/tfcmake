// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/rewriter_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class AutoParallelOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AutoParallelOptions>
     _instance;
} _AutoParallelOptions_default_instance_;
class ScopedAllocatorOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScopedAllocatorOptions>
     _instance;
} _ScopedAllocatorOptions_default_instance_;
class RewriterConfig_CustomGraphOptimizer_ParameterMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry>
     _instance;
} _RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_;
class RewriterConfig_CustomGraphOptimizerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RewriterConfig_CustomGraphOptimizer>
     _instance;
} _RewriterConfig_CustomGraphOptimizer_default_instance_;
class RewriterConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RewriterConfig>
     _instance;
} _RewriterConfig_default_instance_;

namespace protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, num_replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScopedAllocatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScopedAllocatorOptions, enable_op_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig_CustomGraphOptimizer, parameter_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, layout_optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, constant_folding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, shape_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, remapping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, arithmetic_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, dependency_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, loop_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, function_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, debug_stripper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, disable_model_pruning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, scoped_allocator_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, meta_optimizer_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimizer_target_node_name_scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, auto_parallel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, scoped_allocator_opts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, optimizers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, custom_optimizers_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AutoParallelOptions)},
  { 7, -1, sizeof(ScopedAllocatorOptions)},
  { 13, -1, sizeof(RewriterConfig_CustomGraphOptimizer)},
  { 20, -1, sizeof(RewriterConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoParallelOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScopedAllocatorOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RewriterConfig_CustomGraphOptimizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RewriterConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/protobuf/rewriter_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[2].reflection = RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::CreateReflection(file_level_metadata[2].descriptor, _RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto::InitDefaults();
  _AutoParallelOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AutoParallelOptions_default_instance_);_ScopedAllocatorOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScopedAllocatorOptions_default_instance_);_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_);_RewriterConfig_CustomGraphOptimizer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RewriterConfig_CustomGraphOptimizer_default_instance_);_RewriterConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RewriterConfig_default_instance_);_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_._instance.get_mutable());
  _RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _RewriterConfig_default_instance_._instance.get_mutable()->auto_parallel_ = const_cast< ::tensorflow::AutoParallelOptions*>(
      ::tensorflow::AutoParallelOptions::internal_default_instance());
  _RewriterConfig_default_instance_._instance.get_mutable()->scoped_allocator_opts_ = const_cast< ::tensorflow::ScopedAllocatorOptions*>(
      ::tensorflow::ScopedAllocatorOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.tensorflow/core/protobuf/rewriter_conf"
      "ig.proto\022\ntensorflow\032*tensorflow/core/fr"
      "amework/attr_value.proto\";\n\023AutoParallel"
      "Options\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_replicas\030"
      "\002 \001(\005\"+\n\026ScopedAllocatorOptions\022\021\n\tenabl"
      "e_op\030\001 \003(\t\"\262\014\n\016RewriterConfig\022;\n\020layout_"
      "optimizer\030\001 \001(\0162!.tensorflow.RewriterCon"
      "fig.Toggle\022;\n\020constant_folding\030\003 \001(\0162!.t"
      "ensorflow.RewriterConfig.Toggle\022=\n\022shape"
      "_optimization\030\r \001(\0162!.tensorflow.Rewrite"
      "rConfig.Toggle\0224\n\tremapping\030\016 \001(\0162!.tens"
      "orflow.RewriterConfig.Toggle\022B\n\027arithmet"
      "ic_optimization\030\007 \001(\0162!.tensorflow.Rewri"
      "terConfig.Toggle\022B\n\027dependency_optimizat"
      "ion\030\010 \001(\0162!.tensorflow.RewriterConfig.To"
      "ggle\022<\n\021loop_optimization\030\t \001(\0162!.tensor"
      "flow.RewriterConfig.Toggle\022@\n\025function_o"
      "ptimization\030\n \001(\0162!.tensorflow.RewriterC"
      "onfig.Toggle\0229\n\016debug_stripper\030\013 \001(\0162!.t"
      "ensorflow.RewriterConfig.Toggle\022\035\n\025disab"
      "le_model_pruning\030\002 \001(\010\022H\n\035scoped_allocat"
      "or_optimization\030\017 \001(\0162!.tensorflow.Rewri"
      "terConfig.Toggle\022O\n\031meta_optimizer_itera"
      "tions\030\014 \001(\0162,.tensorflow.RewriterConfig."
      "NumIterationsType\022B\n\023memory_optimization"
      "\030\004 \001(\0162%.tensorflow.RewriterConfig.MemOp"
      "tType\022/\n\'memory_optimizer_target_node_na"
      "me_scope\030\006 \001(\t\0226\n\rauto_parallel\030\005 \001(\0132\037."
      "tensorflow.AutoParallelOptions\022A\n\025scoped"
      "_allocator_opts\030\020 \001(\0132\".tensorflow.Scope"
      "dAllocatorOptions\022\022\n\noptimizers\030d \003(\t\022K\n"
      "\021custom_optimizers\030\310\001 \003(\0132/.tensorflow.R"
      "ewriterConfig.CustomGraphOptimizer\032\312\001\n\024C"
      "ustomGraphOptimizer\022\014\n\004name\030\001 \001(\t\022X\n\rpar"
      "ameter_map\030\002 \003(\0132A.tensorflow.RewriterCo"
      "nfig.CustomGraphOptimizer.ParameterMapEn"
      "try\032J\n\021ParameterMapEntry\022\013\n\003key\030\001 \001(\t\022$\n"
      "\005value\030\002 \001(\0132\025.tensorflow.AttrValue:\0028\001\""
      "6\n\006Toggle\022\013\n\007DEFAULT\020\000\022\006\n\002ON\020\001\022\007\n\003OFF\020\002\022"
      "\016\n\nAGGRESSIVE\020\003\"<\n\021NumIterationsType\022\025\n\021"
      "DEFAULT_NUM_ITERS\020\000\022\007\n\003ONE\020\001\022\007\n\003TWO\020\002\"\237\001"
      "\n\nMemOptType\022\023\n\017DEFAULT_MEM_OPT\020\000\022\016\n\nNO_"
      "MEM_OPT\020\001\022\n\n\006MANUAL\020\002\022\027\n\023SWAPPING_HEURIS"
      "TICS\020\004\022\034\n\030RECOMPUTATION_HEURISTICS\020\005\022\031\n\025"
      "SCHEDULING_HEURISTICS\020\006\022\016\n\nHEURISTICS\020\003B"
      "s\n\030org.tensorflow.frameworkB\024RewriterCon"
      "figProtosP\001Z<github.com/tensorflow/tenso"
      "rflow/tensorflow/go/core/protobuf\370\001\001b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/rewriter_config.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* RewriterConfig_Toggle_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool RewriterConfig_Toggle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_Toggle RewriterConfig::DEFAULT;
const RewriterConfig_Toggle RewriterConfig::ON;
const RewriterConfig_Toggle RewriterConfig::OFF;
const RewriterConfig_Toggle RewriterConfig::AGGRESSIVE;
const RewriterConfig_Toggle RewriterConfig::Toggle_MIN;
const RewriterConfig_Toggle RewriterConfig::Toggle_MAX;
const int RewriterConfig::Toggle_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RewriterConfig_NumIterationsType_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool RewriterConfig_NumIterationsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_NumIterationsType RewriterConfig::DEFAULT_NUM_ITERS;
const RewriterConfig_NumIterationsType RewriterConfig::ONE;
const RewriterConfig_NumIterationsType RewriterConfig::TWO;
const RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MIN;
const RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MAX;
const int RewriterConfig::NumIterationsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_enum_descriptors[2];
}
bool RewriterConfig_MemOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_MemOptType RewriterConfig::DEFAULT_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::NO_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::MANUAL;
const RewriterConfig_MemOptType RewriterConfig::SWAPPING_HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::RECOMPUTATION_HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::SCHEDULING_HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MIN;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MAX;
const int RewriterConfig::MemOptType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoParallelOptions::kEnableFieldNumber;
const int AutoParallelOptions::kNumReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoParallelOptions::AutoParallelOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(const AutoParallelOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_replicas_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  _cached_size_ = 0;
}

AutoParallelOptions::~AutoParallelOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.AutoParallelOptions)
  SharedDtor();
}

void AutoParallelOptions::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void AutoParallelOptions::ArenaDtor(void* object) {
  AutoParallelOptions* _this = reinterpret_cast< AutoParallelOptions* >(object);
  (void)_this;
}
void AutoParallelOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AutoParallelOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoParallelOptions::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoParallelOptions& AutoParallelOptions::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoParallelOptions* AutoParallelOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AutoParallelOptions>(arena);
}

void AutoParallelOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutoParallelOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  _internal_metadata_.Clear();
}

bool AutoParallelOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutoParallelOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_replicas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutoParallelOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutoParallelOptions)
  return false;
#undef DO_
}

void AutoParallelOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutoParallelOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_replicas(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.AutoParallelOptions)
}

::google::protobuf::uint8* AutoParallelOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutoParallelOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_replicas(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutoParallelOptions)
  return target;
}

size_t AutoParallelOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutoParallelOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_replicas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoParallelOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoParallelOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoParallelOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutoParallelOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutoParallelOptions)
    MergeFrom(*source);
  }
}

void AutoParallelOptions::MergeFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.num_replicas() != 0) {
    set_num_replicas(from.num_replicas());
  }
}

void AutoParallelOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoParallelOptions::CopyFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoParallelOptions::IsInitialized() const {
  return true;
}

void AutoParallelOptions::Swap(AutoParallelOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AutoParallelOptions* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AutoParallelOptions::UnsafeArenaSwap(AutoParallelOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AutoParallelOptions::InternalSwap(AutoParallelOptions* other) {
  using std::swap;
  swap(enable_, other->enable_);
  swap(num_replicas_, other->num_replicas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoParallelOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoParallelOptions

// bool enable = 1;
void AutoParallelOptions::clear_enable() {
  enable_ = false;
}
bool AutoParallelOptions::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.enable)
  return enable_;
}
void AutoParallelOptions::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.enable)
}

// int32 num_replicas = 2;
void AutoParallelOptions::clear_num_replicas() {
  num_replicas_ = 0;
}
::google::protobuf::int32 AutoParallelOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.num_replicas)
  return num_replicas_;
}
void AutoParallelOptions::set_num_replicas(::google::protobuf::int32 value) {
  
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.num_replicas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScopedAllocatorOptions::kEnableOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScopedAllocatorOptions::ScopedAllocatorOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ScopedAllocatorOptions)
}
ScopedAllocatorOptions::ScopedAllocatorOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  enable_op_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ScopedAllocatorOptions)
}
ScopedAllocatorOptions::ScopedAllocatorOptions(const ScopedAllocatorOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      enable_op_(from.enable_op_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ScopedAllocatorOptions)
}

void ScopedAllocatorOptions::SharedCtor() {
  _cached_size_ = 0;
}

ScopedAllocatorOptions::~ScopedAllocatorOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ScopedAllocatorOptions)
  SharedDtor();
}

void ScopedAllocatorOptions::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void ScopedAllocatorOptions::ArenaDtor(void* object) {
  ScopedAllocatorOptions* _this = reinterpret_cast< ScopedAllocatorOptions* >(object);
  (void)_this;
}
void ScopedAllocatorOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ScopedAllocatorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScopedAllocatorOptions::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScopedAllocatorOptions& ScopedAllocatorOptions::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScopedAllocatorOptions* ScopedAllocatorOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ScopedAllocatorOptions>(arena);
}

void ScopedAllocatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ScopedAllocatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_op_.Clear();
  _internal_metadata_.Clear();
}

bool ScopedAllocatorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ScopedAllocatorOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string enable_op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enable_op(this->enable_op_size() - 1).data(),
            static_cast<int>(this->enable_op(this->enable_op_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.ScopedAllocatorOptions.enable_op"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ScopedAllocatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ScopedAllocatorOptions)
  return false;
#undef DO_
}

void ScopedAllocatorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ScopedAllocatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  for (int i = 0, n = this->enable_op_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enable_op(i).data(), static_cast<int>(this->enable_op(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->enable_op(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ScopedAllocatorOptions)
}

::google::protobuf::uint8* ScopedAllocatorOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ScopedAllocatorOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  for (int i = 0, n = this->enable_op_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enable_op(i).data(), static_cast<int>(this->enable_op(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->enable_op(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ScopedAllocatorOptions)
  return target;
}

size_t ScopedAllocatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ScopedAllocatorOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string enable_op = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->enable_op_size());
  for (int i = 0, n = this->enable_op_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enable_op(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScopedAllocatorOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ScopedAllocatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ScopedAllocatorOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScopedAllocatorOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ScopedAllocatorOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ScopedAllocatorOptions)
    MergeFrom(*source);
  }
}

void ScopedAllocatorOptions::MergeFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ScopedAllocatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enable_op_.MergeFrom(from.enable_op_);
}

void ScopedAllocatorOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScopedAllocatorOptions::CopyFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopedAllocatorOptions::IsInitialized() const {
  return true;
}

void ScopedAllocatorOptions::Swap(ScopedAllocatorOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ScopedAllocatorOptions* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ScopedAllocatorOptions::UnsafeArenaSwap(ScopedAllocatorOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ScopedAllocatorOptions::InternalSwap(ScopedAllocatorOptions* other) {
  using std::swap;
  enable_op_.InternalSwap(&other->enable_op_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScopedAllocatorOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScopedAllocatorOptions

// repeated string enable_op = 1;
int ScopedAllocatorOptions::enable_op_size() const {
  return enable_op_.size();
}
void ScopedAllocatorOptions::clear_enable_op() {
  enable_op_.Clear();
}
const ::std::string& ScopedAllocatorOptions::enable_op(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Get(index);
}
::std::string* ScopedAllocatorOptions::mutable_enable_op(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Mutable(index);
}
void ScopedAllocatorOptions::set_enable_op(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ScopedAllocatorOptions.enable_op)
  enable_op_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ScopedAllocatorOptions::set_enable_op(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.ScopedAllocatorOptions.enable_op)
  enable_op_.Mutable(index)->assign(std::move(value));
}
#endif
void ScopedAllocatorOptions::set_enable_op(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  enable_op_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.ScopedAllocatorOptions.enable_op)
}
void ScopedAllocatorOptions::set_enable_op(int index, const char* value, size_t size) {
  enable_op_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.ScopedAllocatorOptions.enable_op)
}
::std::string* ScopedAllocatorOptions::add_enable_op() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_.Add();
}
void ScopedAllocatorOptions::add_enable_op(const ::std::string& value) {
  enable_op_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.ScopedAllocatorOptions.enable_op)
}
#if LANG_CXX11
void ScopedAllocatorOptions::add_enable_op(::std::string&& value) {
  enable_op_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.ScopedAllocatorOptions.enable_op)
}
#endif
void ScopedAllocatorOptions::add_enable_op(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  enable_op_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.ScopedAllocatorOptions.enable_op)
}
void ScopedAllocatorOptions::add_enable_op(const char* value, size_t size) {
  enable_op_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.ScopedAllocatorOptions.enable_op)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScopedAllocatorOptions::enable_op() const {
  // @@protoc_insertion_point(field_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return enable_op_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ScopedAllocatorOptions::mutable_enable_op() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ScopedAllocatorOptions.enable_op)
  return &enable_op_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry() {}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[2];
}
void RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::MergeFrom(const RewriterConfig_CustomGraphOptimizer_ParameterMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig_CustomGraphOptimizer::kNameFieldNumber;
const int RewriterConfig_CustomGraphOptimizer::kParameterMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  parameter_map_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(const RewriterConfig_CustomGraphOptimizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameter_map_.MergeFrom(from.parameter_map_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

void RewriterConfig_CustomGraphOptimizer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RewriterConfig_CustomGraphOptimizer::~RewriterConfig_CustomGraphOptimizer() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
  SharedDtor();
}

void RewriterConfig_CustomGraphOptimizer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void RewriterConfig_CustomGraphOptimizer::ArenaDtor(void* object) {
  RewriterConfig_CustomGraphOptimizer* _this = reinterpret_cast< RewriterConfig_CustomGraphOptimizer* >(object);
  (void)_this;
}
void RewriterConfig_CustomGraphOptimizer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RewriterConfig_CustomGraphOptimizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriterConfig_CustomGraphOptimizer::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RewriterConfig_CustomGraphOptimizer& RewriterConfig_CustomGraphOptimizer::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

RewriterConfig_CustomGraphOptimizer* RewriterConfig_CustomGraphOptimizer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RewriterConfig_CustomGraphOptimizer>(arena);
}

void RewriterConfig_CustomGraphOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_map_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool RewriterConfig_CustomGraphOptimizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.CustomGraphOptimizer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.AttrValue> parameter_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          RewriterConfig_CustomGraphOptimizer_ParameterMapEntry::Parser< ::google::protobuf::internal::MapField<
              RewriterConfig_CustomGraphOptimizer_ParameterMapEntry,
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&parameter_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return false;
#undef DO_
}

void RewriterConfig_CustomGraphOptimizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->parameter_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->parameter_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->parameter_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(parameter_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it) {
        entry.reset(parameter_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

::google::protobuf::uint8* RewriterConfig_CustomGraphOptimizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->parameter_map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (deterministic &&
        this->parameter_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->parameter_map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(parameter_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it) {
        entry.reset(parameter_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return target;
}

size_t RewriterConfig_CustomGraphOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->parameter_map_size());
  {
    ::google::protobuf::scoped_ptr<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->parameter_map().begin();
        it != this->parameter_map().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(parameter_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig_CustomGraphOptimizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RewriterConfig_CustomGraphOptimizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig.CustomGraphOptimizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
    MergeFrom(*source);
  }
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_map_.MergeFrom(from.parameter_map_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig_CustomGraphOptimizer::IsInitialized() const {
  return true;
}

void RewriterConfig_CustomGraphOptimizer::Swap(RewriterConfig_CustomGraphOptimizer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig_CustomGraphOptimizer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RewriterConfig_CustomGraphOptimizer::UnsafeArenaSwap(RewriterConfig_CustomGraphOptimizer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig_CustomGraphOptimizer::InternalSwap(RewriterConfig_CustomGraphOptimizer* other) {
  using std::swap;
  parameter_map_.Swap(&other->parameter_map_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewriterConfig_CustomGraphOptimizer::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterConfig_CustomGraphOptimizer

// string name = 1;
void RewriterConfig_CustomGraphOptimizer::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RewriterConfig_CustomGraphOptimizer::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return name_.Get();
}
void RewriterConfig_CustomGraphOptimizer::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
#if LANG_CXX11
void RewriterConfig_CustomGraphOptimizer::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
#endif
void RewriterConfig_CustomGraphOptimizer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
void RewriterConfig_CustomGraphOptimizer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
::std::string* RewriterConfig_CustomGraphOptimizer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RewriterConfig_CustomGraphOptimizer::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RewriterConfig_CustomGraphOptimizer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RewriterConfig_CustomGraphOptimizer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}
void RewriterConfig_CustomGraphOptimizer::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.CustomGraphOptimizer.name)
}

// map<string, .tensorflow.AttrValue> parameter_map = 2;
int RewriterConfig_CustomGraphOptimizer::parameter_map_size() const {
  return parameter_map_.size();
}
void RewriterConfig_CustomGraphOptimizer::clear_parameter_map() {
  parameter_map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
RewriterConfig_CustomGraphOptimizer::parameter_map() const {
  // @@protoc_insertion_point(field_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return parameter_map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
RewriterConfig_CustomGraphOptimizer::mutable_parameter_map() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.RewriterConfig.CustomGraphOptimizer.parameter_map)
  return parameter_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RewriterConfig::_slow_mutable_auto_parallel() {
  auto_parallel_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
      GetArenaNoVirtual());
}
::tensorflow::AutoParallelOptions* RewriterConfig::_slow_release_auto_parallel() {
  if (auto_parallel_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::AutoParallelOptions* temp = new ::tensorflow::AutoParallelOptions(*auto_parallel_);
    auto_parallel_ = NULL;
    return temp;
  }
}
::tensorflow::AutoParallelOptions* RewriterConfig::unsafe_arena_release_auto_parallel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.auto_parallel)
  
  ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
  auto_parallel_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_auto_parallel(
    ::google::protobuf::Arena* message_arena, ::tensorflow::AutoParallelOptions** auto_parallel) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auto_parallel) == NULL) {
      message_arena->Own(*auto_parallel);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auto_parallel)) {
      ::tensorflow::AutoParallelOptions* new_auto_parallel = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
            message_arena);
      new_auto_parallel->CopyFrom(**auto_parallel);
      *auto_parallel = new_auto_parallel;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_auto_parallel(
    ::tensorflow::AutoParallelOptions* auto_parallel) {
  if (GetArenaNoVirtual() == NULL) {
    delete auto_parallel_;
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}
void RewriterConfig::_slow_mutable_scoped_allocator_opts() {
  scoped_allocator_opts_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::ScopedAllocatorOptions >(
      GetArenaNoVirtual());
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::_slow_release_scoped_allocator_opts() {
  if (scoped_allocator_opts_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::ScopedAllocatorOptions* temp = new ::tensorflow::ScopedAllocatorOptions(*scoped_allocator_opts_);
    scoped_allocator_opts_ = NULL;
    return temp;
  }
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::unsafe_arena_release_scoped_allocator_opts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.scoped_allocator_opts)
  
  ::tensorflow::ScopedAllocatorOptions* temp = scoped_allocator_opts_;
  scoped_allocator_opts_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_scoped_allocator_opts(
    ::google::protobuf::Arena* message_arena, ::tensorflow::ScopedAllocatorOptions** scoped_allocator_opts) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*scoped_allocator_opts) == NULL) {
      message_arena->Own(*scoped_allocator_opts);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*scoped_allocator_opts)) {
      ::tensorflow::ScopedAllocatorOptions* new_scoped_allocator_opts = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::ScopedAllocatorOptions >(
            message_arena);
      new_scoped_allocator_opts->CopyFrom(**scoped_allocator_opts);
      *scoped_allocator_opts = new_scoped_allocator_opts;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_scoped_allocator_opts(
    ::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts) {
  if (GetArenaNoVirtual() == NULL) {
    delete scoped_allocator_opts_;
  }
  scoped_allocator_opts_ = scoped_allocator_opts;
  if (scoped_allocator_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig::kLayoutOptimizerFieldNumber;
const int RewriterConfig::kConstantFoldingFieldNumber;
const int RewriterConfig::kShapeOptimizationFieldNumber;
const int RewriterConfig::kRemappingFieldNumber;
const int RewriterConfig::kArithmeticOptimizationFieldNumber;
const int RewriterConfig::kDependencyOptimizationFieldNumber;
const int RewriterConfig::kLoopOptimizationFieldNumber;
const int RewriterConfig::kFunctionOptimizationFieldNumber;
const int RewriterConfig::kDebugStripperFieldNumber;
const int RewriterConfig::kDisableModelPruningFieldNumber;
const int RewriterConfig::kScopedAllocatorOptimizationFieldNumber;
const int RewriterConfig::kMetaOptimizerIterationsFieldNumber;
const int RewriterConfig::kMemoryOptimizationFieldNumber;
const int RewriterConfig::kMemoryOptimizerTargetNodeNameScopeFieldNumber;
const int RewriterConfig::kAutoParallelFieldNumber;
const int RewriterConfig::kScopedAllocatorOptsFieldNumber;
const int RewriterConfig::kOptimizersFieldNumber;
const int RewriterConfig::kCustomOptimizersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig::RewriterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  optimizers_(arena),
  custom_optimizers_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(const RewriterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      optimizers_(from.optimizers_),
      custom_optimizers_(from.custom_optimizers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.memory_optimizer_target_node_name_scope().size() > 0) {
    memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_optimizer_target_node_name_scope(),
      GetArenaNoVirtual());
  }
  if (from.has_auto_parallel()) {
    auto_parallel_ = new ::tensorflow::AutoParallelOptions(*from.auto_parallel_);
  } else {
    auto_parallel_ = NULL;
  }
  if (from.has_scoped_allocator_opts()) {
    scoped_allocator_opts_ = new ::tensorflow::ScopedAllocatorOptions(*from.scoped_allocator_opts_);
  } else {
    scoped_allocator_opts_ = NULL;
  }
  ::memcpy(&layout_optimizer_, &from.layout_optimizer_,
    static_cast<size_t>(reinterpret_cast<char*>(&scoped_allocator_optimization_) -
    reinterpret_cast<char*>(&layout_optimizer_)) + sizeof(scoped_allocator_optimization_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::SharedCtor() {
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_parallel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scoped_allocator_optimization_) -
      reinterpret_cast<char*>(&auto_parallel_)) + sizeof(scoped_allocator_optimization_));
  _cached_size_ = 0;
}

RewriterConfig::~RewriterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig)
  SharedDtor();
}

void RewriterConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  memory_optimizer_target_node_name_scope_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete auto_parallel_;
  if (this != internal_default_instance()) delete scoped_allocator_opts_;
}

void RewriterConfig::ArenaDtor(void* object) {
  RewriterConfig* _this = reinterpret_cast< RewriterConfig* >(object);
  (void)_this;
}
void RewriterConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RewriterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriterConfig::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RewriterConfig& RewriterConfig::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

RewriterConfig* RewriterConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RewriterConfig>(arena);
}

void RewriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optimizers_.Clear();
  custom_optimizers_.Clear();
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) {
    delete auto_parallel_;
  }
  auto_parallel_ = NULL;
  if (GetArenaNoVirtual() == NULL && scoped_allocator_opts_ != NULL) {
    delete scoped_allocator_opts_;
  }
  scoped_allocator_opts_ = NULL;
  ::memset(&layout_optimizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scoped_allocator_optimization_) -
      reinterpret_cast<char*>(&layout_optimizer_)) + sizeof(scoped_allocator_optimization_));
  _internal_metadata_.Clear();
}

bool RewriterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_layout_optimizer(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_model_pruning = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_model_pruning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constant_folding(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_memory_optimization(static_cast< ::tensorflow::RewriterConfig_MemOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_parallel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memory_optimizer_target_node_name_scope = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory_optimizer_target_node_name_scope()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->memory_optimizer_target_node_name_scope().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_arithmetic_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dependency_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_function_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_debug_stripper(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_meta_optimizer_iterations(static_cast< ::tensorflow::RewriterConfig_NumIterationsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle remapping = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_remapping(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scoped_allocator_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scoped_allocator_opts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string optimizers = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optimizers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizers(this->optimizers_size() - 1).data(),
            static_cast<int>(this->optimizers(this->optimizers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.optimizers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 1602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_custom_optimizers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig)
  return false;
#undef DO_
}

void RewriterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->layout_optimizer(), output);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_model_pruning(), output);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->constant_folding(), output);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->memory_optimization(), output);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->auto_parallel_, output);
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->memory_optimizer_target_node_name_scope().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->memory_optimizer_target_node_name_scope(), output);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->arithmetic_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->dependency_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->loop_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->function_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->debug_stripper(), output);
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->meta_optimizer_iterations(), output);
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->shape_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->remapping(), output);
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->scoped_allocator_optimization(), output);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->scoped_allocator_opts_, output);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), static_cast<int>(this->optimizers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->optimizers(i), output);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_optimizers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->custom_optimizers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig)
}

::google::protobuf::uint8* RewriterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->layout_optimizer(), target);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_model_pruning(), target);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->constant_folding(), target);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->memory_optimization(), target);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->auto_parallel_, deterministic, target);
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->memory_optimizer_target_node_name_scope().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->memory_optimizer_target_node_name_scope(), target);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->arithmetic_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->dependency_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->loop_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->function_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->debug_stripper(), target);
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->meta_optimizer_iterations(), target);
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->shape_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->remapping(), target);
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->scoped_allocator_optimization(), target);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->scoped_allocator_opts_, deterministic, target);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), static_cast<int>(this->optimizers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->optimizers(i), target);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_optimizers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        200, this->custom_optimizers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig)
  return target;
}

size_t RewriterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string optimizers = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->optimizers_size());
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optimizers(i));
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_optimizers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custom_optimizers(static_cast<int>(i)));
    }
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memory_optimizer_target_node_name_scope());
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auto_parallel_);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scoped_allocator_opts_);
  }

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->layout_optimizer());
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constant_folding());
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->memory_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->arithmetic_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dependency_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->function_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->debug_stripper());
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->meta_optimizer_iterations());
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->remapping());
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scoped_allocator_optimization());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RewriterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig)
    MergeFrom(*source);
  }
}

void RewriterConfig::MergeFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optimizers_.MergeFrom(from.optimizers_);
  custom_optimizers_.MergeFrom(from.custom_optimizers_);
  if (from.memory_optimizer_target_node_name_scope().size() > 0) {
    set_memory_optimizer_target_node_name_scope(from.memory_optimizer_target_node_name_scope());
  }
  if (from.has_auto_parallel()) {
    mutable_auto_parallel()->::tensorflow::AutoParallelOptions::MergeFrom(from.auto_parallel());
  }
  if (from.has_scoped_allocator_opts()) {
    mutable_scoped_allocator_opts()->::tensorflow::ScopedAllocatorOptions::MergeFrom(from.scoped_allocator_opts());
  }
  if (from.layout_optimizer() != 0) {
    set_layout_optimizer(from.layout_optimizer());
  }
  if (from.disable_model_pruning() != 0) {
    set_disable_model_pruning(from.disable_model_pruning());
  }
  if (from.constant_folding() != 0) {
    set_constant_folding(from.constant_folding());
  }
  if (from.memory_optimization() != 0) {
    set_memory_optimization(from.memory_optimization());
  }
  if (from.arithmetic_optimization() != 0) {
    set_arithmetic_optimization(from.arithmetic_optimization());
  }
  if (from.dependency_optimization() != 0) {
    set_dependency_optimization(from.dependency_optimization());
  }
  if (from.loop_optimization() != 0) {
    set_loop_optimization(from.loop_optimization());
  }
  if (from.function_optimization() != 0) {
    set_function_optimization(from.function_optimization());
  }
  if (from.debug_stripper() != 0) {
    set_debug_stripper(from.debug_stripper());
  }
  if (from.meta_optimizer_iterations() != 0) {
    set_meta_optimizer_iterations(from.meta_optimizer_iterations());
  }
  if (from.shape_optimization() != 0) {
    set_shape_optimization(from.shape_optimization());
  }
  if (from.remapping() != 0) {
    set_remapping(from.remapping());
  }
  if (from.scoped_allocator_optimization() != 0) {
    set_scoped_allocator_optimization(from.scoped_allocator_optimization());
  }
}

void RewriterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig::CopyFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig::IsInitialized() const {
  return true;
}

void RewriterConfig::Swap(RewriterConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RewriterConfig::UnsafeArenaSwap(RewriterConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig::InternalSwap(RewriterConfig* other) {
  using std::swap;
  optimizers_.InternalSwap(&other->optimizers_);
  custom_optimizers_.InternalSwap(&other->custom_optimizers_);
  memory_optimizer_target_node_name_scope_.Swap(&other->memory_optimizer_target_node_name_scope_);
  swap(auto_parallel_, other->auto_parallel_);
  swap(scoped_allocator_opts_, other->scoped_allocator_opts_);
  swap(layout_optimizer_, other->layout_optimizer_);
  swap(disable_model_pruning_, other->disable_model_pruning_);
  swap(constant_folding_, other->constant_folding_);
  swap(memory_optimization_, other->memory_optimization_);
  swap(arithmetic_optimization_, other->arithmetic_optimization_);
  swap(dependency_optimization_, other->dependency_optimization_);
  swap(loop_optimization_, other->loop_optimization_);
  swap(function_optimization_, other->function_optimization_);
  swap(debug_stripper_, other->debug_stripper_);
  swap(meta_optimizer_iterations_, other->meta_optimizer_iterations_);
  swap(shape_optimization_, other->shape_optimization_);
  swap(remapping_, other->remapping_);
  swap(scoped_allocator_optimization_, other->scoped_allocator_optimization_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewriterConfig::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterConfig

// .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
void RewriterConfig::clear_layout_optimizer() {
  layout_optimizer_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::layout_optimizer() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.layout_optimizer)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(layout_optimizer_);
}
void RewriterConfig::set_layout_optimizer(::tensorflow::RewriterConfig_Toggle value) {
  
  layout_optimizer_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.layout_optimizer)
}

// .tensorflow.RewriterConfig.Toggle constant_folding = 3;
void RewriterConfig::clear_constant_folding() {
  constant_folding_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.constant_folding)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(constant_folding_);
}
void RewriterConfig::set_constant_folding(::tensorflow::RewriterConfig_Toggle value) {
  
  constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.constant_folding)
}

// .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
void RewriterConfig::clear_shape_optimization() {
  shape_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::shape_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.shape_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(shape_optimization_);
}
void RewriterConfig::set_shape_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  shape_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.shape_optimization)
}

// .tensorflow.RewriterConfig.Toggle remapping = 14;
void RewriterConfig::clear_remapping() {
  remapping_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::remapping() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.remapping)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(remapping_);
}
void RewriterConfig::set_remapping(::tensorflow::RewriterConfig_Toggle value) {
  
  remapping_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.remapping)
}

// .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
void RewriterConfig::clear_arithmetic_optimization() {
  arithmetic_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::arithmetic_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.arithmetic_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(arithmetic_optimization_);
}
void RewriterConfig::set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  arithmetic_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.arithmetic_optimization)
}

// .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
void RewriterConfig::clear_dependency_optimization() {
  dependency_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::dependency_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.dependency_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(dependency_optimization_);
}
void RewriterConfig::set_dependency_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  dependency_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.dependency_optimization)
}

// .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
void RewriterConfig::clear_loop_optimization() {
  loop_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::loop_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.loop_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(loop_optimization_);
}
void RewriterConfig::set_loop_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  loop_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.loop_optimization)
}

// .tensorflow.RewriterConfig.Toggle function_optimization = 10;
void RewriterConfig::clear_function_optimization() {
  function_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::function_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.function_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(function_optimization_);
}
void RewriterConfig::set_function_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  function_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.function_optimization)
}

// .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
void RewriterConfig::clear_debug_stripper() {
  debug_stripper_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::debug_stripper() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.debug_stripper)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(debug_stripper_);
}
void RewriterConfig::set_debug_stripper(::tensorflow::RewriterConfig_Toggle value) {
  
  debug_stripper_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.debug_stripper)
}

// bool disable_model_pruning = 2;
void RewriterConfig::clear_disable_model_pruning() {
  disable_model_pruning_ = false;
}
bool RewriterConfig::disable_model_pruning() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_model_pruning)
  return disable_model_pruning_;
}
void RewriterConfig::set_disable_model_pruning(bool value) {
  
  disable_model_pruning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_model_pruning)
}

// .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
void RewriterConfig::clear_scoped_allocator_optimization() {
  scoped_allocator_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::scoped_allocator_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(scoped_allocator_optimization_);
}
void RewriterConfig::set_scoped_allocator_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  scoped_allocator_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.scoped_allocator_optimization)
}

// .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
void RewriterConfig::clear_meta_optimizer_iterations() {
  meta_optimizer_iterations_ = 0;
}
::tensorflow::RewriterConfig_NumIterationsType RewriterConfig::meta_optimizer_iterations() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.meta_optimizer_iterations)
  return static_cast< ::tensorflow::RewriterConfig_NumIterationsType >(meta_optimizer_iterations_);
}
void RewriterConfig::set_meta_optimizer_iterations(::tensorflow::RewriterConfig_NumIterationsType value) {
  
  meta_optimizer_iterations_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.meta_optimizer_iterations)
}

// .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
void RewriterConfig::clear_memory_optimization() {
  memory_optimization_ = 0;
}
::tensorflow::RewriterConfig_MemOptType RewriterConfig::memory_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimization)
  return static_cast< ::tensorflow::RewriterConfig_MemOptType >(memory_optimization_);
}
void RewriterConfig::set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  
  memory_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimization)
}

// string memory_optimizer_target_node_name_scope = 6;
void RewriterConfig::clear_memory_optimizer_target_node_name_scope() {
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RewriterConfig::memory_optimizer_target_node_name_scope() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return memory_optimizer_target_node_name_scope_.Get();
}
void RewriterConfig::set_memory_optimizer_target_node_name_scope(const ::std::string& value) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
#if LANG_CXX11
void RewriterConfig::set_memory_optimizer_target_node_name_scope(::std::string&& value) {
  
  memory_optimizer_target_node_name_scope_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
#endif
void RewriterConfig::set_memory_optimizer_target_node_name_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
void RewriterConfig::set_memory_optimizer_target_node_name_scope(const char* value,
    size_t size) {
  
  memory_optimizer_target_node_name_scope_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
::std::string* RewriterConfig::mutable_memory_optimizer_target_node_name_scope() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  return memory_optimizer_target_node_name_scope_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RewriterConfig::release_memory_optimizer_target_node_name_scope() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  
  return memory_optimizer_target_node_name_scope_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RewriterConfig::unsafe_arena_release_memory_optimizer_target_node_name_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return memory_optimizer_target_node_name_scope_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RewriterConfig::set_allocated_memory_optimizer_target_node_name_scope(::std::string* memory_optimizer_target_node_name_scope) {
  if (memory_optimizer_target_node_name_scope != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_scope_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory_optimizer_target_node_name_scope,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}
void RewriterConfig::unsafe_arena_set_allocated_memory_optimizer_target_node_name_scope(
    ::std::string* memory_optimizer_target_node_name_scope) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (memory_optimizer_target_node_name_scope != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_scope_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      memory_optimizer_target_node_name_scope, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope)
}

// .tensorflow.AutoParallelOptions auto_parallel = 5;
bool RewriterConfig::has_auto_parallel() const {
  return this != internal_default_instance() && auto_parallel_ != NULL;
}
void RewriterConfig::clear_auto_parallel() {
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;
}
const ::tensorflow::AutoParallelOptions& RewriterConfig::auto_parallel() const {
  const ::tensorflow::AutoParallelOptions* p = auto_parallel_;
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_parallel)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::AutoParallelOptions*>(
      &::tensorflow::_AutoParallelOptions_default_instance_);
}
::tensorflow::AutoParallelOptions* RewriterConfig::mutable_auto_parallel() {
  
  if (auto_parallel_ == NULL) {
    _slow_mutable_auto_parallel();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_;
}
::tensorflow::AutoParallelOptions* RewriterConfig::release_auto_parallel() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.auto_parallel)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auto_parallel();
  } else {
    ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
    auto_parallel_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* auto_parallel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auto_parallel_;
  }
  if (auto_parallel != NULL) {
    _slow_set_allocated_auto_parallel(message_arena, &auto_parallel);
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}

// .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
bool RewriterConfig::has_scoped_allocator_opts() const {
  return this != internal_default_instance() && scoped_allocator_opts_ != NULL;
}
void RewriterConfig::clear_scoped_allocator_opts() {
  if (GetArenaNoVirtual() == NULL && scoped_allocator_opts_ != NULL) delete scoped_allocator_opts_;
  scoped_allocator_opts_ = NULL;
}
const ::tensorflow::ScopedAllocatorOptions& RewriterConfig::scoped_allocator_opts() const {
  const ::tensorflow::ScopedAllocatorOptions* p = scoped_allocator_opts_;
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.scoped_allocator_opts)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::ScopedAllocatorOptions*>(
      &::tensorflow::_ScopedAllocatorOptions_default_instance_);
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::mutable_scoped_allocator_opts() {
  
  if (scoped_allocator_opts_ == NULL) {
    _slow_mutable_scoped_allocator_opts();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.scoped_allocator_opts)
  return scoped_allocator_opts_;
}
::tensorflow::ScopedAllocatorOptions* RewriterConfig::release_scoped_allocator_opts() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.scoped_allocator_opts)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_scoped_allocator_opts();
  } else {
    ::tensorflow::ScopedAllocatorOptions* temp = scoped_allocator_opts_;
    scoped_allocator_opts_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_scoped_allocator_opts(::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scoped_allocator_opts_;
  }
  if (scoped_allocator_opts != NULL) {
    _slow_set_allocated_scoped_allocator_opts(message_arena, &scoped_allocator_opts);
  }
  scoped_allocator_opts_ = scoped_allocator_opts;
  if (scoped_allocator_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}

// repeated string optimizers = 100;
int RewriterConfig::optimizers_size() const {
  return optimizers_.size();
}
void RewriterConfig::clear_optimizers() {
  optimizers_.Clear();
}
const ::std::string& RewriterConfig::optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Get(index);
}
::std::string* RewriterConfig::mutable_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Mutable(index);
}
void RewriterConfig::set_optimizers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RewriterConfig::set_optimizers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(std::move(value));
}
#endif
void RewriterConfig::set_optimizers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  optimizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::set_optimizers(int index, const char* value, size_t size) {
  optimizers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.optimizers)
}
::std::string* RewriterConfig::add_optimizers() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Add();
}
void RewriterConfig::add_optimizers(const ::std::string& value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
#if LANG_CXX11
void RewriterConfig::add_optimizers(::std::string&& value) {
  optimizers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
#endif
void RewriterConfig::add_optimizers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::add_optimizers(const char* value, size_t size) {
  optimizers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RewriterConfig.optimizers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RewriterConfig::optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.optimizers)
  return optimizers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RewriterConfig::mutable_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.optimizers)
  return &optimizers_;
}

// repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
int RewriterConfig::custom_optimizers_size() const {
  return custom_optimizers_.size();
}
void RewriterConfig::clear_custom_optimizers() {
  custom_optimizers_.Clear();
}
const ::tensorflow::RewriterConfig_CustomGraphOptimizer& RewriterConfig::custom_optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Get(index);
}
::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::mutable_custom_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Mutable(index);
}
::tensorflow::RewriterConfig_CustomGraphOptimizer* RewriterConfig::add_custom_optimizers() {
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >*
RewriterConfig::mutable_custom_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.custom_optimizers)
  return &custom_optimizers_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::RewriterConfig_CustomGraphOptimizer >&
RewriterConfig::custom_optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.custom_optimizers)
  return custom_optimizers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
