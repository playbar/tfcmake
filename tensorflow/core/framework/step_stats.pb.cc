// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/step_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/step_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class AllocationRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AllocationRecord>
     _instance;
} _AllocationRecord_default_instance_;
class AllocatorMemoryUsedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AllocatorMemoryUsed>
     _instance;
} _AllocatorMemoryUsed_default_instance_;
class NodeOutputDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeOutput>
     _instance;
} _NodeOutput_default_instance_;
class MemoryStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MemoryStats>
     _instance;
} _MemoryStats_default_instance_;
class NodeExecStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeExecStats>
     _instance;
} _NodeExecStats_default_instance_;
class DeviceStepStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceStepStats>
     _instance;
} _DeviceStepStats_default_instance_;
class StepStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StepStats>
     _instance;
} _StepStats_default_instance_;

namespace protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationRecord, alloc_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocationRecord, alloc_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, allocator_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, total_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, peak_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, live_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, allocation_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, allocator_bytes_in_use_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, tensor_description_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, temp_memory_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, persistent_memory_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, persistent_tensor_alloc_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, device_temp_memory_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, device_persistent_memory_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryStats, device_persistent_tensor_alloc_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, all_start_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, op_start_rel_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, op_end_rel_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, all_end_rel_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, timeline_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, scheduled_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, referenced_tensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, memory_stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, node_stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepStats, dev_stats_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AllocationRecord)},
  { 7, -1, sizeof(AllocatorMemoryUsed)},
  { 18, -1, sizeof(NodeOutput)},
  { 25, -1, sizeof(MemoryStats)},
  { 36, -1, sizeof(NodeExecStats)},
  { 53, -1, sizeof(DeviceStepStats)},
  { 60, -1, sizeof(StepStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AllocationRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AllocatorMemoryUsed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemoryStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeExecStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceStepStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StepStats_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/framework/step_stats.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto::InitDefaults();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto::InitDefaults();
  _AllocationRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AllocationRecord_default_instance_);_AllocatorMemoryUsed_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AllocatorMemoryUsed_default_instance_);_NodeOutput_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeOutput_default_instance_);_MemoryStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MemoryStats_default_instance_);_NodeExecStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeExecStats_default_instance_);_DeviceStepStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceStepStats_default_instance_);_StepStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StepStats_default_instance_);_NodeOutput_default_instance_._instance.get_mutable()->tensor_description_ = const_cast< ::tensorflow::TensorDescription*>(
      ::tensorflow::TensorDescription::internal_default_instance());
  _NodeExecStats_default_instance_._instance.get_mutable()->memory_stats_ = const_cast< ::tensorflow::MemoryStats*>(
      ::tensorflow::MemoryStats::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*tensorflow/core/framework/step_stats.p"
      "roto\022\ntensorflow\0326tensorflow/core/framew"
      "ork/allocation_description.proto\0322tensor"
      "flow/core/framework/tensor_description.p"
      "roto\"=\n\020AllocationRecord\022\024\n\014alloc_micros"
      "\030\001 \001(\003\022\023\n\013alloc_bytes\030\002 \001(\003\"\304\001\n\023Allocato"
      "rMemoryUsed\022\026\n\016allocator_name\030\001 \001(\t\022\023\n\013t"
      "otal_bytes\030\002 \001(\003\022\022\n\npeak_bytes\030\003 \001(\003\022\022\n\n"
      "live_bytes\030\004 \001(\003\0228\n\022allocation_records\030\006"
      " \003(\0132\034.tensorflow.AllocationRecord\022\036\n\026al"
      "locator_bytes_in_use\030\005 \001(\003\"U\n\nNodeOutput"
      "\022\014\n\004slot\030\001 \001(\005\0229\n\022tensor_description\030\003 \001"
      "(\0132\035.tensorflow.TensorDescription\"\354\001\n\013Me"
      "moryStats\022\030\n\020temp_memory_size\030\001 \001(\003\022\036\n\026p"
      "ersistent_memory_size\030\003 \001(\003\022#\n\033persisten"
      "t_tensor_alloc_ids\030\005 \003(\003\022#\n\027device_temp_"
      "memory_size\030\002 \001(\003B\002\030\001\022)\n\035device_persiste"
      "nt_memory_size\030\004 \001(\003B\002\030\001\022.\n\"device_persi"
      "stent_tensor_alloc_ids\030\006 \003(\003B\002\030\001\"\233\003\n\rNod"
      "eExecStats\022\021\n\tnode_name\030\001 \001(\t\022\030\n\020all_sta"
      "rt_micros\030\002 \001(\003\022\033\n\023op_start_rel_micros\030\003"
      " \001(\003\022\031\n\021op_end_rel_micros\030\004 \001(\003\022\032\n\022all_e"
      "nd_rel_micros\030\005 \001(\003\022/\n\006memory\030\006 \003(\0132\037.te"
      "nsorflow.AllocatorMemoryUsed\022&\n\006output\030\007"
      " \003(\0132\026.tensorflow.NodeOutput\022\026\n\016timeline"
      "_label\030\010 \001(\t\022\030\n\020scheduled_micros\030\t \001(\003\022\021"
      "\n\tthread_id\030\n \001(\r\022<\n\021referenced_tensor\030\013"
      " \003(\0132!.tensorflow.AllocationDescription\022"
      "-\n\014memory_stats\030\014 \001(\0132\027.tensorflow.Memor"
      "yStats\"P\n\017DeviceStepStats\022\016\n\006device\030\001 \001("
      "\t\022-\n\nnode_stats\030\002 \003(\0132\031.tensorflow.NodeE"
      "xecStats\";\n\tStepStats\022.\n\tdev_stats\030\001 \003(\013"
      "2\033.tensorflow.DeviceStepStatsBo\n\030org.ten"
      "sorflow.frameworkB\017StepStatsProtosP\001Z=gi"
      "thub.com/tensorflow/tensorflow/tensorflo"
      "w/go/core/framework\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/step_stats.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto::AddDescriptors();
  ::tensorflow::protobuf_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocationRecord::kAllocMicrosFieldNumber;
const int AllocationRecord::kAllocBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocationRecord::AllocationRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AllocationRecord)
}
AllocationRecord::AllocationRecord(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AllocationRecord)
}
AllocationRecord::AllocationRecord(const AllocationRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alloc_micros_, &from.alloc_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&alloc_bytes_) -
    reinterpret_cast<char*>(&alloc_micros_)) + sizeof(alloc_bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AllocationRecord)
}

void AllocationRecord::SharedCtor() {
  ::memset(&alloc_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alloc_bytes_) -
      reinterpret_cast<char*>(&alloc_micros_)) + sizeof(alloc_bytes_));
  _cached_size_ = 0;
}

AllocationRecord::~AllocationRecord() {
  // @@protoc_insertion_point(destructor:tensorflow.AllocationRecord)
  SharedDtor();
}

void AllocationRecord::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void AllocationRecord::ArenaDtor(void* object) {
  AllocationRecord* _this = reinterpret_cast< AllocationRecord* >(object);
  (void)_this;
}
void AllocationRecord::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AllocationRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocationRecord::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocationRecord& AllocationRecord::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

AllocationRecord* AllocationRecord::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AllocationRecord>(arena);
}

void AllocationRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AllocationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&alloc_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alloc_bytes_) -
      reinterpret_cast<char*>(&alloc_micros_)) + sizeof(alloc_bytes_));
  _internal_metadata_.Clear();
}

bool AllocationRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AllocationRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 alloc_micros = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alloc_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 alloc_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alloc_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AllocationRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AllocationRecord)
  return false;
#undef DO_
}

void AllocationRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AllocationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 alloc_micros = 1;
  if (this->alloc_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->alloc_micros(), output);
  }

  // int64 alloc_bytes = 2;
  if (this->alloc_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->alloc_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.AllocationRecord)
}

::google::protobuf::uint8* AllocationRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AllocationRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 alloc_micros = 1;
  if (this->alloc_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->alloc_micros(), target);
  }

  // int64 alloc_bytes = 2;
  if (this->alloc_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->alloc_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AllocationRecord)
  return target;
}

size_t AllocationRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AllocationRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 alloc_micros = 1;
  if (this->alloc_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->alloc_micros());
  }

  // int64 alloc_bytes = 2;
  if (this->alloc_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->alloc_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocationRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AllocationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocationRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocationRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AllocationRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AllocationRecord)
    MergeFrom(*source);
  }
}

void AllocationRecord::MergeFrom(const AllocationRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AllocationRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alloc_micros() != 0) {
    set_alloc_micros(from.alloc_micros());
  }
  if (from.alloc_bytes() != 0) {
    set_alloc_bytes(from.alloc_bytes());
  }
}

void AllocationRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AllocationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocationRecord::CopyFrom(const AllocationRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AllocationRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocationRecord::IsInitialized() const {
  return true;
}

void AllocationRecord::Swap(AllocationRecord* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AllocationRecord* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AllocationRecord::UnsafeArenaSwap(AllocationRecord* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AllocationRecord::InternalSwap(AllocationRecord* other) {
  using std::swap;
  swap(alloc_micros_, other->alloc_micros_);
  swap(alloc_bytes_, other->alloc_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocationRecord::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocationRecord

// int64 alloc_micros = 1;
void AllocationRecord::clear_alloc_micros() {
  alloc_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AllocationRecord::alloc_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationRecord.alloc_micros)
  return alloc_micros_;
}
void AllocationRecord::set_alloc_micros(::google::protobuf::int64 value) {
  
  alloc_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationRecord.alloc_micros)
}

// int64 alloc_bytes = 2;
void AllocationRecord::clear_alloc_bytes() {
  alloc_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AllocationRecord::alloc_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocationRecord.alloc_bytes)
  return alloc_bytes_;
}
void AllocationRecord::set_alloc_bytes(::google::protobuf::int64 value) {
  
  alloc_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocationRecord.alloc_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocatorMemoryUsed::kAllocatorNameFieldNumber;
const int AllocatorMemoryUsed::kTotalBytesFieldNumber;
const int AllocatorMemoryUsed::kPeakBytesFieldNumber;
const int AllocatorMemoryUsed::kLiveBytesFieldNumber;
const int AllocatorMemoryUsed::kAllocationRecordsFieldNumber;
const int AllocatorMemoryUsed::kAllocatorBytesInUseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocatorMemoryUsed::AllocatorMemoryUsed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AllocatorMemoryUsed)
}
AllocatorMemoryUsed::AllocatorMemoryUsed(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  allocation_records_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AllocatorMemoryUsed)
}
AllocatorMemoryUsed::AllocatorMemoryUsed(const AllocatorMemoryUsed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allocation_records_(from.allocation_records_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&total_bytes_, &from.total_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocator_bytes_in_use_) -
    reinterpret_cast<char*>(&total_bytes_)) + sizeof(allocator_bytes_in_use_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AllocatorMemoryUsed)
}

void AllocatorMemoryUsed::SharedCtor() {
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocator_bytes_in_use_) -
      reinterpret_cast<char*>(&total_bytes_)) + sizeof(allocator_bytes_in_use_));
  _cached_size_ = 0;
}

AllocatorMemoryUsed::~AllocatorMemoryUsed() {
  // @@protoc_insertion_point(destructor:tensorflow.AllocatorMemoryUsed)
  SharedDtor();
}

void AllocatorMemoryUsed::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  allocator_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AllocatorMemoryUsed::ArenaDtor(void* object) {
  AllocatorMemoryUsed* _this = reinterpret_cast< AllocatorMemoryUsed* >(object);
  (void)_this;
}
void AllocatorMemoryUsed::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AllocatorMemoryUsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocatorMemoryUsed::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocatorMemoryUsed& AllocatorMemoryUsed::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

AllocatorMemoryUsed* AllocatorMemoryUsed::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AllocatorMemoryUsed>(arena);
}

void AllocatorMemoryUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AllocatorMemoryUsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allocation_records_.Clear();
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&total_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocator_bytes_in_use_) -
      reinterpret_cast<char*>(&total_bytes_)) + sizeof(allocator_bytes_in_use_));
  _internal_metadata_.Clear();
}

bool AllocatorMemoryUsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AllocatorMemoryUsed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string allocator_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AllocatorMemoryUsed.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 peak_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 live_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &live_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allocator_bytes_in_use = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocator_bytes_in_use_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.AllocationRecord allocation_records = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocation_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AllocatorMemoryUsed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AllocatorMemoryUsed)
  return false;
#undef DO_
}

void AllocatorMemoryUsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AllocatorMemoryUsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AllocatorMemoryUsed.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->allocator_name(), output);
  }

  // int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_bytes(), output);
  }

  // int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->peak_bytes(), output);
  }

  // int64 live_bytes = 4;
  if (this->live_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->live_bytes(), output);
  }

  // int64 allocator_bytes_in_use = 5;
  if (this->allocator_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->allocator_bytes_in_use(), output);
  }

  // repeated .tensorflow.AllocationRecord allocation_records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allocation_records_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->allocation_records(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.AllocatorMemoryUsed)
}

::google::protobuf::uint8* AllocatorMemoryUsed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AllocatorMemoryUsed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AllocatorMemoryUsed.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->allocator_name(), target);
  }

  // int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_bytes(), target);
  }

  // int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->peak_bytes(), target);
  }

  // int64 live_bytes = 4;
  if (this->live_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->live_bytes(), target);
  }

  // int64 allocator_bytes_in_use = 5;
  if (this->allocator_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->allocator_bytes_in_use(), target);
  }

  // repeated .tensorflow.AllocationRecord allocation_records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allocation_records_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->allocation_records(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AllocatorMemoryUsed)
  return target;
}

size_t AllocatorMemoryUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AllocatorMemoryUsed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.AllocationRecord allocation_records = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->allocation_records_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allocation_records(static_cast<int>(i)));
    }
  }

  // string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes());
  }

  // int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes());
  }

  // int64 live_bytes = 4;
  if (this->live_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->live_bytes());
  }

  // int64 allocator_bytes_in_use = 5;
  if (this->allocator_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->allocator_bytes_in_use());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocatorMemoryUsed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AllocatorMemoryUsed)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocatorMemoryUsed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocatorMemoryUsed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AllocatorMemoryUsed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AllocatorMemoryUsed)
    MergeFrom(*source);
  }
}

void AllocatorMemoryUsed::MergeFrom(const AllocatorMemoryUsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AllocatorMemoryUsed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allocation_records_.MergeFrom(from.allocation_records_);
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.total_bytes() != 0) {
    set_total_bytes(from.total_bytes());
  }
  if (from.peak_bytes() != 0) {
    set_peak_bytes(from.peak_bytes());
  }
  if (from.live_bytes() != 0) {
    set_live_bytes(from.live_bytes());
  }
  if (from.allocator_bytes_in_use() != 0) {
    set_allocator_bytes_in_use(from.allocator_bytes_in_use());
  }
}

void AllocatorMemoryUsed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AllocatorMemoryUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocatorMemoryUsed::CopyFrom(const AllocatorMemoryUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AllocatorMemoryUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocatorMemoryUsed::IsInitialized() const {
  return true;
}

void AllocatorMemoryUsed::Swap(AllocatorMemoryUsed* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AllocatorMemoryUsed* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AllocatorMemoryUsed::UnsafeArenaSwap(AllocatorMemoryUsed* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AllocatorMemoryUsed::InternalSwap(AllocatorMemoryUsed* other) {
  using std::swap;
  allocation_records_.InternalSwap(&other->allocation_records_);
  allocator_name_.Swap(&other->allocator_name_);
  swap(total_bytes_, other->total_bytes_);
  swap(peak_bytes_, other->peak_bytes_);
  swap(live_bytes_, other->live_bytes_);
  swap(allocator_bytes_in_use_, other->allocator_bytes_in_use_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocatorMemoryUsed::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocatorMemoryUsed

// string allocator_name = 1;
void AllocatorMemoryUsed::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AllocatorMemoryUsed::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.allocator_name)
  return allocator_name_.Get();
}
void AllocatorMemoryUsed::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.allocator_name)
}
#if LANG_CXX11
void AllocatorMemoryUsed::set_allocator_name(::std::string&& value) {
  
  allocator_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.AllocatorMemoryUsed.allocator_name)
}
#endif
void AllocatorMemoryUsed::set_allocator_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.AllocatorMemoryUsed.allocator_name)
}
void AllocatorMemoryUsed::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AllocatorMemoryUsed.allocator_name)
}
::std::string* AllocatorMemoryUsed::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AllocatorMemoryUsed.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AllocatorMemoryUsed::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.AllocatorMemoryUsed.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AllocatorMemoryUsed::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.AllocatorMemoryUsed.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AllocatorMemoryUsed::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AllocatorMemoryUsed.allocator_name)
}
void AllocatorMemoryUsed::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.AllocatorMemoryUsed.allocator_name)
}

// int64 total_bytes = 2;
void AllocatorMemoryUsed::clear_total_bytes() {
  total_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AllocatorMemoryUsed::total_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.total_bytes)
  return total_bytes_;
}
void AllocatorMemoryUsed::set_total_bytes(::google::protobuf::int64 value) {
  
  total_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.total_bytes)
}

// int64 peak_bytes = 3;
void AllocatorMemoryUsed::clear_peak_bytes() {
  peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AllocatorMemoryUsed::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.peak_bytes)
  return peak_bytes_;
}
void AllocatorMemoryUsed::set_peak_bytes(::google::protobuf::int64 value) {
  
  peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.peak_bytes)
}

// int64 live_bytes = 4;
void AllocatorMemoryUsed::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AllocatorMemoryUsed::live_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.live_bytes)
  return live_bytes_;
}
void AllocatorMemoryUsed::set_live_bytes(::google::protobuf::int64 value) {
  
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.live_bytes)
}

// repeated .tensorflow.AllocationRecord allocation_records = 6;
int AllocatorMemoryUsed::allocation_records_size() const {
  return allocation_records_.size();
}
void AllocatorMemoryUsed::clear_allocation_records() {
  allocation_records_.Clear();
}
const ::tensorflow::AllocationRecord& AllocatorMemoryUsed::allocation_records(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.allocation_records)
  return allocation_records_.Get(index);
}
::tensorflow::AllocationRecord* AllocatorMemoryUsed::mutable_allocation_records(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.AllocatorMemoryUsed.allocation_records)
  return allocation_records_.Mutable(index);
}
::tensorflow::AllocationRecord* AllocatorMemoryUsed::add_allocation_records() {
  // @@protoc_insertion_point(field_add:tensorflow.AllocatorMemoryUsed.allocation_records)
  return allocation_records_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationRecord >*
AllocatorMemoryUsed::mutable_allocation_records() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.AllocatorMemoryUsed.allocation_records)
  return &allocation_records_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationRecord >&
AllocatorMemoryUsed::allocation_records() const {
  // @@protoc_insertion_point(field_list:tensorflow.AllocatorMemoryUsed.allocation_records)
  return allocation_records_;
}

// int64 allocator_bytes_in_use = 5;
void AllocatorMemoryUsed::clear_allocator_bytes_in_use() {
  allocator_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AllocatorMemoryUsed::allocator_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.allocator_bytes_in_use)
  return allocator_bytes_in_use_;
}
void AllocatorMemoryUsed::set_allocator_bytes_in_use(::google::protobuf::int64 value) {
  
  allocator_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.allocator_bytes_in_use)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NodeOutput::_slow_mutable_tensor_description() {
  tensor_description_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
      GetArenaNoVirtual());
}
::tensorflow::TensorDescription* NodeOutput::_slow_release_tensor_description() {
  if (tensor_description_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorDescription* temp = new ::tensorflow::TensorDescription(*tensor_description_);
    tensor_description_ = NULL;
    return temp;
  }
}
::tensorflow::TensorDescription* NodeOutput::unsafe_arena_release_tensor_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeOutput.tensor_description)
  
  ::tensorflow::TensorDescription* temp = tensor_description_;
  tensor_description_ = NULL;
  return temp;
}
void NodeOutput::_slow_set_allocated_tensor_description(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorDescription** tensor_description) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor_description) == NULL) {
      message_arena->Own(*tensor_description);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor_description)) {
      ::tensorflow::TensorDescription* new_tensor_description = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
            message_arena);
      new_tensor_description->CopyFrom(**tensor_description);
      *tensor_description = new_tensor_description;
    }
}
void NodeOutput::unsafe_arena_set_allocated_tensor_description(
    ::tensorflow::TensorDescription* tensor_description) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_description_;
  }
  tensor_description_ = tensor_description;
  if (tensor_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeOutput.tensor_description)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeOutput::kSlotFieldNumber;
const int NodeOutput::kTensorDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeOutput::NodeOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NodeOutput)
}
NodeOutput::NodeOutput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeOutput)
}
NodeOutput::NodeOutput(const NodeOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_description()) {
    tensor_description_ = new ::tensorflow::TensorDescription(*from.tensor_description_);
  } else {
    tensor_description_ = NULL;
  }
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeOutput)
}

void NodeOutput::SharedCtor() {
  ::memset(&tensor_description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&tensor_description_)) + sizeof(slot_));
  _cached_size_ = 0;
}

NodeOutput::~NodeOutput() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeOutput)
  SharedDtor();
}

void NodeOutput::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete tensor_description_;
}

void NodeOutput::ArenaDtor(void* object) {
  NodeOutput* _this = reinterpret_cast< NodeOutput* >(object);
  (void)_this;
}
void NodeOutput::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeOutput::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeOutput& NodeOutput::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeOutput* NodeOutput::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeOutput>(arena);
}

void NodeOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tensor_description_ != NULL) {
    delete tensor_description_;
  }
  tensor_description_ = NULL;
  slot_ = 0;
  _internal_metadata_.Clear();
}

bool NodeOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NodeOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorDescription tensor_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NodeOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NodeOutput)
  return false;
#undef DO_
}

void NodeOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NodeOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slot = 1;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tensor_description_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.NodeOutput)
}

::google::protobuf::uint8* NodeOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slot = 1;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tensor_description_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeOutput)
  return target;
}

size_t NodeOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeOutput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_description_);
  }

  // int32 slot = 1;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeOutput)
    MergeFrom(*source);
  }
}

void NodeOutput::MergeFrom(const NodeOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor_description()) {
    mutable_tensor_description()->::tensorflow::TensorDescription::MergeFrom(from.tensor_description());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
}

void NodeOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeOutput::CopyFrom(const NodeOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeOutput::IsInitialized() const {
  return true;
}

void NodeOutput::Swap(NodeOutput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeOutput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NodeOutput::UnsafeArenaSwap(NodeOutput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeOutput::InternalSwap(NodeOutput* other) {
  using std::swap;
  swap(tensor_description_, other->tensor_description_);
  swap(slot_, other->slot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeOutput::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeOutput

// int32 slot = 1;
void NodeOutput::clear_slot() {
  slot_ = 0;
}
::google::protobuf::int32 NodeOutput::slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.slot)
  return slot_;
}
void NodeOutput::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeOutput.slot)
}

// .tensorflow.TensorDescription tensor_description = 3;
bool NodeOutput::has_tensor_description() const {
  return this != internal_default_instance() && tensor_description_ != NULL;
}
void NodeOutput::clear_tensor_description() {
  if (GetArenaNoVirtual() == NULL && tensor_description_ != NULL) delete tensor_description_;
  tensor_description_ = NULL;
}
const ::tensorflow::TensorDescription& NodeOutput::tensor_description() const {
  const ::tensorflow::TensorDescription* p = tensor_description_;
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.tensor_description)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::TensorDescription*>(
      &::tensorflow::_TensorDescription_default_instance_);
}
::tensorflow::TensorDescription* NodeOutput::mutable_tensor_description() {
  
  if (tensor_description_ == NULL) {
    _slow_mutable_tensor_description();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeOutput.tensor_description)
  return tensor_description_;
}
::tensorflow::TensorDescription* NodeOutput::release_tensor_description() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeOutput.tensor_description)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor_description();
  } else {
    ::tensorflow::TensorDescription* temp = tensor_description_;
    tensor_description_ = NULL;
    return temp;
  }
}
 void NodeOutput::set_allocated_tensor_description(::tensorflow::TensorDescription* tensor_description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_description_;
  }
  if (tensor_description != NULL) {
    _slow_set_allocated_tensor_description(message_arena, &tensor_description);
  }
  tensor_description_ = tensor_description;
  if (tensor_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeOutput.tensor_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryStats::kTempMemorySizeFieldNumber;
const int MemoryStats::kPersistentMemorySizeFieldNumber;
const int MemoryStats::kPersistentTensorAllocIdsFieldNumber;
const int MemoryStats::kDeviceTempMemorySizeFieldNumber;
const int MemoryStats::kDevicePersistentMemorySizeFieldNumber;
const int MemoryStats::kDevicePersistentTensorAllocIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryStats::MemoryStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryStats)
}
MemoryStats::MemoryStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  persistent_tensor_alloc_ids_(arena),
  device_persistent_tensor_alloc_ids_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryStats)
}
MemoryStats::MemoryStats(const MemoryStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      persistent_tensor_alloc_ids_(from.persistent_tensor_alloc_ids_),
      device_persistent_tensor_alloc_ids_(from.device_persistent_tensor_alloc_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&temp_memory_size_, &from.temp_memory_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_persistent_memory_size_) -
    reinterpret_cast<char*>(&temp_memory_size_)) + sizeof(device_persistent_memory_size_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryStats)
}

void MemoryStats::SharedCtor() {
  ::memset(&temp_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_size_) -
      reinterpret_cast<char*>(&temp_memory_size_)) + sizeof(device_persistent_memory_size_));
  _cached_size_ = 0;
}

MemoryStats::~MemoryStats() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryStats)
  SharedDtor();
}

void MemoryStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void MemoryStats::ArenaDtor(void* object) {
  MemoryStats* _this = reinterpret_cast< MemoryStats* >(object);
  (void)_this;
}
void MemoryStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MemoryStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryStats::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemoryStats& MemoryStats::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemoryStats* MemoryStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MemoryStats>(arena);
}

void MemoryStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persistent_tensor_alloc_ids_.Clear();
  device_persistent_tensor_alloc_ids_.Clear();
  ::memset(&temp_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_size_) -
      reinterpret_cast<char*>(&temp_memory_size_)) + sizeof(device_persistent_memory_size_));
  _internal_metadata_.Clear();
}

bool MemoryStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 temp_memory_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temp_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 device_temp_memory_size = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_temp_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 persistent_memory_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &persistent_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 device_persistent_memory_size = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &device_persistent_memory_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 persistent_tensor_alloc_ids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_persistent_tensor_alloc_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42u, input, this->mutable_persistent_tensor_alloc_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 device_persistent_tensor_alloc_ids = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_device_persistent_tensor_alloc_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 50u, input, this->mutable_device_persistent_tensor_alloc_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryStats)
  return false;
#undef DO_
}

void MemoryStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 temp_memory_size = 1;
  if (this->temp_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->temp_memory_size(), output);
  }

  // int64 device_temp_memory_size = 2 [deprecated = true];
  if (this->device_temp_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->device_temp_memory_size(), output);
  }

  // int64 persistent_memory_size = 3;
  if (this->persistent_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->persistent_memory_size(), output);
  }

  // int64 device_persistent_memory_size = 4 [deprecated = true];
  if (this->device_persistent_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->device_persistent_memory_size(), output);
  }

  // repeated int64 persistent_tensor_alloc_ids = 5;
  if (this->persistent_tensor_alloc_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _persistent_tensor_alloc_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->persistent_tensor_alloc_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->persistent_tensor_alloc_ids(i), output);
  }

  // repeated int64 device_persistent_tensor_alloc_ids = 6 [deprecated = true];
  if (this->device_persistent_tensor_alloc_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _device_persistent_tensor_alloc_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->device_persistent_tensor_alloc_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->device_persistent_tensor_alloc_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryStats)
}

::google::protobuf::uint8* MemoryStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 temp_memory_size = 1;
  if (this->temp_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->temp_memory_size(), target);
  }

  // int64 device_temp_memory_size = 2 [deprecated = true];
  if (this->device_temp_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->device_temp_memory_size(), target);
  }

  // int64 persistent_memory_size = 3;
  if (this->persistent_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->persistent_memory_size(), target);
  }

  // int64 device_persistent_memory_size = 4 [deprecated = true];
  if (this->device_persistent_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->device_persistent_memory_size(), target);
  }

  // repeated int64 persistent_tensor_alloc_ids = 5;
  if (this->persistent_tensor_alloc_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _persistent_tensor_alloc_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->persistent_tensor_alloc_ids_, target);
  }

  // repeated int64 device_persistent_tensor_alloc_ids = 6 [deprecated = true];
  if (this->device_persistent_tensor_alloc_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _device_persistent_tensor_alloc_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->device_persistent_tensor_alloc_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryStats)
  return target;
}

size_t MemoryStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 persistent_tensor_alloc_ids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->persistent_tensor_alloc_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _persistent_tensor_alloc_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 device_persistent_tensor_alloc_ids = 6 [deprecated = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->device_persistent_tensor_alloc_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _device_persistent_tensor_alloc_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 temp_memory_size = 1;
  if (this->temp_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->temp_memory_size());
  }

  // int64 device_temp_memory_size = 2 [deprecated = true];
  if (this->device_temp_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_temp_memory_size());
  }

  // int64 persistent_memory_size = 3;
  if (this->persistent_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->persistent_memory_size());
  }

  // int64 device_persistent_memory_size = 4 [deprecated = true];
  if (this->device_persistent_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->device_persistent_memory_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryStats)
    MergeFrom(*source);
  }
}

void MemoryStats::MergeFrom(const MemoryStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persistent_tensor_alloc_ids_.MergeFrom(from.persistent_tensor_alloc_ids_);
  device_persistent_tensor_alloc_ids_.MergeFrom(from.device_persistent_tensor_alloc_ids_);
  if (from.temp_memory_size() != 0) {
    set_temp_memory_size(from.temp_memory_size());
  }
  if (from.device_temp_memory_size() != 0) {
    set_device_temp_memory_size(from.device_temp_memory_size());
  }
  if (from.persistent_memory_size() != 0) {
    set_persistent_memory_size(from.persistent_memory_size());
  }
  if (from.device_persistent_memory_size() != 0) {
    set_device_persistent_memory_size(from.device_persistent_memory_size());
  }
}

void MemoryStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryStats::CopyFrom(const MemoryStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryStats::IsInitialized() const {
  return true;
}

void MemoryStats::Swap(MemoryStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MemoryStats::UnsafeArenaSwap(MemoryStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryStats::InternalSwap(MemoryStats* other) {
  using std::swap;
  persistent_tensor_alloc_ids_.InternalSwap(&other->persistent_tensor_alloc_ids_);
  device_persistent_tensor_alloc_ids_.InternalSwap(&other->device_persistent_tensor_alloc_ids_);
  swap(temp_memory_size_, other->temp_memory_size_);
  swap(device_temp_memory_size_, other->device_temp_memory_size_);
  swap(persistent_memory_size_, other->persistent_memory_size_);
  swap(device_persistent_memory_size_, other->device_persistent_memory_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryStats::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryStats

// int64 temp_memory_size = 1;
void MemoryStats::clear_temp_memory_size() {
  temp_memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryStats::temp_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryStats.temp_memory_size)
  return temp_memory_size_;
}
void MemoryStats::set_temp_memory_size(::google::protobuf::int64 value) {
  
  temp_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryStats.temp_memory_size)
}

// int64 persistent_memory_size = 3;
void MemoryStats::clear_persistent_memory_size() {
  persistent_memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryStats::persistent_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryStats.persistent_memory_size)
  return persistent_memory_size_;
}
void MemoryStats::set_persistent_memory_size(::google::protobuf::int64 value) {
  
  persistent_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryStats.persistent_memory_size)
}

// repeated int64 persistent_tensor_alloc_ids = 5;
int MemoryStats::persistent_tensor_alloc_ids_size() const {
  return persistent_tensor_alloc_ids_.size();
}
void MemoryStats::clear_persistent_tensor_alloc_ids() {
  persistent_tensor_alloc_ids_.Clear();
}
::google::protobuf::int64 MemoryStats::persistent_tensor_alloc_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryStats.persistent_tensor_alloc_ids)
  return persistent_tensor_alloc_ids_.Get(index);
}
void MemoryStats::set_persistent_tensor_alloc_ids(int index, ::google::protobuf::int64 value) {
  persistent_tensor_alloc_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.MemoryStats.persistent_tensor_alloc_ids)
}
void MemoryStats::add_persistent_tensor_alloc_ids(::google::protobuf::int64 value) {
  persistent_tensor_alloc_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.MemoryStats.persistent_tensor_alloc_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MemoryStats::persistent_tensor_alloc_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryStats.persistent_tensor_alloc_ids)
  return persistent_tensor_alloc_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MemoryStats::mutable_persistent_tensor_alloc_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryStats.persistent_tensor_alloc_ids)
  return &persistent_tensor_alloc_ids_;
}

// int64 device_temp_memory_size = 2 [deprecated = true];
void MemoryStats::clear_device_temp_memory_size() {
  device_temp_memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryStats::device_temp_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryStats.device_temp_memory_size)
  return device_temp_memory_size_;
}
void MemoryStats::set_device_temp_memory_size(::google::protobuf::int64 value) {
  
  device_temp_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryStats.device_temp_memory_size)
}

// int64 device_persistent_memory_size = 4 [deprecated = true];
void MemoryStats::clear_device_persistent_memory_size() {
  device_persistent_memory_size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MemoryStats::device_persistent_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryStats.device_persistent_memory_size)
  return device_persistent_memory_size_;
}
void MemoryStats::set_device_persistent_memory_size(::google::protobuf::int64 value) {
  
  device_persistent_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.MemoryStats.device_persistent_memory_size)
}

// repeated int64 device_persistent_tensor_alloc_ids = 6 [deprecated = true];
int MemoryStats::device_persistent_tensor_alloc_ids_size() const {
  return device_persistent_tensor_alloc_ids_.size();
}
void MemoryStats::clear_device_persistent_tensor_alloc_ids() {
  device_persistent_tensor_alloc_ids_.Clear();
}
::google::protobuf::int64 MemoryStats::device_persistent_tensor_alloc_ids(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.MemoryStats.device_persistent_tensor_alloc_ids)
  return device_persistent_tensor_alloc_ids_.Get(index);
}
void MemoryStats::set_device_persistent_tensor_alloc_ids(int index, ::google::protobuf::int64 value) {
  device_persistent_tensor_alloc_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.MemoryStats.device_persistent_tensor_alloc_ids)
}
void MemoryStats::add_device_persistent_tensor_alloc_ids(::google::protobuf::int64 value) {
  device_persistent_tensor_alloc_ids_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.MemoryStats.device_persistent_tensor_alloc_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MemoryStats::device_persistent_tensor_alloc_ids() const {
  // @@protoc_insertion_point(field_list:tensorflow.MemoryStats.device_persistent_tensor_alloc_ids)
  return device_persistent_tensor_alloc_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MemoryStats::mutable_device_persistent_tensor_alloc_ids() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.MemoryStats.device_persistent_tensor_alloc_ids)
  return &device_persistent_tensor_alloc_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NodeExecStats::_slow_mutable_memory_stats() {
  memory_stats_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::MemoryStats >(
      GetArenaNoVirtual());
}
::tensorflow::MemoryStats* NodeExecStats::_slow_release_memory_stats() {
  if (memory_stats_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::MemoryStats* temp = new ::tensorflow::MemoryStats(*memory_stats_);
    memory_stats_ = NULL;
    return temp;
  }
}
::tensorflow::MemoryStats* NodeExecStats::unsafe_arena_release_memory_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeExecStats.memory_stats)
  
  ::tensorflow::MemoryStats* temp = memory_stats_;
  memory_stats_ = NULL;
  return temp;
}
void NodeExecStats::_slow_set_allocated_memory_stats(
    ::google::protobuf::Arena* message_arena, ::tensorflow::MemoryStats** memory_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*memory_stats) == NULL) {
      message_arena->Own(*memory_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*memory_stats)) {
      ::tensorflow::MemoryStats* new_memory_stats = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::MemoryStats >(
            message_arena);
      new_memory_stats->CopyFrom(**memory_stats);
      *memory_stats = new_memory_stats;
    }
}
void NodeExecStats::unsafe_arena_set_allocated_memory_stats(
    ::tensorflow::MemoryStats* memory_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete memory_stats_;
  }
  memory_stats_ = memory_stats;
  if (memory_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeExecStats.memory_stats)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecStats::kNodeNameFieldNumber;
const int NodeExecStats::kAllStartMicrosFieldNumber;
const int NodeExecStats::kOpStartRelMicrosFieldNumber;
const int NodeExecStats::kOpEndRelMicrosFieldNumber;
const int NodeExecStats::kAllEndRelMicrosFieldNumber;
const int NodeExecStats::kMemoryFieldNumber;
const int NodeExecStats::kOutputFieldNumber;
const int NodeExecStats::kTimelineLabelFieldNumber;
const int NodeExecStats::kScheduledMicrosFieldNumber;
const int NodeExecStats::kThreadIdFieldNumber;
const int NodeExecStats::kReferencedTensorFieldNumber;
const int NodeExecStats::kMemoryStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecStats::NodeExecStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NodeExecStats)
}
NodeExecStats::NodeExecStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  memory_(arena),
  output_(arena),
  referenced_tensor_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeExecStats)
}
NodeExecStats::NodeExecStats(const NodeExecStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      memory_(from.memory_),
      output_(from.output_),
      referenced_tensor_(from.referenced_tensor_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name(),
      GetArenaNoVirtual());
  }
  timeline_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timeline_label().size() > 0) {
    timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timeline_label(),
      GetArenaNoVirtual());
  }
  if (from.has_memory_stats()) {
    memory_stats_ = new ::tensorflow::MemoryStats(*from.memory_stats_);
  } else {
    memory_stats_ = NULL;
  }
  ::memcpy(&all_start_micros_, &from.all_start_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&all_start_micros_)) + sizeof(thread_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeExecStats)
}

void NodeExecStats::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeline_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&memory_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&memory_stats_)) + sizeof(thread_id_));
  _cached_size_ = 0;
}

NodeExecStats::~NodeExecStats() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeExecStats)
  SharedDtor();
}

void NodeExecStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  node_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  timeline_label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete memory_stats_;
}

void NodeExecStats::ArenaDtor(void* object) {
  NodeExecStats* _this = reinterpret_cast< NodeExecStats* >(object);
  (void)_this;
}
void NodeExecStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeExecStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeExecStats::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeExecStats& NodeExecStats::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeExecStats* NodeExecStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeExecStats>(arena);
}

void NodeExecStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeExecStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memory_.Clear();
  output_.Clear();
  referenced_tensor_.Clear();
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  timeline_label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && memory_stats_ != NULL) {
    delete memory_stats_;
  }
  memory_stats_ = NULL;
  ::memset(&all_start_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&all_start_micros_)) + sizeof(thread_id_));
  _internal_metadata_.Clear();
}

bool NodeExecStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NodeExecStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeExecStats.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 all_start_micros = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_start_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 op_start_rel_micros = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_start_rel_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 op_end_rel_micros = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_end_rel_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 all_end_rel_micros = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_end_rel_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.NodeOutput output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timeline_label = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeline_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timeline_label().data(), static_cast<int>(this->timeline_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeExecStats.timeline_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 scheduled_micros = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scheduled_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thread_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_referenced_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.MemoryStats memory_stats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NodeExecStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NodeExecStats)
  return false;
#undef DO_
}

void NodeExecStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NodeExecStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->all_start_micros(), output);
  }

  // int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->op_start_rel_micros(), output);
  }

  // int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->op_end_rel_micros(), output);
  }

  // int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->all_end_rel_micros(), output);
  }

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memory(static_cast<int>(i)), output);
  }

  // repeated .tensorflow.NodeOutput output = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->output(static_cast<int>(i)), output);
  }

  // string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeline_label().data(), static_cast<int>(this->timeline_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.timeline_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->timeline_label(), output);
  }

  // int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->scheduled_micros(), output);
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->thread_id(), output);
  }

  // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->referenced_tensor_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->referenced_tensor(static_cast<int>(i)), output);
  }

  // .tensorflow.MemoryStats memory_stats = 12;
  if (this->has_memory_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->memory_stats_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.NodeExecStats)
}

::google::protobuf::uint8* NodeExecStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeExecStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->all_start_micros(), target);
  }

  // int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->op_start_rel_micros(), target);
  }

  // int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->op_end_rel_micros(), target);
  }

  // int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->all_end_rel_micros(), target);
  }

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->memory(static_cast<int>(i)), deterministic, target);
  }

  // repeated .tensorflow.NodeOutput output = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->output(static_cast<int>(i)), deterministic, target);
  }

  // string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeline_label().data(), static_cast<int>(this->timeline_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.timeline_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timeline_label(), target);
  }

  // int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->scheduled_micros(), target);
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->thread_id(), target);
  }

  // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->referenced_tensor_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->referenced_tensor(static_cast<int>(i)), deterministic, target);
  }

  // .tensorflow.MemoryStats memory_stats = 12;
  if (this->has_memory_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->memory_stats_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeExecStats)
  return target;
}

size_t NodeExecStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeExecStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->memory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.NodeOutput output = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->output_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->referenced_tensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referenced_tensor(static_cast<int>(i)));
    }
  }

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timeline_label());
  }

  // .tensorflow.MemoryStats memory_stats = 12;
  if (this->has_memory_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->memory_stats_);
  }

  // int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->all_start_micros());
  }

  // int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_start_rel_micros());
  }

  // int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_end_rel_micros());
  }

  // int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->all_end_rel_micros());
  }

  // int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scheduled_micros());
  }

  // uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeExecStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeExecStats)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeExecStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeExecStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeExecStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeExecStats)
    MergeFrom(*source);
  }
}

void NodeExecStats::MergeFrom(const NodeExecStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeExecStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memory_.MergeFrom(from.memory_);
  output_.MergeFrom(from.output_);
  referenced_tensor_.MergeFrom(from.referenced_tensor_);
  if (from.node_name().size() > 0) {
    set_node_name(from.node_name());
  }
  if (from.timeline_label().size() > 0) {
    set_timeline_label(from.timeline_label());
  }
  if (from.has_memory_stats()) {
    mutable_memory_stats()->::tensorflow::MemoryStats::MergeFrom(from.memory_stats());
  }
  if (from.all_start_micros() != 0) {
    set_all_start_micros(from.all_start_micros());
  }
  if (from.op_start_rel_micros() != 0) {
    set_op_start_rel_micros(from.op_start_rel_micros());
  }
  if (from.op_end_rel_micros() != 0) {
    set_op_end_rel_micros(from.op_end_rel_micros());
  }
  if (from.all_end_rel_micros() != 0) {
    set_all_end_rel_micros(from.all_end_rel_micros());
  }
  if (from.scheduled_micros() != 0) {
    set_scheduled_micros(from.scheduled_micros());
  }
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void NodeExecStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeExecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecStats::CopyFrom(const NodeExecStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeExecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecStats::IsInitialized() const {
  return true;
}

void NodeExecStats::Swap(NodeExecStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeExecStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NodeExecStats::UnsafeArenaSwap(NodeExecStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeExecStats::InternalSwap(NodeExecStats* other) {
  using std::swap;
  memory_.InternalSwap(&other->memory_);
  output_.InternalSwap(&other->output_);
  referenced_tensor_.InternalSwap(&other->referenced_tensor_);
  node_name_.Swap(&other->node_name_);
  timeline_label_.Swap(&other->timeline_label_);
  swap(memory_stats_, other->memory_stats_);
  swap(all_start_micros_, other->all_start_micros_);
  swap(op_start_rel_micros_, other->op_start_rel_micros_);
  swap(op_end_rel_micros_, other->op_end_rel_micros_);
  swap(all_end_rel_micros_, other->all_end_rel_micros_);
  swap(scheduled_micros_, other->scheduled_micros_);
  swap(thread_id_, other->thread_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeExecStats::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeExecStats

// string node_name = 1;
void NodeExecStats::clear_node_name() {
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NodeExecStats::node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.node_name)
  return node_name_.Get();
}
void NodeExecStats::set_node_name(const ::std::string& value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.node_name)
}
#if LANG_CXX11
void NodeExecStats::set_node_name(::std::string&& value) {
  
  node_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.NodeExecStats.node_name)
}
#endif
void NodeExecStats::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeExecStats.node_name)
}
void NodeExecStats::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeExecStats.node_name)
}
::std::string* NodeExecStats::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.node_name)
  return node_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeExecStats::release_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.node_name)
  
  return node_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeExecStats::unsafe_arena_release_node_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeExecStats.node_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NodeExecStats::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.node_name)
}
void NodeExecStats::unsafe_arena_set_allocated_node_name(
    ::std::string* node_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeExecStats.node_name)
}

// int64 all_start_micros = 2;
void NodeExecStats::clear_all_start_micros() {
  all_start_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeExecStats::all_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.all_start_micros)
  return all_start_micros_;
}
void NodeExecStats::set_all_start_micros(::google::protobuf::int64 value) {
  
  all_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.all_start_micros)
}

// int64 op_start_rel_micros = 3;
void NodeExecStats::clear_op_start_rel_micros() {
  op_start_rel_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeExecStats::op_start_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.op_start_rel_micros)
  return op_start_rel_micros_;
}
void NodeExecStats::set_op_start_rel_micros(::google::protobuf::int64 value) {
  
  op_start_rel_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.op_start_rel_micros)
}

// int64 op_end_rel_micros = 4;
void NodeExecStats::clear_op_end_rel_micros() {
  op_end_rel_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeExecStats::op_end_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.op_end_rel_micros)
  return op_end_rel_micros_;
}
void NodeExecStats::set_op_end_rel_micros(::google::protobuf::int64 value) {
  
  op_end_rel_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.op_end_rel_micros)
}

// int64 all_end_rel_micros = 5;
void NodeExecStats::clear_all_end_rel_micros() {
  all_end_rel_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeExecStats::all_end_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.all_end_rel_micros)
  return all_end_rel_micros_;
}
void NodeExecStats::set_all_end_rel_micros(::google::protobuf::int64 value) {
  
  all_end_rel_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.all_end_rel_micros)
}

// repeated .tensorflow.AllocatorMemoryUsed memory = 6;
int NodeExecStats::memory_size() const {
  return memory_.size();
}
void NodeExecStats::clear_memory() {
  memory_.Clear();
}
const ::tensorflow::AllocatorMemoryUsed& NodeExecStats::memory(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.memory)
  return memory_.Get(index);
}
::tensorflow::AllocatorMemoryUsed* NodeExecStats::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.memory)
  return memory_.Mutable(index);
}
::tensorflow::AllocatorMemoryUsed* NodeExecStats::add_memory() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.memory)
  return memory_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >*
NodeExecStats::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.memory)
  return &memory_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >&
NodeExecStats::memory() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.memory)
  return memory_;
}

// repeated .tensorflow.NodeOutput output = 7;
int NodeExecStats::output_size() const {
  return output_.size();
}
void NodeExecStats::clear_output() {
  output_.Clear();
}
const ::tensorflow::NodeOutput& NodeExecStats::output(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.output)
  return output_.Get(index);
}
::tensorflow::NodeOutput* NodeExecStats::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.output)
  return output_.Mutable(index);
}
::tensorflow::NodeOutput* NodeExecStats::add_output() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.output)
  return output_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NodeOutput >*
NodeExecStats::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.output)
  return &output_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NodeOutput >&
NodeExecStats::output() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.output)
  return output_;
}

// string timeline_label = 8;
void NodeExecStats::clear_timeline_label() {
  timeline_label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NodeExecStats::timeline_label() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.timeline_label)
  return timeline_label_.Get();
}
void NodeExecStats::set_timeline_label(const ::std::string& value) {
  
  timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.timeline_label)
}
#if LANG_CXX11
void NodeExecStats::set_timeline_label(::std::string&& value) {
  
  timeline_label_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.NodeExecStats.timeline_label)
}
#endif
void NodeExecStats::set_timeline_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeExecStats.timeline_label)
}
void NodeExecStats::set_timeline_label(const char* value,
    size_t size) {
  
  timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeExecStats.timeline_label)
}
::std::string* NodeExecStats::mutable_timeline_label() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.timeline_label)
  return timeline_label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeExecStats::release_timeline_label() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.timeline_label)
  
  return timeline_label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeExecStats::unsafe_arena_release_timeline_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeExecStats.timeline_label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return timeline_label_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NodeExecStats::set_allocated_timeline_label(::std::string* timeline_label) {
  if (timeline_label != NULL) {
    
  } else {
    
  }
  timeline_label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeline_label,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.timeline_label)
}
void NodeExecStats::unsafe_arena_set_allocated_timeline_label(
    ::std::string* timeline_label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (timeline_label != NULL) {
    
  } else {
    
  }
  timeline_label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      timeline_label, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeExecStats.timeline_label)
}

// int64 scheduled_micros = 9;
void NodeExecStats::clear_scheduled_micros() {
  scheduled_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeExecStats::scheduled_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.scheduled_micros)
  return scheduled_micros_;
}
void NodeExecStats::set_scheduled_micros(::google::protobuf::int64 value) {
  
  scheduled_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.scheduled_micros)
}

// uint32 thread_id = 10;
void NodeExecStats::clear_thread_id() {
  thread_id_ = 0u;
}
::google::protobuf::uint32 NodeExecStats::thread_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.thread_id)
  return thread_id_;
}
void NodeExecStats::set_thread_id(::google::protobuf::uint32 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.thread_id)
}

// repeated .tensorflow.AllocationDescription referenced_tensor = 11;
int NodeExecStats::referenced_tensor_size() const {
  return referenced_tensor_.size();
}
void NodeExecStats::clear_referenced_tensor() {
  referenced_tensor_.Clear();
}
const ::tensorflow::AllocationDescription& NodeExecStats::referenced_tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_.Get(index);
}
::tensorflow::AllocationDescription* NodeExecStats::mutable_referenced_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_.Mutable(index);
}
::tensorflow::AllocationDescription* NodeExecStats::add_referenced_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationDescription >*
NodeExecStats::mutable_referenced_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.referenced_tensor)
  return &referenced_tensor_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationDescription >&
NodeExecStats::referenced_tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_;
}

// .tensorflow.MemoryStats memory_stats = 12;
bool NodeExecStats::has_memory_stats() const {
  return this != internal_default_instance() && memory_stats_ != NULL;
}
void NodeExecStats::clear_memory_stats() {
  if (GetArenaNoVirtual() == NULL && memory_stats_ != NULL) delete memory_stats_;
  memory_stats_ = NULL;
}
const ::tensorflow::MemoryStats& NodeExecStats::memory_stats() const {
  const ::tensorflow::MemoryStats* p = memory_stats_;
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.memory_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::MemoryStats*>(
      &::tensorflow::_MemoryStats_default_instance_);
}
::tensorflow::MemoryStats* NodeExecStats::mutable_memory_stats() {
  
  if (memory_stats_ == NULL) {
    _slow_mutable_memory_stats();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.memory_stats)
  return memory_stats_;
}
::tensorflow::MemoryStats* NodeExecStats::release_memory_stats() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.memory_stats)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_memory_stats();
  } else {
    ::tensorflow::MemoryStats* temp = memory_stats_;
    memory_stats_ = NULL;
    return temp;
  }
}
 void NodeExecStats::set_allocated_memory_stats(::tensorflow::MemoryStats* memory_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete memory_stats_;
  }
  if (memory_stats != NULL) {
    _slow_set_allocated_memory_stats(message_arena, &memory_stats);
  }
  memory_stats_ = memory_stats;
  if (memory_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.memory_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStepStats::kDeviceFieldNumber;
const int DeviceStepStats::kNodeStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStepStats::DeviceStepStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeviceStepStats)
}
DeviceStepStats::DeviceStepStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_stats_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceStepStats)
}
DeviceStepStats::DeviceStepStats(const DeviceStepStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_stats_(from.node_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device().size() > 0) {
    device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceStepStats)
}

void DeviceStepStats::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeviceStepStats::~DeviceStepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceStepStats)
  SharedDtor();
}

void DeviceStepStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DeviceStepStats::ArenaDtor(void* object) {
  DeviceStepStats* _this = reinterpret_cast< DeviceStepStats* >(object);
  (void)_this;
}
void DeviceStepStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeviceStepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceStepStats::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceStepStats& DeviceStepStats::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStepStats* DeviceStepStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeviceStepStats>(arena);
}

void DeviceStepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceStepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_stats_.Clear();
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeviceStepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeviceStepStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceStepStats.device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.NodeExecStats node_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeviceStepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeviceStepStats)
  return false;
#undef DO_
}

void DeviceStepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeviceStepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceStepStats.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node_stats(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.DeviceStepStats)
}

::google::protobuf::uint8* DeviceStepStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceStepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceStepStats.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->node_stats(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceStepStats)
  return target;
}

size_t DeviceStepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceStepStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.NodeExecStats node_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->node_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node_stats(static_cast<int>(i)));
    }
  }

  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStepStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStepStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceStepStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceStepStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceStepStats)
    MergeFrom(*source);
  }
}

void DeviceStepStats::MergeFrom(const DeviceStepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceStepStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_stats_.MergeFrom(from.node_stats_);
  if (from.device().size() > 0) {
    set_device(from.device());
  }
}

void DeviceStepStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStepStats::CopyFrom(const DeviceStepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStepStats::IsInitialized() const {
  return true;
}

void DeviceStepStats::Swap(DeviceStepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeviceStepStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeviceStepStats::UnsafeArenaSwap(DeviceStepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeviceStepStats::InternalSwap(DeviceStepStats* other) {
  using std::swap;
  node_stats_.InternalSwap(&other->node_stats_);
  device_.Swap(&other->device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceStepStats::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStepStats

// string device = 1;
void DeviceStepStats::clear_device() {
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DeviceStepStats::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceStepStats.device)
  return device_.Get();
}
void DeviceStepStats::set_device(const ::std::string& value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceStepStats.device)
}
#if LANG_CXX11
void DeviceStepStats::set_device(::std::string&& value) {
  
  device_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.DeviceStepStats.device)
}
#endif
void DeviceStepStats::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceStepStats.device)
}
void DeviceStepStats::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceStepStats.device)
}
::std::string* DeviceStepStats::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceStepStats.device)
  return device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceStepStats::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceStepStats.device)
  
  return device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DeviceStepStats::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceStepStats.device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DeviceStepStats::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceStepStats.device)
}
void DeviceStepStats::unsafe_arena_set_allocated_device(
    ::std::string* device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device != NULL) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceStepStats.device)
}

// repeated .tensorflow.NodeExecStats node_stats = 2;
int DeviceStepStats::node_stats_size() const {
  return node_stats_.size();
}
void DeviceStepStats::clear_node_stats() {
  node_stats_.Clear();
}
const ::tensorflow::NodeExecStats& DeviceStepStats::node_stats(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Get(index);
}
::tensorflow::NodeExecStats* DeviceStepStats::mutable_node_stats(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Mutable(index);
}
::tensorflow::NodeExecStats* DeviceStepStats::add_node_stats() {
  // @@protoc_insertion_point(field_add:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NodeExecStats >*
DeviceStepStats::mutable_node_stats() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DeviceStepStats.node_stats)
  return &node_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NodeExecStats >&
DeviceStepStats::node_stats() const {
  // @@protoc_insertion_point(field_list:tensorflow.DeviceStepStats.node_stats)
  return node_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepStats::kDevStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepStats::StepStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.StepStats)
}
StepStats::StepStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dev_stats_(arena) {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StepStats)
}
StepStats::StepStats(const StepStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dev_stats_(from.dev_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.StepStats)
}

void StepStats::SharedCtor() {
  _cached_size_ = 0;
}

StepStats::~StepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.StepStats)
  SharedDtor();
}

void StepStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void StepStats::ArenaDtor(void* object) {
  StepStats* _this = reinterpret_cast< StepStats* >(object);
  (void)_this;
}
void StepStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepStats::descriptor() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StepStats& StepStats::default_instance() {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::InitDefaults();
  return *internal_default_instance();
}

StepStats* StepStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StepStats>(arena);
}

void StepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_stats_.Clear();
  _internal_metadata_.Clear();
}

bool StepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.StepStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceStepStats dev_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dev_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.StepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.StepStats)
  return false;
#undef DO_
}

void StepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.StepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dev_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dev_stats(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.StepStats)
}

::google::protobuf::uint8* StepStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StepStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dev_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dev_stats(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StepStats)
  return target;
}

size_t StepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StepStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dev_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dev_stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StepStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StepStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StepStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StepStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StepStats)
    MergeFrom(*source);
  }
}

void StepStats::MergeFrom(const StepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StepStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dev_stats_.MergeFrom(from.dev_stats_);
}

void StepStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepStats::CopyFrom(const StepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepStats::IsInitialized() const {
  return true;
}

void StepStats::Swap(StepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StepStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StepStats::UnsafeArenaSwap(StepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StepStats::InternalSwap(StepStats* other) {
  using std::swap;
  dev_stats_.InternalSwap(&other->dev_stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepStats::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepStats

// repeated .tensorflow.DeviceStepStats dev_stats = 1;
int StepStats::dev_stats_size() const {
  return dev_stats_.size();
}
void StepStats::clear_dev_stats() {
  dev_stats_.Clear();
}
const ::tensorflow::DeviceStepStats& StepStats::dev_stats(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.StepStats.dev_stats)
  return dev_stats_.Get(index);
}
::tensorflow::DeviceStepStats* StepStats::mutable_dev_stats(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.StepStats.dev_stats)
  return dev_stats_.Mutable(index);
}
::tensorflow::DeviceStepStats* StepStats::add_dev_stats() {
  // @@protoc_insertion_point(field_add:tensorflow.StepStats.dev_stats)
  return dev_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceStepStats >*
StepStats::mutable_dev_stats() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.StepStats.dev_stats)
  return &dev_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceStepStats >&
StepStats::dev_stats() const {
  // @@protoc_insertion_point(field_list:tensorflow.StepStats.dev_stats)
  return dev_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
